{"version":3,"sources":["../src/index.js"],"names":["alphabet","maxHashLength","NaN","i","maxHash","anyBase","BIN","slice","Array","join","push","length","process","on","clear","noop","isArrayBuffer","test","Object","prototype","toString","call","toLowerCase","indexOf","bufferFromArrayBuffer","arrayBuffer","buffer","Buffer","alloc","byteLength","view","Uint8Array","loadBufferFromPath","src","cb","FS","readFile","match","err","response","data","isBuffer","msg","statusCode","Error","isRawRGBAData","obj","width","height","Uint8ClampedArray","makeRGBABufferFromRGB","rgbaBuffer","allocUnsafe","j","emptyBitmap","Jimp","args","PNG_FILTER_AUTO","MIME_PNG","path","write","mime","getBase64","getBuffer","getBufferAsync","getPixelColor","setPixelColor","jimpInstance","finish","evData","methodName","setTimeout","emitError","emitMulti","parseInt","w","h","_background","throwError","bitmap","writeUInt32BE","original","from","_quality","_deflateLevel","_deflateStrategy","_filterType","_rgba","_originalMime","imageData","isRGBA","parseBitmap","extraConstructor","__extraConstructors","find","c","Promise","resolve","reject","run","then","catch","eventName","assign","emit","getMIME","MIME","getExtension","createWriteStream","getType","pathObj","Path","parse","dir","MkDirP","sync","stream","end","l","Math","round","s","f","bool","n","AUTO","base","hash","ImagePHash","getHash","x","y","edgeHandling","xi","yi","EDGE_EXTEND","EDGE_WRAP","idx","getPixelIndex","hex","readUInt32BE","EventEmitter","entries","constants","forEach","name","value","color","shape","text","effects","appendConstructorOption","read","image","create","rgbaToInt","r","g","b","a","pow","intToRGBA","rgba","floor","limit255","max","min","diff","img1","img2","threshold","bmp1","bmp2","cloneQuiet","resize","numDiffPixels","percent","distance","phash","hash1","hash2","colorDiff","rgba1","rgba2","maxVal","loadPages","pages","newPages","map","page","all","loadFont","file","font","chars","kernings","String","fromCharCode","id","firstString","first","second","amount","dirname","common","info","jimpEvMethod","evName","method","evNameBefore","evNameAfter","replace","wrappedCb","apply","result","clone","jimpEvChange","start","offset","scanQuiet","env","ENVIRONMENT","gl","window","self"],"mappings":"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","sourcesContent":["import FS from 'fs';\nimport Path from 'path';\nimport EventEmitter from 'events';\n\nimport anyBase from 'any-base';\nimport bMFont from 'load-bmfont';\nimport MkDirP from 'mkdirp';\nimport pixelMatch from 'pixelmatch';\n\nimport ImagePHash from './modules/phash';\nimport request from './request';\n\nimport * as text from './image-manipulation/text';\nimport * as shape from './image-manipulation/shape';\nimport * as color from './image-manipulation/color';\nimport * as effects from './image-manipulation/effects';\n\nimport scan from './utils/scan';\nimport promisify from './utils/promisify';\nimport * as MIME from './utils/mime';\nimport { clear } from './utils/log';\nimport { parseBitmap, getBuffer, getBufferAsync } from './utils/image-bitmap';\nimport { isNodePattern, throwError } from './utils/error-checking';\nimport * as constants from './constants';\n\nconst alphabet =\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_';\n\n// an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nconst maxHashLength = [NaN, NaN];\n\nfor (let i = 2; i < 65; i++) {\n    const maxHash = anyBase(anyBase.BIN, alphabet.slice(0, i))(\n        new Array(64 + 1).join('1')\n    );\n    maxHashLength.push(maxHash.length);\n}\n\nprocess.on('exit', clear);\n\n// no operation\nfunction noop() {}\n\n// error checking methods\n\nfunction isArrayBuffer(test) {\n    return (\n        Object.prototype.toString\n            .call(test)\n            .toLowerCase()\n            .indexOf('arraybuffer') > -1\n    );\n}\n\n// Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n    const buffer = Buffer.alloc(arrayBuffer.byteLength);\n    const view = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n}\n\nfunction loadBufferFromPath(src, cb) {\n    if (\n        FS &&\n        typeof FS.readFile === 'function' &&\n        !src.match(/^(http|ftp)s?:\\/\\/./)\n    ) {\n        FS.readFile(src, cb);\n    } else {\n        request(src, (err, response, data) => {\n            if (err) {\n                return cb(err);\n            }\n\n            if (typeof data === 'object' && Buffer.isBuffer(data)) {\n                return cb(null, data);\n            }\n\n            const msg =\n                'Could not load Buffer from <' +\n                src +\n                '> ' +\n                '(HTTP: ' +\n                response.statusCode +\n                ')';\n\n            return new Error(msg);\n        });\n    }\n}\n\nfunction isRawRGBAData(obj) {\n    return (\n        obj &&\n        typeof obj === 'object' &&\n        typeof obj.width === 'number' &&\n        typeof obj.height === 'number' &&\n        (Buffer.isBuffer(obj.data) ||\n            obj.data instanceof Uint8Array ||\n            (typeof Uint8ClampedArray === 'function' &&\n                obj.data instanceof Uint8ClampedArray)) &&\n        (obj.data.length === obj.width * obj.height * 4 ||\n            obj.data.length === obj.width * obj.height * 3)\n    );\n}\n\nfunction makeRGBABufferFromRGB(buffer) {\n    if (buffer.length % 3 !== 0) {\n        throw new Error('Buffer length is incorrect');\n    }\n\n    const rgbaBuffer = Buffer.allocUnsafe((buffer.length / 3) * 4);\n    let j = 0;\n\n    for (let i = 0; i < buffer.length; i++) {\n        rgbaBuffer[j] = buffer[i];\n\n        if ((i + 1) % 3 === 0) {\n            rgbaBuffer[++j] = 255;\n        }\n\n        j++;\n    }\n\n    return rgbaBuffer;\n}\n\nconst emptyBitmap = {\n    data: null,\n    width: null,\n    height: null\n};\n\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image or raw image data)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nclass Jimp extends EventEmitter {\n    // An object representing a bitmap in memory, comprising:\n    //  - data: a buffer of the bitmap data\n    //  - width: the width of the image in pixels\n    //  - height: the height of the image in pixels\n    bitmap = emptyBitmap;\n\n    // The quality to be used when saving JPEG images\n    _quality = 100;\n\n    _deflateLevel = 9;\n\n    _deflateStrategy = 3;\n\n    _filterType = Jimp.PNG_FILTER_AUTO;\n\n    // Whether PNGs will be exported as RGB or RGBA\n    _rgba = true;\n\n    // Default colour to use for new pixels\n    _background = 0x00000000;\n\n    // Default MIME is PNG\n    _originalMime = Jimp.MIME_PNG;\n\n    // Exif data for the image\n    _exif = null;\n\n    constructor(...args) {\n        super();\n\n        const jimpInstance = this;\n        let cb = noop;\n\n        if (isArrayBuffer(args[0])) {\n            args[0] = bufferFromArrayBuffer(args[0]);\n        }\n\n        function finish(...args) {\n            const [err] = args;\n            const evData = err || {};\n            evData.methodName = 'constructor';\n\n            setTimeout(() => {\n                // run on next tick.\n                if (err && cb === noop) {\n                    jimpInstance.emitError('constructor', err);\n                } else if (!err) {\n                    jimpInstance.emitMulti('constructor', 'initialized');\n                }\n\n                cb.call(jimpInstance, ...args);\n            }, 1);\n        }\n\n        if (\n            (typeof args[0] === 'number' && typeof args[1] === 'number') ||\n            (parseInt(args[0], 10) && parseInt(args[1], 10))\n        ) {\n            // create a new image\n            const w = parseInt(args[0], 10);\n            const h = parseInt(args[1], 10);\n            cb = args[2];\n\n            if (typeof args[2] === 'number') {\n                this._background = args[2];\n                cb = args[3];\n            }\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            this.bitmap = {\n                data: Buffer.alloc(w * h * 4),\n                width: w,\n                height: h\n            };\n\n            for (let i = 0; i < this.bitmap.data.length; i += 4) {\n                this.bitmap.data.writeUInt32BE(this._background, i);\n            }\n\n            finish(null, this);\n        } else if (args[0] instanceof Jimp) {\n            // clone an existing Jimp\n            const [original] = args;\n            cb = args[1];\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            this.bitmap = {\n                data: Buffer.from(original.bitmap.data),\n                width: original.bitmap.width,\n                height: original.bitmap.height\n            };\n\n            this._quality = original._quality;\n            this._deflateLevel = original._deflateLevel;\n            this._deflateStrategy = original._deflateStrategy;\n            this._filterType = original._filterType;\n            this._rgba = original._rgba;\n            this._background = original._background;\n            this._originalMime = original._originalMime;\n\n            finish(null, this);\n        } else if (isRawRGBAData(args[0])) {\n            const [imageData] = args;\n            cb = args[1] || noop;\n\n            const isRGBA =\n                imageData.width * imageData.height * 4 ===\n                imageData.data.length;\n            const buffer = isRGBA\n                ? Buffer.from(imageData.data)\n                : makeRGBABufferFromRGB(imageData.data);\n\n            this.bitmap = {\n                data: buffer,\n                width: imageData.width,\n                height: imageData.height\n            };\n\n            finish(null, this);\n        } else if (typeof args[0] === 'string') {\n            // read from a path\n            const path = args[0];\n            cb = args[1];\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            loadBufferFromPath(path, (err, data) => {\n                if (err) {\n                    return throwError.call(this, err, finish);\n                }\n\n                parseBitmap.call(this, data, path, finish);\n            });\n        } else if (typeof args[0] === 'object' && Buffer.isBuffer(args[0])) {\n            // read from a buffer\n            const data = args[0];\n            cb = args[1];\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            parseBitmap.call(this, data, null, finish);\n        } else {\n            // Allow client libs to add new ways to build a Jimp object.\n            // Extra constructors must be added by `Jimp.appendConstructorOption()`\n            cb = args[args.length - 1];\n\n            if (typeof cb !== 'function') {\n                // TODO: try to solve the args after cb problem.\n                cb = args[args.length - 2];\n\n                if (typeof cb !== 'function') {\n                    cb = noop;\n                }\n            }\n\n            const extraConstructor = Jimp.__extraConstructors.find(c =>\n                c.test(...args)\n            );\n\n            if (extraConstructor) {\n                new Promise((resolve, reject) =>\n                    extraConstructor.run.call(this, resolve, reject, ...args)\n                )\n                    .then(() => finish(null, this))\n                    .catch(finish);\n            } else {\n                return throwError.call(\n                    this,\n                    'No matching constructor overloading was found. ' +\n                        'Please see the docs for how to call the Jimp constructor.',\n                    finish\n                );\n            }\n        }\n    }\n\n    /**\n     * Emit for multiple listeners\n     * @param {string} methodName name of the method to emit an error for\n     * @param {string} eventName name of the eventName to emit an error for\n     * @param {object} data to emit\n     */\n    emitMulti(methodName, eventName, data = {}) {\n        data = Object.assign(data, { methodName, eventName });\n        this.emit('any', data);\n\n        if (methodName) {\n            this.emit(methodName, data);\n        }\n\n        this.emit(eventName, data);\n    }\n\n    emitError(methodName, err) {\n        this.emitMulti(methodName, 'error', err);\n    }\n\n    /**\n     * Get the current height of the image\n     * @param {number} height of the image\n     */\n    getHeight() {\n        return this.bitmap.height;\n    }\n\n    /**\n     * Get the current width of the image\n     * @param {number} width of the image\n     */\n    getWidth() {\n        return this.bitmap.width;\n    }\n\n    /**\n     * Nicely format Jimp object when sent to the console e.g. console.log(image)\n     * @returns {string} pretty printed\n     */\n    inspect() {\n        return (\n            '<Jimp ' +\n            (this.bitmap === emptyBitmap\n                ? 'pending...'\n                : this.bitmap.width + 'x' + this.bitmap.height) +\n            '>'\n        );\n    }\n\n    /**\n     * Nicely format Jimp object when converted to a string\n     * @returns {string} pretty printed\n     */\n    toString() {\n        return '[object Jimp]';\n    }\n\n    /**\n     * Returns the original MIME of the image (default: \"image/png\")\n     * @returns {string} the MIME\n     */\n    getMIME() {\n        const mime = this._originalMime || Jimp.MIME_PNG;\n\n        return mime;\n    }\n\n    /**\n     * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n     * @returns {string} the file extension\n     */\n    getExtension() {\n        const mime = this.getMIME();\n\n        return MIME.getExtension(mime);\n    }\n\n    /**\n     * Writes the image to a file\n     * @param {string} path a path to the destination file (either PNG or JPEG)\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n     * @returns {Jimp} this for chaining of methods\n     */\n    write(path, cb) {\n        if (!FS || !FS.createWriteStream) {\n            throw new Error(\n                'Cant access the filesystem. You can use the getBase64 method.'\n            );\n        }\n\n        if (typeof path !== 'string') {\n            return throwError.call(this, 'path must be a string', cb);\n        }\n\n        if (typeof cb === 'undefined') {\n            cb = noop;\n        }\n\n        if (typeof cb !== 'function') {\n            return throwError.call(this, 'cb must be a function', cb);\n        }\n\n        const mime = MIME.getType(path) || this.getMIME();\n        const pathObj = Path.parse(path);\n\n        if (pathObj.dir) {\n            MkDirP.sync(pathObj.dir);\n        }\n\n        this.getBuffer(mime, (err, buffer) => {\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            const stream = FS.createWriteStream(path);\n\n            stream\n                .on('open', () => {\n                    stream.write(buffer);\n                    stream.end();\n                })\n                .on('error', err => {\n                    return throwError.call(this, err, cb);\n                });\n            stream.on('finish', () => {\n                cb.call(this, null, this);\n            });\n        });\n\n        return this;\n    }\n\n    writeAsync = path => promisify(this.write, this, path);\n\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n        if (typeof l !== 'number') {\n            return throwError.call(this, 'l must be a number', cb);\n        }\n\n        if (l < 0 || l > 9) {\n            return throwError.call(this, 'l must be a number 0 - 9', cb);\n        }\n\n        this._deflateLevel = Math.round(l);\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n        if (typeof s !== 'number') {\n            return throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s < 0 || s > 3) {\n            return throwError.call(this, 's must be a number 0 - 3', cb);\n        }\n\n        this._deflateStrategy = Math.round(s);\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n        if (typeof f !== 'number') {\n            return throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (f < -1 || f > 4) {\n            return throwError.call(\n                this,\n                'n must be -1 (auto) or a number 0 - 4',\n                cb\n            );\n        }\n\n        this._filterType = Math.round(f);\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n     * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    rgba(bool, cb) {\n        if (typeof bool !== 'boolean') {\n            return throwError.call(\n                this,\n                'bool must be a boolean, true for RGBA or false for RGB',\n                cb\n            );\n        }\n\n        this._rgba = bool;\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n        if (typeof n !== 'number') {\n            return throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (n < 0 || n > 100) {\n            return throwError.call(this, 'n must be a number 0 - 100', cb);\n        }\n\n        this._quality = Math.round(n);\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Converts the image to a base 64 string\n     * @param {string} mime the mime type of the image data to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    getBase64(mime, cb) {\n        if (mime === Jimp.AUTO) {\n            // allow auto MIME detection\n            mime = this.getMIME();\n        }\n\n        if (typeof mime !== 'string') {\n            return throwError.call(this, 'mime must be a string', cb);\n        }\n\n        if (typeof cb !== 'function') {\n            return throwError.call(this, 'cb must be a function', cb);\n        }\n\n        this.getBuffer(mime, function(err, data) {\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            const src = 'data:' + mime + ';base64,' + data.toString('base64');\n            cb.call(this, null, src);\n        });\n\n        return this;\n    }\n\n    getBase64Async = mime => promisify(this.getBase64, this, mime);\n\n    /**\n     * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>.\n     * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {string} a string representing the hash\n     */\n    hash(base, cb) {\n        base = base || 64;\n\n        if (typeof base === 'function') {\n            cb = base;\n            base = 64;\n        }\n\n        if (typeof base !== 'number') {\n            return throwError.call(this, 'base must be a number', cb);\n        }\n\n        if (base < 2 || base > 64) {\n            return throwError.call(\n                this,\n                'base must be a number between 2 and 64',\n                cb\n            );\n        }\n\n        let hash = new ImagePHash().getHash(this);\n        hash = anyBase(anyBase.BIN, alphabet.slice(0, base))(hash);\n\n        while (hash.length < maxHashLength[base]) {\n            hash = '0' + hash; // pad out with leading zeros\n        }\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, hash);\n        }\n\n        return hash;\n    }\n\n    /**\n     * Converts the image to a buffer\n     * @param {string} mime the mime type of the image buffer to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    getBuffer = getBuffer;\n\n    getBufferAsync = getBufferAsync;\n\n    /**\n     * Returns the offset of a pixel in the bitmap buffer\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {number} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    getPixelIndex(x, y, edgeHandling, cb) {\n        let xi;\n        let yi;\n\n        if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n            cb = edgeHandling;\n            edgeHandling = null;\n        }\n\n        if (!edgeHandling) {\n            edgeHandling = Jimp.EDGE_EXTEND;\n        }\n\n        if (typeof x !== 'number' || typeof y !== 'number') {\n            return throwError.call(this, 'x and y must be numbers', cb);\n        }\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        xi = x;\n        yi = y;\n\n        if (edgeHandling === Jimp.EDGE_EXTEND) {\n            if (x < 0) xi = 0;\n            if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n            if (y < 0) yi = 0;\n            if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n        }\n\n        if (edgeHandling === Jimp.EDGE_WRAP) {\n            if (x < 0) {\n                xi = this.bitmap.width + x;\n            }\n\n            if (x >= this.bitmap.width) {\n                xi = x % this.bitmap.width;\n            }\n\n            if (y < 0) {\n                xi = this.bitmap.height + y;\n            }\n\n            if (y >= this.bitmap.height) {\n                yi = y % this.bitmap.height;\n            }\n        }\n\n        let i = (this.bitmap.width * yi + xi) << 2;\n\n        // if out of bounds index is -1\n        if (xi < 0 || xi >= this.bitmap.width) {\n            i = -1;\n        }\n\n        if (yi < 0 || yi >= this.bitmap.height) {\n            i = -1;\n        }\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, i);\n        }\n\n        return i;\n    }\n\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the color of the pixel\n     */\n    getPixelColor(x, y, cb) {\n        if (typeof x !== 'number' || typeof y !== 'number')\n            return throwError.call(this, 'x and y must be numbers', cb);\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const idx = this.getPixelIndex(x, y);\n        const hex = this.bitmap.data.readUInt32BE(idx);\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, hex);\n        }\n\n        return hex;\n    }\n\n    getPixelColour = this.getPixelColor;\n\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} hex color to set\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    setPixelColor(hex, x, y, cb) {\n        if (\n            typeof hex !== 'number' ||\n            typeof x !== 'number' ||\n            typeof y !== 'number'\n        )\n            return throwError.call(this, 'hex, x and y must be numbers', cb);\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const idx = this.getPixelIndex(x, y);\n        this.bitmap.data.writeUInt32BE(hex, idx);\n\n        if (isNodePattern(cb)) {\n            cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    setPixelColour = this.setPixelColor;\n}\n\nObject.entries(constants).forEach(([name, value]) => {\n    Jimp[name] = value;\n});\n\nObject.entries({ ...color, ...shape, ...text, ...effects }).forEach(\n    ([name, value]) => {\n        Jimp.prototype[name] = value;\n    }\n);\n\nJimp.__extraConstructors = [];\n\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\nJimp.appendConstructorOption = function(name, test, run) {\n    Jimp.__extraConstructors.push({ name, test, run });\n};\n\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\nJimp.read = function(...args) {\n    return new Promise((resolve, reject) => {\n        new Jimp(...args, (err, image) => {\n            if (err) reject(err);\n            else resolve(image);\n        });\n    });\n};\n\nJimp.create = Jimp.read;\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\nJimp.rgbaToInt = function(r, g, b, a, cb) {\n    if (\n        typeof r !== 'number' ||\n        typeof g !== 'number' ||\n        typeof b !== 'number' ||\n        typeof a !== 'number'\n    ) {\n        return throwError.call(this, 'r, g, b and a must be numbers', cb);\n    }\n\n    if (r < 0 || r > 255) {\n        return throwError.call(this, 'r must be between 0 and 255', cb);\n    }\n\n    if (g < 0 || g > 255) {\n        throwError.call(this, 'g must be between 0 and 255', cb);\n    }\n\n    if (b < 0 || b > 255) {\n        return throwError.call(this, 'b must be between 0 and 255', cb);\n    }\n\n    if (a < 0 || a > 255) {\n        return throwError.call(this, 'a must be between 0 and 255', cb);\n    }\n\n    r = Math.round(r);\n    b = Math.round(b);\n    g = Math.round(g);\n    a = Math.round(a);\n\n    const i =\n        r * Math.pow(256, 3) +\n        g * Math.pow(256, 2) +\n        b * Math.pow(256, 1) +\n        a * Math.pow(256, 0);\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, i);\n    }\n\n    return i;\n};\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\nJimp.intToRGBA = function(i, cb) {\n    if (typeof i !== 'number') {\n        return throwError.call(this, 'i must be a number', cb);\n    }\n\n    const rgba = {};\n\n    rgba.r = Math.floor(i / Math.pow(256, 3));\n    rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n    rgba.b = Math.floor(\n        (i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) /\n            Math.pow(256, 1)\n    );\n    rgba.a = Math.floor(\n        (i -\n            rgba.r * Math.pow(256, 3) -\n            rgba.g * Math.pow(256, 2) -\n            rgba.b * Math.pow(256, 1)) /\n            Math.pow(256, 0)\n    );\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, rgba);\n    }\n\n    return rgba;\n};\n\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\nJimp.limit255 = function(n) {\n    n = Math.max(n, 0);\n    n = Math.min(n, 255);\n\n    return n;\n};\n\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\nJimp.diff = function(img1, img2, threshold = 0.1) {\n    if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp))\n        return throwError.call(this, 'img1 and img2 must be an Jimp images');\n\n    const bmp1 = img1.bitmap;\n    const bmp2 = img2.bitmap;\n\n    if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n        if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n            // img1 is bigger\n            img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n        } else {\n            // img2 is bigger (or they are the same in area)\n            img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n        }\n    }\n\n    if (typeof threshold !== 'number' || threshold < 0 || threshold > 1) {\n        return throwError.call(\n            this,\n            'threshold must be a number between 0 and 1'\n        );\n    }\n\n    const diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n\n    const numDiffPixels = pixelMatch(\n        bmp1.data,\n        bmp2.data,\n        diff.bitmap.data,\n        diff.bitmap.width,\n        diff.bitmap.height,\n        { threshold }\n    );\n\n    return {\n        percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n        image: diff\n    };\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.distance = function(img1, img2) {\n    const phash = new ImagePHash();\n    const hash1 = phash.getHash(img1);\n    const hash2 = phash.getHash(img2);\n\n    return phash.distance(hash1, hash2);\n};\n\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\nJimp.colorDiff = function(rgba1, rgba2) {\n    const pow = n => Math.pow(n, 2);\n    const { max } = Math;\n    const maxVal = 255 * 255 * 3;\n\n    if (rgba1.a !== 0 && !rgba1.a) {\n        rgba1.a = 255;\n    }\n\n    if (rgba2.a !== 0 && !rgba2.a) {\n        rgba2.a = 255;\n    }\n\n    return (\n        (max(\n            pow(rgba1.r - rgba2.r),\n            pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)\n        ) +\n            max(\n                pow(rgba1.g - rgba2.g),\n                pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)\n            ) +\n            max(\n                pow(rgba1.b - rgba2.b),\n                pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a)\n            )) /\n        maxVal\n    );\n};\n\nfunction loadPages(dir, pages) {\n    const newPages = pages.map(page => {\n        return Jimp.read(dir + '/' + page);\n    });\n\n    return Promise.all(newPages);\n}\n\n/**\n * Loads a bitmap font from a file\n * @param {string} file the file path of a .fnt file\n * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n * @returns {Promise} a promise\n */\nJimp.loadFont = function(file, cb) {\n    if (typeof file !== 'string')\n        return throwError.call(this, 'file must be a string', cb);\n\n    return new Promise((resolve, reject) => {\n        cb =\n            cb ||\n            function(err, font) {\n                if (err) reject(err);\n                else resolve(font);\n            };\n\n        bMFont(file, (err, font) => {\n            const chars = {};\n            const kernings = {};\n\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            for (let i = 0; i < font.chars.length; i++) {\n                chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n            }\n\n            for (let i = 0; i < font.kernings.length; i++) {\n                const firstString = String.fromCharCode(font.kernings[i].first);\n                kernings[firstString] = kernings[firstString] || {};\n                kernings[firstString][\n                    String.fromCharCode(font.kernings[i].second)\n                ] =\n                    font.kernings[i].amount;\n            }\n\n            loadPages(Path.dirname(file), font.pages).then(pages => {\n                cb(null, {\n                    chars,\n                    kernings,\n                    pages,\n                    common: font.common,\n                    info: font.info\n                });\n            });\n        });\n    });\n};\n\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\nfunction jimpEvMethod(methodName, evName, method) {\n    const evNameBefore = 'before-' + evName;\n    const evNameAfter = evName.replace(/e$/, '') + 'ed';\n\n    Jimp.prototype[methodName] = function(...args) {\n        let wrappedCb;\n        const cb = args[method.length - 1];\n        const jimpInstance = this;\n\n        if (typeof cb === 'function') {\n            wrappedCb = function(...args) {\n                const [err, data] = args;\n\n                if (err) {\n                    jimpInstance.emitError(methodName, err);\n                } else {\n                    jimpInstance.emitMulti(methodName, evNameAfter, {\n                        [methodName]: data\n                    });\n                }\n\n                cb.apply(this, args);\n            };\n            args[args.length - 1] = wrappedCb;\n        } else {\n            wrappedCb = false;\n        }\n\n        this.emitMulti(methodName, evNameBefore);\n\n        let result;\n\n        try {\n            result = method.apply(this, args);\n\n            if (!wrappedCb) {\n                this.emitMulti(methodName, evNameAfter, {\n                    [methodName]: result\n                });\n            }\n        } catch (err) {\n            err.methodName = methodName;\n            this.emitError(methodName, err);\n        }\n\n        return result;\n    };\n\n    Jimp.prototype[methodName + 'Quiet'] = method;\n}\n\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\njimpEvMethod('clone', 'clone', function(cb) {\n    const clone = new Jimp(this);\n\n    if (isNodePattern(cb)) {\n        cb.call(clone, null, clone);\n    }\n\n    return clone;\n});\n\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\nfunction jimpEvChange(methodName, method) {\n    jimpEvMethod(methodName, 'change', method);\n}\n\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('background', function(hex, cb) {\n    if (typeof hex !== 'number') {\n        return throwError.call(\n            this,\n            'hex must be a hexadecimal rgba value',\n            cb\n        );\n    }\n\n    this._background = hex;\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n});\n\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('scan', function(x, y, w, h, f, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof w !== 'number' || typeof h !== 'number') {\n        return throwError.call(this, 'w and h must be numbers', cb);\n    }\n\n    if (typeof f !== 'function') {\n        return throwError.call(this, 'f must be a function', cb);\n    }\n\n    const result = scan(this, x, y, w, h, f);\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, result);\n    }\n\n    return result;\n});\n\n/**\n * Crops the image at a given point to a give size\n * @param {number} x the x coordinate to crop form\n * @param {number} y the y coordinate to crop form\n * @param w the width of the crop region\n * @param h the height of the crop region\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('crop', function(x, y, w, h, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number')\n        return throwError.call(this, 'x and y must be numbers', cb);\n    if (typeof w !== 'number' || typeof h !== 'number')\n        return throwError.call(this, 'w and h must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    if (x === 0 && w === this.bitmap.width) {\n        // shortcut\n        const start = (w * y + x) << 2;\n        const end = (start + h * w) << (2 + 1);\n\n        this.bitmap.data = this.bitmap.data.slice(start, end);\n    } else {\n        const bitmap = Buffer.allocUnsafe(w * h * 4);\n        let offset = 0;\n\n        this.scanQuiet(x, y, w, h, function(x, y, idx) {\n            const data = this.bitmap.data.readUInt32BE(idx, true);\n            bitmap.writeUInt32BE(data, offset, true);\n            offset += 4;\n        });\n\n        this.bitmap.data = bitmap;\n    }\n\n    this.bitmap.width = w;\n    this.bitmap.height = h;\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n});\n\nif (process.env.ENVIRONMENT === 'BROWSER') {\n    // For use in a web browser or web worker\n    /* global self */\n    let gl;\n\n    if (typeof window !== 'undefined' && typeof window === 'object') {\n        gl = window;\n    }\n\n    if (typeof self !== 'undefined' && typeof self === 'object') {\n        gl = self;\n    }\n\n    gl.Jimp = Jimp;\n    gl.Buffer = Buffer;\n}\n\nexport default Jimp;\n"],"file":"index.js"}