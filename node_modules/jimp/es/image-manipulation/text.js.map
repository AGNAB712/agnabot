{"version":3,"sources":["../../src/image-manipulation/text.js"],"names":["isNodePattern","throwError","constants","measureText","font","text","x","i","length","chars","xoffset","kernings","xadvance","measureTextHeight","maxWidth","words","split","line","textTotalHeight","common","lineHeight","n","testLine","testWidth","xOffsetBasedOnAlignment","alignment","HORIZONTAL_ALIGN_LEFT","HORIZONTAL_ALIGN_CENTER","drawCharacter","image","y","char","width","height","imageChar","pages","page","cloneQuiet","crop","composite","yoffset","printText","print","maxHeight","cb","Infinity","call","alignmentX","alignmentY","VERTICAL_ALIGN_TOP","VERTICAL_ALIGN_BOTTOM","VERTICAL_ALIGN_MIDDLE"],"mappings":"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","sourcesContent":["import { isNodePattern, throwError } from '../utils/error-checking';\nimport * as constants from '../constants';\n\nfunction measureText(font, text) {\n    let x = 0;\n\n    for (let i = 0; i < text.length; i++) {\n        if (font.chars[text[i]]) {\n            x +=\n                font.chars[text[i]].xoffset +\n                (font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]]\n                    ? font.kernings[text[i]][text[i + 1]]\n                    : 0) +\n                (font.chars[text[i]].xadvance || 0);\n        }\n    }\n\n    return x;\n}\n\nfunction measureTextHeight(font, text, maxWidth) {\n    const words = text.split(' ');\n    let line = '';\n    let textTotalHeight = font.common.lineHeight;\n\n    for (let n = 0; n < words.length; n++) {\n        const testLine = line + words[n] + ' ';\n        const testWidth = measureText(font, testLine);\n\n        if (testWidth > maxWidth && n > 0) {\n            textTotalHeight += font.common.lineHeight;\n            line = words[n] + ' ';\n        } else {\n            line = testLine;\n        }\n    }\n\n    return textTotalHeight;\n}\n\nfunction xOffsetBasedOnAlignment(font, line, maxWidth, alignment) {\n    if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n        return 0;\n    }\n\n    if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n        return (maxWidth - measureText(font, line)) / 2;\n    }\n\n    return maxWidth - measureText(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, char) {\n    if (char.width > 0 && char.height > 0) {\n        let imageChar = char.image;\n\n        if (!imageChar) {\n            imageChar = font.pages[char.page]\n                .cloneQuiet()\n                .crop(char.x, char.y, char.width, char.height);\n            char.image = imageChar;\n        }\n\n        return image.composite(imageChar, x + char.xoffset, y + char.yoffset);\n    }\n\n    return image;\n}\n\nfunction printText(font, x, y, text) {\n    for (let i = 0; i < text.length; i++) {\n        let char;\n\n        if (font.chars[text[i]]) {\n            char = text[i];\n        } else {\n            char = '?';\n        }\n\n        drawCharacter(this, font, x, y, font.chars[char]);\n        x +=\n            (font.kernings[char] && font.kernings[char][text[i + 1]]\n                ? font.kernings[char][text[i + 1]]\n                : 0) + (font.chars[char].xadvance || 0);\n    }\n}\n\n/**\n * Draws a text on a image on a given boundary\n * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n * @param {number} x the x position to start drawing the text\n * @param {number} y the y position to start drawing the text\n * @param {string} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n * @param {number} maxWidth (optional) the boundary width to draw in\n * @param {number} maxHeight (optional) the boundary height to draw in\n * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n * @returns {Jimp} this for chaining of methods\n */\nexport function print(font, x, y, text, maxWidth, maxHeight, cb) {\n    if (typeof maxWidth === 'function' && typeof cb === 'undefined') {\n        cb = maxWidth;\n        maxWidth = Infinity;\n    }\n\n    if (typeof maxWidth === 'undefined') {\n        maxWidth = Infinity;\n    }\n\n    if (typeof maxHeight === 'function' && typeof cb === 'undefined') {\n        cb = maxHeight;\n        maxWidth = Infinity;\n    }\n\n    if (typeof maxHeight === 'undefined') {\n        maxHeight = Infinity;\n    }\n\n    if (typeof font !== 'object') {\n        return throwError.call(this, 'font must be a Jimp loadFont', cb);\n    }\n\n    if (\n        typeof x !== 'number' ||\n        typeof y !== 'number' ||\n        typeof maxWidth !== 'number'\n    ) {\n        return throwError.call(this, 'x, y and maxWidth must be numbers', cb);\n    }\n\n    if (typeof text !== 'string' && typeof text !== 'object') {\n        return throwError.call(this, 'text must be a string or an object', cb);\n    }\n\n    if (typeof maxWidth !== 'number') {\n        return throwError.call(this, 'maxWidth must be a number', cb);\n    }\n\n    if (typeof maxHeight !== 'number') {\n        return throwError.call(this, 'maxHeight must be a number', cb);\n    }\n\n    let alignmentX;\n    let alignmentY;\n\n    if (typeof text === 'object') {\n        alignmentX = text.alignmentX || constants.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || constants.VERTICAL_ALIGN_TOP;\n        ({ text } = text);\n    } else {\n        alignmentX = constants.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = constants.VERTICAL_ALIGN_TOP;\n    }\n\n    if (\n        maxHeight !== Infinity &&\n        alignmentY === constants.VERTICAL_ALIGN_BOTTOM\n    ) {\n        y = maxHeight - measureTextHeight(font, text, maxWidth);\n    } else if (\n        maxHeight !== Infinity &&\n        alignmentY === constants.VERTICAL_ALIGN_MIDDLE\n    ) {\n        y = maxHeight / 2 - measureTextHeight(font, text, maxWidth) / 2;\n    }\n\n    const words = text.split(' ');\n    let line = '';\n\n    for (let n = 0; n < words.length; n++) {\n        const testLine = line + words[n] + ' ';\n        const testWidth = measureText(font, testLine);\n\n        if (testWidth > maxWidth && n > 0) {\n            this.print(\n                font,\n                x + xOffsetBasedOnAlignment(font, line, maxWidth, alignmentX),\n                y,\n                line\n            );\n            line = words[n] + ' ';\n            y += font.common.lineHeight;\n        } else {\n            line = testLine;\n        }\n    }\n\n    printText.call(\n        this,\n        font,\n        x + xOffsetBasedOnAlignment(font, line, maxWidth, alignmentX),\n        y,\n        line\n    );\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n"],"file":"text.js"}