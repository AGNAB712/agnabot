{"version":3,"sources":["../../src/image-manipulation/color.js"],"names":["brightness","val","cb","throwError","call","scanQuiet","bitmap","width","height","x","y","idx","data","contrast","adjust","value","Math","pow","posterize","n","floor","greyscale","grey","parseInt","grayscale","opacity","f","v","sepia","red","green","blue","fade","convolution","kernel","edgeHandling","constants","EDGE_EXTEND","newData","Buffer","from","kRows","length","kCols","rowEnd","colEnd","rowIni","colIni","weight","rSum","gSum","bSum","ri","gi","bi","xi","yi","idxi","row","col","getPixelIndex","opaque","pixelate","size","w","h","source","cloneQuiet","xx","yx","applyKernel","im","kx","ky","convolute","Array","isArray","ksize","colorFn","actions","originalScope","clr","r","g","b","colorModifier","i","amount","c","toRgb","max","min","forEach","action","apply","tinyColor","mix","params","clr2","fn","color","colour"],"mappings":"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","sourcesContent":["import tinyColor from 'tinycolor2';\n\nimport isDef from '../utils/is-def';\nimport { isNodePattern, throwError } from '../utils/error-checking';\nimport * as constants from '../constants';\n\n/**\n * Adjusts the brightness of the image\n * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function brightness(val, cb) {\n    if (typeof val !== 'number') {\n        return throwError.call(this, 'val must be numbers', cb);\n    }\n\n    if (val < -1 || val > +1) {\n        return throwError.call(\n            this,\n            'val must be a number between -1 and +1',\n            cb\n        );\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        if (val < 0.0) {\n            this.bitmap.data[idx] = this.bitmap.data[idx] * (1 + val);\n            this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] * (1 + val);\n            this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] * (1 + val);\n        } else {\n            this.bitmap.data[idx] =\n                this.bitmap.data[idx] + (255 - this.bitmap.data[idx]) * val;\n            this.bitmap.data[idx + 1] =\n                this.bitmap.data[idx + 1] +\n                (255 - this.bitmap.data[idx + 1]) * val;\n            this.bitmap.data[idx + 2] =\n                this.bitmap.data[idx + 2] +\n                (255 - this.bitmap.data[idx + 2]) * val;\n        }\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Adjusts the contrast of the image\n * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function contrast(val, cb) {\n    if (typeof val !== 'number') {\n        return throwError.call(this, 'val must be numbers', cb);\n    }\n\n    if (val < -1 || val > +1) {\n        return throwError.call(\n            this,\n            'val must be a number between -1 and +1',\n            cb\n        );\n    }\n\n    function adjust(value) {\n        let x;\n\n        if (val < 0) {\n            x = value > 127 ? 1 - value / 255 : value / 255;\n\n            if (x < 0) {\n                x = 0;\n            }\n\n            x = 0.5 * Math.pow(x * 2, 1 + val);\n\n            return value > 127 ? (1.0 - x) * 255 : x * 255;\n        }\n\n        x = value > 127 ? 1 - value / 255 : value / 255;\n\n        if (x < 0) {\n            x = 0;\n        }\n\n        x = 0.5 * Math.pow(2 * x, val === 1 ? 127 : 1 / (1 - val));\n\n        return value > 127 ? (1 - x) * 255 : x * 255;\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n        this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n        this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Apply a posterize effect\n * @param {number} n the amount to adjust the contrast, minimum threshold is two\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function posterize(n, cb) {\n    if (typeof n !== 'number') {\n        return throwError.call(this, 'n must be numbers', cb);\n    }\n\n    if (n < 2) {\n        n = 2;\n    } // minimum of 2 levels\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        this.bitmap.data[idx] =\n            (Math.floor((this.bitmap.data[idx] / 255) * (n - 1)) / (n - 1)) *\n            255;\n        this.bitmap.data[idx + 1] =\n            (Math.floor((this.bitmap.data[idx + 1] / 255) * (n - 1)) /\n                (n - 1)) *\n            255;\n        this.bitmap.data[idx + 2] =\n            (Math.floor((this.bitmap.data[idx + 2] / 255) * (n - 1)) /\n                (n - 1)) *\n            255;\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Removes colour from the image using ITU Rec 709 luminance values\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function greyscale(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        const grey = parseInt(\n            0.2126 * this.bitmap.data[idx] +\n                0.7152 * this.bitmap.data[idx + 1] +\n                0.0722 * this.bitmap.data[idx + 2],\n            10\n        );\n\n        this.bitmap.data[idx] = grey;\n        this.bitmap.data[idx + 1] = grey;\n        this.bitmap.data[idx + 2] = grey;\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n// Alias of greyscale for our American friends\nexport const grayscale = greyscale;\n\n/**\n * Multiplies the opacity of each pixel by a factor between 0 and 1\n * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport const opacity = function(f, cb) {\n    if (typeof f !== 'number')\n        return throwError.call(this, 'f must be a number', cb);\n    if (f < 0 || f > 1)\n        return throwError.call(this, 'f must be a number from 0 to 1', cb);\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        const v = this.bitmap.data[idx + 3] * f;\n        this.bitmap.data[idx + 3] = v;\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n};\n\n/**\n * Applies a sepia tone to the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function sepia(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        let red = this.bitmap.data[idx];\n        let green = this.bitmap.data[idx + 1];\n        let blue = this.bitmap.data[idx + 2];\n\n        red = red * 0.393 + green * 0.769 + blue * 0.189;\n        green = red * 0.349 + green * 0.686 + blue * 0.168;\n        blue = red * 0.272 + green * 0.534 + blue * 0.131;\n\n        this.bitmap.data[idx] = red < 255 ? red : 255;\n        this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n        this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Fades each pixel by a factor between 0 and 1\n * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function fade(f, cb) {\n    if (typeof f !== 'number') {\n        return throwError.call(this, 'f must be a number', cb);\n    }\n\n    if (f < 0 || f > 1) {\n        return throwError.call(this, 'f must be a number from 0 to 1', cb);\n    }\n\n    // this method is an alternative to opacity (which may be deprecated)\n    this.opacity(1 - f);\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Adds each element of the image to its local neighbors, weighted by the kernel\n * @param {array} kernel a matrix to weight the neighbors sum\n * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function convolution(kernel, edgeHandling, cb) {\n    if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n        cb = edgeHandling;\n        edgeHandling = null;\n    }\n\n    if (!edgeHandling) {\n        edgeHandling = constants.EDGE_EXTEND;\n    }\n\n    const newData = Buffer.from(this.bitmap.data);\n    const kRows = kernel.length;\n    const kCols = kernel[0].length;\n    const rowEnd = Math.floor(kRows / 2);\n    const colEnd = Math.floor(kCols / 2);\n    const rowIni = -rowEnd;\n    const colIni = -colEnd;\n\n    let weight;\n    let rSum;\n    let gSum;\n    let bSum;\n    let ri;\n    let gi;\n    let bi;\n    let xi;\n    let yi;\n    let idxi;\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        bSum = 0;\n        gSum = 0;\n        rSum = 0;\n\n        for (let row = rowIni; row <= rowEnd; row++) {\n            for (let col = colIni; col <= colEnd; col++) {\n                xi = x + col;\n                yi = y + row;\n                weight = kernel[row + rowEnd][col + colEnd];\n                idxi = this.getPixelIndex(xi, yi, edgeHandling);\n\n                if (idxi === -1) {\n                    bi = 0;\n                    gi = 0;\n                    ri = 0;\n                } else {\n                    ri = this.bitmap.data[idxi + 0];\n                    gi = this.bitmap.data[idxi + 1];\n                    bi = this.bitmap.data[idxi + 2];\n                }\n\n                rSum += weight * ri;\n                gSum += weight * gi;\n                bSum += weight * bi;\n            }\n        }\n\n        if (rSum < 0) {\n            rSum = 0;\n        }\n\n        if (gSum < 0) {\n            gSum = 0;\n        }\n\n        if (bSum < 0) {\n            bSum = 0;\n        }\n\n        if (rSum > 255) {\n            rSum = 255;\n        }\n\n        if (gSum > 255) {\n            gSum = 255;\n        }\n\n        if (bSum > 255) {\n            bSum = 255;\n        }\n\n        newData[idx + 0] = rSum;\n        newData[idx + 1] = gSum;\n        newData[idx + 2] = bSum;\n    });\n\n    this.bitmap.data = newData;\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Set the alpha channel on every pixel to fully opaque\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function opaque(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        this.bitmap.data[idx + 3] = 255;\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Pixelates the image or a region\n * @param {number} size the size of the pixels\n * @param {number} x (optional) the x position of the region to pixelate\n * @param {number} y (optional) the y position of the region to pixelate\n * @param {number} w (optional) the width of the region to pixelate\n * @param {number} h (optional) the height of the region to pixelate\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function pixelate(size, x, y, w, h, cb) {\n    if (typeof x === 'function') {\n        cb = x;\n        h = null;\n        w = null;\n        y = null;\n        x = null;\n    } else {\n        if (typeof size !== 'number') {\n            return throwError.call(this, 'size must be a number', cb);\n        }\n\n        if (isDef(x) && typeof x !== 'number') {\n            return throwError.call(this, 'x must be a number', cb);\n        }\n\n        if (isDef(y) && typeof y !== 'number') {\n            return throwError.call(this, 'y must be a number', cb);\n        }\n\n        if (isDef(w) && typeof w !== 'number') {\n            return throwError.call(this, 'w must be a number', cb);\n        }\n\n        if (isDef(h) && typeof h !== 'number') {\n            return throwError.call(this, 'h must be a number', cb);\n        }\n    }\n\n    const kernel = [\n        [1 / 16, 2 / 16, 1 / 16],\n        [2 / 16, 4 / 16, 2 / 16],\n        [1 / 16, 2 / 16, 1 / 16]\n    ];\n\n    x = x || 0;\n    y = y || 0;\n    w = isDef(w) ? x : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n\n    const source = this.cloneQuiet();\n\n    this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n        xx = size * Math.floor(xx / size);\n        yx = size * Math.floor(yx / size);\n\n        const value = applyKernel(source, kernel, xx, yx);\n\n        this.bitmap.data[idx] = value[0];\n        this.bitmap.data[idx + 1] = value[1];\n        this.bitmap.data[idx + 2] = value[2];\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\nfunction applyKernel(im, kernel, x, y) {\n    const value = [0, 0, 0];\n    const size = (kernel.length - 1) / 2;\n\n    for (let kx = 0; kx < kernel.length; kx += 1) {\n        for (let ky = 0; ky < kernel[kx].length; ky += 1) {\n            const idx = im.getPixelIndex(x + kx - size, y + ky - size);\n\n            value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n            value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n            value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n        }\n    }\n    return value;\n}\n\n/**\n * Applies a convolution kernel to the image or a region\n * @param {array} kernel the convolution kernel\n * @param {number} x (optional) the x position of the region to apply convolution to\n * @param {number} y (optional) the y position of the region to apply convolution to\n * @param {number} w (optional) the width of the region to apply convolution to\n * @param {number} h (optional) the height of the region to apply convolution to\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nexport function convolute(kernel, x, y, w, h, cb) {\n    if (!Array.isArray(kernel))\n        return throwError.call(this, 'the kernel must be an array', cb);\n\n    if (typeof x === 'function') {\n        cb = x;\n        x = null;\n        y = null;\n        w = null;\n        h = null;\n    } else {\n        if (isDef(x) && typeof x !== 'number') {\n            return throwError.call(this, 'x must be a number', cb);\n        }\n\n        if (isDef(y) && typeof y !== 'number') {\n            return throwError.call(this, 'y must be a number', cb);\n        }\n\n        if (isDef(w) && typeof w !== 'number') {\n            return throwError.call(this, 'w must be a number', cb);\n        }\n\n        if (isDef(h) && typeof h !== 'number') {\n            return throwError.call(this, 'h must be a number', cb);\n        }\n    }\n\n    const ksize = (kernel.length - 1) / 2;\n\n    x = isDef(x) ? x : ksize;\n    y = isDef(y) ? y : ksize;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n\n    const source = this.cloneQuiet();\n\n    this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n        const value = applyKernel(source, kernel, xx, yx);\n\n        this.bitmap.data[idx] = value[0];\n        this.bitmap.data[idx + 1] = value[1];\n        this.bitmap.data[idx + 2] = value[2];\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\n/**\n * Apply multiple color modification rules\n * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp }this for chaining of methods\n */\nfunction colorFn(actions, cb) {\n    if (!actions || !Array.isArray(actions)) {\n        return throwError.call(this, 'actions must be an array', cb);\n    }\n\n    const originalScope = this;\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n        x,\n        y,\n        idx\n    ) {\n        let clr = tinyColor({\n            r: this.bitmap.data[idx],\n            g: this.bitmap.data[idx + 1],\n            b: this.bitmap.data[idx + 2]\n        });\n\n        const colorModifier = function(i, amount) {\n            const c = clr.toRgb();\n            c[i] = Math.max(0, Math.min(c[i] + amount, 255));\n            return tinyColor(c);\n        };\n\n        actions.forEach(action => {\n            if (action.apply === 'mix') {\n                clr = tinyColor.mix(clr, action.params[0], action.params[1]);\n            } else if (action.apply === 'tint') {\n                clr = tinyColor.mix(clr, 'white', action.params[0]);\n            } else if (action.apply === 'shade') {\n                clr = tinyColor.mix(clr, 'black', action.params[0]);\n            } else if (action.apply === 'xor') {\n                const clr2 = tinyColor(action.params[0]).toRgb();\n                clr = clr.toRgb();\n                clr = tinyColor({\n                    r: clr.r ^ clr2.r,\n                    g: clr.g ^ clr2.g,\n                    b: clr.b ^ clr2.b\n                });\n            } else if (action.apply === 'red') {\n                clr = colorModifier('r', action.params[0]);\n            } else if (action.apply === 'green') {\n                clr = colorModifier('g', action.params[0]);\n            } else if (action.apply === 'blue') {\n                clr = colorModifier('b', action.params[0]);\n            } else {\n                if (action.apply === 'hue') {\n                    action.apply = 'spin';\n                }\n\n                const fn = clr[action.apply];\n\n                if (!fn) {\n                    return throwError.call(\n                        originalScope,\n                        'action ' + action.apply + ' not supported',\n                        cb\n                    );\n                }\n\n                clr = fn.apply(clr, action.params);\n            }\n        });\n\n        clr = clr.toRgb();\n        this.bitmap.data[idx] = clr.r;\n        this.bitmap.data[idx + 1] = clr.g;\n        this.bitmap.data[idx + 2] = clr.b;\n    });\n\n    if (isNodePattern(cb)) {\n        cb.call(this, null, this);\n    }\n\n    return this;\n}\n\nexport const color = colorFn;\nexport const colour = colorFn;\n"],"file":"color.js"}