{"version":3,"sources":["../src/request.js"],"names":["process","browser","env","ENVIRONMENT","versions","electron","type","XMLHttpRequest","module","exports","url","cb","xhr","open","responseType","addEventListener","status","data","Buffer","from","response","err","Error","message","e","send","p","require","compression","res","body"],"mappings":";;AAAA;AAEA,IACIA,OAAO,CAACC,OAAR,IACAD,OAAO,CAACE,GAAR,CAAYC,WAAZ,KAA4B,SAD5B,IAEC,OAAOH,OAAO,CAACI,QAAR,CAAiBC,QAAxB,KAAqC,WAArC,IACGL,OAAO,CAACM,IAAR,KAAiB,UADpB,IAEG,OAAOC,cAAP,KAA0B,UALlC,EAME;AACE;AACA;AAEAC,EAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,EAAd,EAAkB;AAC/B,QAAMC,GAAG,GAAG,IAAIL,cAAJ,EAAZ;AACAK,IAAAA,GAAG,CAACC,IAAJ,CAAS,KAAT,EAAgBH,GAAhB,EAAqB,IAArB;AACAE,IAAAA,GAAG,CAACE,YAAJ,GAAmB,aAAnB;AACAF,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,MAArB,EAA6B,YAAW;AACpC,UAAIH,GAAG,CAACI,MAAJ,GAAa,GAAjB,EAAsB;AAClB,YAAI;AACA,cAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKC,QAAjB,CAAb;AACAT,UAAAA,EAAE,CAAC,IAAD,EAAOC,GAAP,EAAYK,IAAZ,CAAF;AACH,SAHD,CAGE,OAAOI,GAAP,EAAY;AACV,iBAAOV,EAAE,CACL,IAAIW,KAAJ,CACI,sCACIZ,GADJ,GAEI,WAFJ,GAGIW,GAAG,CAACE,OAJZ,CADK,CAAT;AAQH;AACJ,OAdD,MAcO;AACHZ,QAAAA,EAAE,CAAC,IAAIW,KAAJ,CAAU,iBAAiBV,GAAG,CAACI,MAArB,GAA8B,WAA9B,GAA4CN,GAAtD,CAAD,CAAF;AACH;AACJ,KAlBD;AAmBAE,IAAAA,GAAG,CAACG,gBAAJ,CAAqB,OAArB,EAA8B,UAAAS,CAAC,EAAI;AAC/Bb,MAAAA,EAAE,CAACa,CAAD,CAAF;AACH,KAFD;AAGAZ,IAAAA,GAAG,CAACa,IAAJ;AACH,GA3BD;AA4BH,CAtCD,MAsCO;AACHjB,EAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,EAAd,EAAkB;AAC/B,QAAMe,CAAC,GAAGC,OAAO,CAAC,MAAD,CAAjB;;AAEAD,IAAAA,CAAC,CACG;AACIhB,MAAAA,GAAG,EAAHA,GADJ;AAEIkB,MAAAA,WAAW,EAAE;AAFjB,KADH,EAKG,UAACP,GAAD,EAAMQ,GAAN,EAAc;AACV,UAAIR,GAAG,KAAK,IAAZ,EAAkB;AACdV,QAAAA,EAAE,CAAC,IAAD,EAAOkB,GAAP,EAAYA,GAAG,CAACC,IAAhB,CAAF;AACH,OAFD,MAEO;AACHnB,QAAAA,EAAE,CAACU,GAAD,CAAF;AACH;AACJ,KAXJ,CAAD;AAaH,GAhBD;AAiBH","sourcesContent":["/* global XMLHttpRequest */\n\nif (\n    process.browser ||\n    process.env.ENVIRONMENT === 'BROWSER' ||\n    (typeof process.versions.electron !== 'undefined' &&\n        process.type === 'renderer' &&\n        typeof XMLHttpRequest === 'function')\n) {\n    // If we run into a browser or the electron renderer process,\n    // use XHR method instead of Request node module.\n\n    module.exports = function(url, cb) {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.addEventListener('load', function() {\n            if (xhr.status < 400) {\n                try {\n                    const data = Buffer.from(this.response);\n                    cb(null, xhr, data);\n                } catch (err) {\n                    return cb(\n                        new Error(\n                            'Response is not a buffer for url ' +\n                                url +\n                                '. Error: ' +\n                                err.message\n                        )\n                    );\n                }\n            } else {\n                cb(new Error('HTTP Status ' + xhr.status + ' for url ' + url));\n            }\n        });\n        xhr.addEventListener('error', e => {\n            cb(e);\n        });\n        xhr.send();\n    };\n} else {\n    module.exports = function(url, cb) {\n        const p = require('phin');\n\n        p(\n            {\n                url,\n                compression: true\n            },\n            (err, res) => {\n                if (err === null) {\n                    cb(null, res, res.body);\n                } else {\n                    cb(err);\n                }\n            }\n        );\n    };\n}\n"],"file":"request.js"}