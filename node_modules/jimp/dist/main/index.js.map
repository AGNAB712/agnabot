{"version":3,"sources":["../../src/index.js"],"names":["alphabet","maxHashLength","NaN","i","maxHash","anyBase","BIN","slice","Array","join","push","length","process","on","clear","noop","isArrayBuffer","test","Object","prototype","toString","call","toLowerCase","indexOf","bufferFromArrayBuffer","arrayBuffer","buffer","Buffer","alloc","byteLength","view","Uint8Array","loadBufferFromPath","src","cb","FS","readFile","match","err","response","data","isBuffer","msg","statusCode","Error","emptyBitmap","width","height","Jimp","args","PNG_FILTER_AUTO","MIME_PNG","path","write","mime","getBase64","getBuffer","getBufferAsync","getPixelColor","setPixelColor","jimpInstance","finish","evData","methodName","setTimeout","emitError","emitMulti","parseInt","w","h","_background","throwError","bitmap","writeUInt32BE","original","scanQuiet","x","y","idx","readUInt32BE","_quality","_deflateLevel","_deflateStrategy","_filterType","_rgba","_originalMime","parseBitmap","extraConstructor","__extraConstructors","find","c","Promise","resolve","reject","run","then","catch","eventName","assign","emit","getMIME","MIME","getExtension","createWriteStream","getType","pathObj","Path","parse","dir","MkDirP","sync","stream","end","l","Math","round","s","f","bool","n","AUTO","base","hash","ImagePHash","getHash","edgeHandling","xi","yi","EDGE_EXTEND","EDGE_WRAP","getPixelIndex","hex","EventEmitter","entries","constants","forEach","name","value","color","shape","text","effects","appendConstructorOption","read","image","create","rgbaToInt","r","g","b","a","pow","intToRGBA","rgba","floor","limit255","max","min","diff","img1","img2","threshold","bmp1","bmp2","cloneQuiet","resize","numDiffPixels","percent","distance","phash","hash1","hash2","colorDiff","rgba1","rgba2","maxVal","loadPages","pages","newPages","map","page","all","loadFont","file","font","chars","kernings","String","fromCharCode","id","firstString","first","second","amount","dirname","common","info","jimpEvMethod","evName","method","evNameBefore","evNameAfter","replace","wrappedCb","apply","result","clone","jimpEvChange","_y","_x","offset","from","env","ENVIRONMENT","gl","window","self"],"mappings":"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","sourcesContent":["import FS from 'fs';\nimport Path from 'path';\nimport EventEmitter from 'events';\n\nimport anyBase from 'any-base';\nimport bMFont from 'load-bmfont';\nimport MkDirP from 'mkdirp';\nimport pixelMatch from 'pixelmatch';\n\nimport ImagePHash from './modules/phash';\nimport request from './request';\n\nimport * as text from './image-manipulation/text';\nimport * as shape from './image-manipulation/shape';\nimport * as color from './image-manipulation/color';\nimport * as effects from './image-manipulation/effects';\n\nimport promisify from './utils/promisify';\nimport * as MIME from './utils/mime';\nimport { clear } from './utils/log';\nimport { parseBitmap, getBuffer, getBufferAsync } from './utils/image-bitmap';\nimport { isNodePattern, throwError } from './utils/error-checking';\nimport * as constants from './constants';\n\nconst alphabet =\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_';\n\n// an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nconst maxHashLength = [NaN, NaN];\n\nfor (let i = 2; i < 65; i++) {\n    const maxHash = anyBase(anyBase.BIN, alphabet.slice(0, i))(\n        new Array(64 + 1).join('1')\n    );\n    maxHashLength.push(maxHash.length);\n}\n\nprocess.on('exit', clear);\n\n// no operation\nfunction noop() {}\n\n// error checking methods\n\nfunction isArrayBuffer(test) {\n    return (\n        Object.prototype.toString\n            .call(test)\n            .toLowerCase()\n            .indexOf('arraybuffer') > -1\n    );\n}\n\n// Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n    const buffer = Buffer.alloc(arrayBuffer.byteLength);\n    const view = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n    }\n\n    return buffer;\n}\n\nfunction loadBufferFromPath(src, cb) {\n    if (\n        FS &&\n        typeof FS.readFile === 'function' &&\n        !src.match(/^(http|ftp)s?:\\/\\/./)\n    ) {\n        FS.readFile(src, cb);\n    } else {\n        request(src, (err, response, data) => {\n            if (err) {\n                return cb(err);\n            }\n\n            if (typeof data === 'object' && Buffer.isBuffer(data)) {\n                return cb(null, data);\n            }\n\n            const msg =\n                'Could not load Buffer from <' +\n                src +\n                '> ' +\n                '(HTTP: ' +\n                response.statusCode +\n                ')';\n\n            return new Error(msg);\n        });\n    }\n}\n\nconst emptyBitmap = {\n    data: null,\n    width: null,\n    height: null\n};\n\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nclass Jimp extends EventEmitter {\n    // An object representing a bitmap in memory, comprising:\n    //  - data: a buffer of the bitmap data\n    //  - width: the width of the image in pixels\n    //  - height: the height of the image in pixels\n    bitmap = emptyBitmap;\n\n    // The quality to be used when saving JPEG images\n    _quality = 100;\n\n    _deflateLevel = 9;\n\n    _deflateStrategy = 3;\n\n    _filterType = Jimp.PNG_FILTER_AUTO;\n\n    // Whether PNGs will be exported as RGB or RGBA\n    _rgba = true;\n\n    // Default colour to use for new pixels\n    _background = 0x00000000;\n\n    // Default MIME is PNG\n    _originalMime = Jimp.MIME_PNG;\n\n    // Exif data for the image\n    _exif = null;\n\n    constructor(...args) {\n        super();\n\n        const jimpInstance = this;\n        let cb = noop;\n\n        if (isArrayBuffer(args[0])) {\n            args[0] = bufferFromArrayBuffer(args[0]);\n        }\n\n        function finish(...args) {\n            const [err] = args;\n            const evData = err || {};\n            evData.methodName = 'constructor';\n\n            setTimeout(() => {\n                // run on next tick.\n                if (err) {\n                    jimpInstance.emitError('constructor', err);\n                } else {\n                    jimpInstance.emitMulti('constructor', 'initialized');\n                }\n\n                cb.call(jimpInstance, ...args);\n            }, 1);\n        }\n\n        if (\n            (typeof args[0] === 'number' && typeof args[1] === 'number') ||\n            (parseInt(args[0], 10) && parseInt(args[1], 10))\n        ) {\n            // create a new image\n            const w = parseInt(args[0], 10);\n            const h = parseInt(args[1], 10);\n            cb = args[2];\n\n            if (typeof args[2] === 'number') {\n                this._background = args[2];\n                cb = args[3];\n            }\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            this.bitmap = {\n                data: Buffer.alloc(w * h * 4),\n                width: w,\n                height: h\n            };\n\n            for (let i = 0; i < this.bitmap.data.length; i += 4) {\n                this.bitmap.data.writeUInt32BE(this._background, i);\n            }\n\n            finish(null, this);\n        } else if (args[0] instanceof Jimp) {\n            // clone an existing Jimp\n            const original = args[0];\n            cb = args[1];\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            const bitmap = Buffer.alloc(original.bitmap.data.length);\n            original.scanQuiet(\n                0,\n                0,\n                original.bitmap.width,\n                original.bitmap.height,\n                (x, y, idx) => {\n                    const data = original.bitmap.data.readUInt32BE(idx);\n                    bitmap.writeUInt32BE(data, idx);\n                }\n            );\n\n            this.bitmap = {\n                data: bitmap,\n                width: original.bitmap.width,\n                height: original.bitmap.height\n            };\n\n            this._quality = original._quality;\n            this._deflateLevel = original._deflateLevel;\n            this._deflateStrategy = original._deflateStrategy;\n            this._filterType = original._filterType;\n            this._rgba = original._rgba;\n            this._background = original._background;\n            this._originalMime = original._originalMime;\n\n            finish(null, this);\n        } else if (typeof args[0] === 'string') {\n            // read from a path\n            const path = args[0];\n            cb = args[1];\n\n            if (typeof cb === 'undefined') {\n                cb = noop;\n            }\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            loadBufferFromPath(path, (err, data) => {\n                if (err) {\n                    return throwError.call(this, err, finish);\n                }\n\n                parseBitmap.call(this, data, path, finish);\n            });\n        } else if (typeof args[0] === 'object' && Buffer.isBuffer(args[0])) {\n            // read from a buffer\n            const data = args[0];\n            cb = args[1];\n\n            if (typeof cb !== 'function') {\n                return throwError.call(this, 'cb must be a function', finish);\n            }\n\n            parseBitmap.call(this, data, null, finish);\n        } else {\n            // Allow client libs to add new ways to build a Jimp object.\n            // Extra constructors must be added by `Jimp.appendConstructorOption()`\n            cb = args[args.length - 1];\n\n            if (typeof cb !== 'function') {\n                // TODO: try to solve the args after cb problem.\n                cb = args[args.length - 2];\n\n                if (typeof cb !== 'function') {\n                    cb = noop;\n                }\n            }\n\n            const extraConstructor = Jimp.__extraConstructors.find(c =>\n                c.test(...args)\n            );\n\n            if (extraConstructor) {\n                new Promise((resolve, reject) =>\n                    extraConstructor.run.call(this, resolve, reject, ...args)\n                )\n                    .then(() => finish(null, this))\n                    .catch(finish);\n            } else {\n                return throwError.call(\n                    this,\n                    'No matching constructor overloading was found. ' +\n                        'Please see the docs for how to call the Jimp constructor.',\n                    finish\n                );\n            }\n        }\n    }\n\n    /**\n     * Emit for multiple listeners\n     * @param {string} methodName name of the method to emit an error for\n     * @param {string} eventName name of the eventName to emit an error for\n     * @param {object} data to emit\n     */\n    emitMulti(methodName, eventName, data = {}) {\n        data = Object.assign(data, { methodName, eventName });\n        this.emit('any', data);\n\n        if (methodName) {\n            this.emit(methodName, data);\n        }\n\n        this.emit(eventName, data);\n    }\n\n    emitError(methodName, err) {\n        this.emitMulti(methodName, 'error', err);\n    }\n\n    /**\n     * Get the current height of the image\n     * @param {number} height of the image\n     */\n    getHeight() {\n        return this.bitmap.height;\n    }\n\n    /**\n     * Get the current width of the image\n     * @param {number} width of the image\n     */\n    getWidth() {\n        return this.bitmap.width;\n    }\n\n    /**\n     * Nicely format Jimp object when sent to the console e.g. console.log(image)\n     * @returns {string} pretty printed\n     */\n    inspect() {\n        return (\n            '<Jimp ' +\n            (this.bitmap === emptyBitmap\n                ? 'pending...'\n                : this.bitmap.width + 'x' + this.bitmap.height) +\n            '>'\n        );\n    }\n\n    /**\n     * Nicely format Jimp object when converted to a string\n     * @returns {string} pretty printed\n     */\n    toString() {\n        return '[object Jimp]';\n    }\n\n    /**\n     * Returns the original MIME of the image (default: \"image/png\")\n     * @returns {string} the MIME\n     */\n    getMIME() {\n        const mime = this._originalMime || Jimp.MIME_PNG;\n\n        return mime;\n    }\n\n    /**\n     * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n     * @returns {string} the file extension\n     */\n    getExtension() {\n        const mime = this.getMIME();\n\n        return MIME.getExtension(mime);\n    }\n\n    /**\n     * Writes the image to a file\n     * @param {string} path a path to the destination file (either PNG or JPEG)\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n     * @returns {Jimp} this for chaining of methods\n     */\n    write(path, cb) {\n        if (!FS || !FS.createWriteStream) {\n            throw new Error(\n                'Cant access the filesystem. You can use the getBase64 method.'\n            );\n        }\n\n        if (typeof path !== 'string') {\n            return throwError.call(this, 'path must be a string', cb);\n        }\n\n        if (typeof cb === 'undefined') {\n            cb = noop;\n        }\n\n        if (typeof cb !== 'function') {\n            return throwError.call(this, 'cb must be a function', cb);\n        }\n\n        const mime = MIME.getType(path);\n        const pathObj = Path.parse(path);\n\n        if (pathObj.dir) {\n            MkDirP.sync(pathObj.dir);\n        }\n\n        this.getBuffer(mime, (err, buffer) => {\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            const stream = FS.createWriteStream(path);\n\n            stream\n                .on('open', () => {\n                    stream.write(buffer);\n                    stream.end();\n                })\n                .on('error', err => {\n                    return throwError.call(this, err, cb);\n                });\n            stream.on('finish', () => {\n                return cb.call(this, null, this);\n            });\n        });\n\n        return this;\n    }\n\n    writeAsync = path => promisify(this.write, this, path);\n\n    /**\n     * Sets the deflate level used when saving as PNG format (default is 9)\n     * @param {number} l Deflate level to use 0-9. 0 is no compression. 9 (default) is maximum compression.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateLevel(l, cb) {\n        if (typeof l !== 'number') {\n            return throwError.call(this, 'l must be a number', cb);\n        }\n\n        if (l < 0 || l > 9) {\n            return throwError.call(this, 'l must be a number 0 - 9', cb);\n        }\n\n        this._deflateLevel = Math.round(l);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the deflate strategy used when saving as PNG format (default is 3)\n     * @param {number} s Deflate strategy to use 0-3.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    deflateStrategy(s, cb) {\n        if (typeof s !== 'number') {\n            return throwError.call(this, 's must be a number', cb);\n        }\n\n        if (s < 0 || s > 3) {\n            return throwError.call(this, 's must be a number 0 - 3', cb);\n        }\n\n        this._deflateStrategy = Math.round(s);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the filter type used when saving as PNG format (default is automatic filters)\n     * @param {number} f The quality to use -1-4.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    filterType(f, cb) {\n        if (typeof f !== 'number') {\n            return throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (f < -1 || f > 4) {\n            return throwError.call(\n                this,\n                'n must be -1 (auto) or a number 0 - 4',\n                cb\n            );\n        }\n\n        this._filterType = Math.round(f);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n     * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    rgba(bool, cb) {\n        if (typeof bool !== 'boolean') {\n            return throwError.call(\n                this,\n                'bool must be a boolean, true for RGBA or false for RGB',\n                cb\n            );\n        }\n\n        this._rgba = bool;\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the quality of the image when saving as JPEG format (default is 100)\n     * @param {number} n The quality to use 0-100\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp} this for chaining of methods\n     */\n    quality(n, cb) {\n        if (typeof n !== 'number') {\n            return throwError.call(this, 'n must be a number', cb);\n        }\n\n        if (n < 0 || n > 100) {\n            return throwError.call(this, 'n must be a number 0 - 100', cb);\n        }\n\n        this._quality = Math.round(n);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Converts the image to a base 64 string\n     * @param {string} mime the mime type of the image data to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    getBase64(mime, cb) {\n        if (mime === Jimp.AUTO) {\n            // allow auto MIME detection\n            mime = this.getMIME();\n        }\n\n        if (typeof mime !== 'string') {\n            return throwError.call(this, 'mime must be a string', cb);\n        }\n\n        if (typeof cb !== 'function') {\n            return throwError.call(this, 'cb must be a function', cb);\n        }\n\n        this.getBuffer(mime, function(err, data) {\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            const src = 'data:' + mime + ';base64,' + data.toString('base64');\n            return cb.call(this, null, src);\n        });\n\n        return this;\n    }\n\n    getBase64Async = mime => promisify(this.getBase64, this, mime);\n\n    /**\n     * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>.\n     * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {string} a string representing the hash\n     */\n    hash(base, cb) {\n        base = base || 64;\n\n        if (typeof base === 'function') {\n            cb = base;\n            base = 64;\n        }\n\n        if (typeof base !== 'number') {\n            return throwError.call(this, 'base must be a number', cb);\n        }\n\n        if (base < 2 || base > 64) {\n            return throwError.call(\n                this,\n                'base must be a number between 2 and 64',\n                cb\n            );\n        }\n\n        let hash = new ImagePHash().getHash(this);\n        hash = anyBase(anyBase.BIN, alphabet.slice(0, base))(hash);\n\n        while (hash.length < maxHashLength[base]) {\n            hash = '0' + hash; // pad out with leading zeros\n        }\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, hash);\n        }\n\n        return hash;\n    }\n\n    /**\n     * Converts the image to a buffer\n     * @param {string} mime the mime type of the image buffer to be created\n     * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n     * @returns {Jimp} this for chaining of methods\n     */\n    getBuffer = getBuffer;\n\n    getBufferAsync = getBufferAsync;\n\n    /**\n     * Returns the offset of a pixel in the bitmap buffer\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {number} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    getPixelIndex(x, y, edgeHandling, cb) {\n        let xi;\n        let yi;\n\n        if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n            cb = edgeHandling;\n            edgeHandling = null;\n        }\n\n        if (!edgeHandling) {\n            edgeHandling = Jimp.EDGE_EXTEND;\n        }\n\n        if (typeof x !== 'number' || typeof y !== 'number') {\n            return throwError.call(this, 'x and y must be numbers', cb);\n        }\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n        xi = x;\n        yi = y;\n\n        if (edgeHandling === Jimp.EDGE_EXTEND) {\n            if (x < 0) xi = 0;\n            if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n            if (y < 0) yi = 0;\n            if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n        }\n\n        if (edgeHandling === Jimp.EDGE_WRAP) {\n            if (x < 0) {\n                xi = this.bitmap.width + x;\n            }\n\n            if (x >= this.bitmap.width) {\n                xi = x % this.bitmap.width;\n            }\n\n            if (y < 0) {\n                xi = this.bitmap.height + y;\n            }\n\n            if (y >= this.bitmap.height) {\n                yi = y % this.bitmap.height;\n            }\n        }\n\n        let i = (this.bitmap.width * yi + xi) << 2;\n\n        // if out of bounds index is -1\n        if (xi < 0 || xi >= this.bitmap.width) {\n            i = -1;\n        }\n\n        if (yi < 0 || yi >= this.bitmap.height) {\n            i = -1;\n        }\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, i);\n        }\n\n        return i;\n    }\n\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the color of the pixel\n     */\n    getPixelColor(x, y, cb) {\n        if (typeof x !== 'number' || typeof y !== 'number')\n            return throwError.call(this, 'x and y must be numbers', cb);\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const idx = this.getPixelIndex(x, y);\n        const hex = this.bitmap.data.readUInt32BE(idx);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, hex);\n        }\n\n        return hex;\n    }\n\n    getPixelColour = this.getPixelColor;\n\n    /**\n     * Returns the hex colour value of a pixel\n     * @param {number} hex color to set\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {number} the index of the pixel or -1 if not found\n     */\n    setPixelColor(hex, x, y, cb) {\n        if (\n            typeof hex !== 'number' ||\n            typeof x !== 'number' ||\n            typeof y !== 'number'\n        )\n            return throwError.call(this, 'hex, x and y must be numbers', cb);\n\n        // round input\n        x = Math.round(x);\n        y = Math.round(y);\n\n        const idx = this.getPixelIndex(x, y);\n        this.bitmap.data.writeUInt32BE(hex, idx);\n\n        if (isNodePattern(cb)) {\n            return cb.call(this, null, this);\n        }\n\n        return this;\n    }\n\n    setPixelColour = this.setPixelColor;\n}\n\nObject.entries(constants).forEach(([name, value]) => {\n    Jimp[name] = value;\n});\n\nObject.entries({ ...color, ...shape, ...text, ...effects }).forEach(\n    ([name, value]) => {\n        Jimp.prototype[name] = value;\n    }\n);\n\nJimp.__extraConstructors = [];\n\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\nJimp.appendConstructorOption = function(name, test, run) {\n    Jimp.__extraConstructors.push({ name, test, run });\n};\n\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\nJimp.read = function(...args) {\n    return new Promise((resolve, reject) => {\n        new Jimp(...args, (err, image) => {\n            if (err) reject(err);\n            else resolve(image);\n        });\n    });\n};\n\nJimp.create = Jimp.read;\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\nJimp.rgbaToInt = function(r, g, b, a, cb) {\n    if (\n        typeof r !== 'number' ||\n        typeof g !== 'number' ||\n        typeof b !== 'number' ||\n        typeof a !== 'number'\n    ) {\n        return throwError.call(this, 'r, g, b and a must be numbers', cb);\n    }\n\n    if (r < 0 || r > 255) {\n        return throwError.call(this, 'r must be between 0 and 255', cb);\n    }\n\n    if (g < 0 || g > 255) {\n        throwError.call(this, 'g must be between 0 and 255', cb);\n    }\n\n    if (b < 0 || b > 255) {\n        return throwError.call(this, 'b must be between 0 and 255', cb);\n    }\n\n    if (a < 0 || a > 255) {\n        return throwError.call(this, 'a must be between 0 and 255', cb);\n    }\n\n    r = Math.round(r);\n    b = Math.round(b);\n    g = Math.round(g);\n    a = Math.round(a);\n\n    const i =\n        r * Math.pow(256, 3) +\n        g * Math.pow(256, 2) +\n        b * Math.pow(256, 1) +\n        a * Math.pow(256, 0);\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, i);\n    }\n\n    return i;\n};\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\nJimp.intToRGBA = function(i, cb) {\n    if (typeof i !== 'number') {\n        return throwError.call(this, 'i must be a number', cb);\n    }\n\n    const rgba = {};\n\n    rgba.r = Math.floor(i / Math.pow(256, 3));\n    rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n    rgba.b = Math.floor(\n        (i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) /\n            Math.pow(256, 1)\n    );\n    rgba.a = Math.floor(\n        (i -\n            rgba.r * Math.pow(256, 3) -\n            rgba.g * Math.pow(256, 2) -\n            rgba.b * Math.pow(256, 1)) /\n            Math.pow(256, 0)\n    );\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, rgba);\n    }\n\n    return rgba;\n};\n\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\nJimp.limit255 = function(n) {\n    n = Math.max(n, 0);\n    n = Math.min(n, 255);\n\n    return n;\n};\n\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\nJimp.diff = function(img1, img2, threshold = 0.1) {\n    if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp))\n        return throwError.call(this, 'img1 and img2 must be an Jimp images');\n\n    const bmp1 = img1.bitmap;\n    const bmp2 = img2.bitmap;\n\n    if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n        if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n            // img1 is bigger\n            img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n        } else {\n            // img2 is bigger (or they are the same in area)\n            img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n        }\n    }\n\n    if (typeof threshold !== 'number' || threshold < 0 || threshold > 1) {\n        return throwError.call(\n            this,\n            'threshold must be a number between 0 and 1'\n        );\n    }\n\n    const diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n\n    const numDiffPixels = pixelMatch(\n        bmp1.data,\n        bmp2.data,\n        diff.bitmap.data,\n        diff.bitmap.width,\n        diff.bitmap.height,\n        { threshold }\n    );\n\n    return {\n        percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n        image: diff\n    };\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.distance = function(img1, img2) {\n    const phash = new ImagePHash();\n    const hash1 = phash.getHash(img1);\n    const hash2 = phash.getHash(img2);\n\n    return phash.distance(hash1, hash2);\n};\n\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\nJimp.colorDiff = function(rgba1, rgba2) {\n    const pow = n => Math.pow(n, 2);\n    const { max } = Math;\n    const maxVal = 255 * 255 * 3;\n\n    if (rgba1.a !== 0 && !rgba1.a) {\n        rgba1.a = 255;\n    }\n\n    if (rgba2.a !== 0 && !rgba2.a) {\n        rgba2.a = 255;\n    }\n\n    return (\n        (max(\n            pow(rgba1.r - rgba2.r),\n            pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)\n        ) +\n            max(\n                pow(rgba1.g - rgba2.g),\n                pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)\n            ) +\n            max(\n                pow(rgba1.b - rgba2.b),\n                pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a)\n            )) /\n        maxVal\n    );\n};\n\nfunction loadPages(dir, pages) {\n    const newPages = pages.map(page => {\n        return Jimp.read(dir + '/' + page);\n    });\n\n    return Promise.all(newPages);\n}\n\n/**\n * Loads a bitmap font from a file\n * @param {string} file the file path of a .fnt file\n * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n * @returns {Promise} a promise\n */\nJimp.loadFont = function(file, cb) {\n    if (typeof file !== 'string')\n        return throwError.call(this, 'file must be a string', cb);\n\n    return new Promise((resolve, reject) => {\n        cb =\n            cb ||\n            function(err, font) {\n                if (err) reject(err);\n                else resolve(font);\n            };\n\n        bMFont(file, (err, font) => {\n            const chars = {};\n            const kernings = {};\n\n            if (err) {\n                return throwError.call(this, err, cb);\n            }\n\n            for (let i = 0; i < font.chars.length; i++) {\n                chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n            }\n\n            for (let i = 0; i < font.kernings.length; i++) {\n                const firstString = String.fromCharCode(font.kernings[i].first);\n                kernings[firstString] = kernings[firstString] || {};\n                kernings[firstString][\n                    String.fromCharCode(font.kernings[i].second)\n                ] =\n                    font.kernings[i].amount;\n            }\n\n            loadPages(Path.dirname(file), font.pages).then(pages => {\n                cb(null, {\n                    chars,\n                    kernings,\n                    pages,\n                    common: font.common,\n                    info: font.info\n                });\n            });\n        });\n    });\n};\n\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\nfunction jimpEvMethod(methodName, evName, method) {\n    const evNameBefore = 'before-' + evName;\n    const evNameAfter = evName.replace(/e$/, '') + 'ed';\n\n    Jimp.prototype[methodName] = function(...args) {\n        let wrappedCb;\n        const cb = args[method.length - 1];\n        const jimpInstance = this;\n\n        if (typeof cb === 'function') {\n            wrappedCb = function(...args) {\n                const [err, data] = args;\n\n                if (err) {\n                    jimpInstance.emitError(methodName, err);\n                } else {\n                    jimpInstance.emitMulti(methodName, evNameAfter, {\n                        [methodName]: data\n                    });\n                }\n\n                cb.apply(this, args);\n            };\n            args[args.length - 1] = wrappedCb;\n        } else {\n            wrappedCb = false;\n        }\n\n        this.emitMulti(methodName, evNameBefore);\n\n        let result;\n\n        try {\n            result = method.apply(this, args);\n\n            if (!wrappedCb) {\n                this.emitMulti(methodName, evNameAfter, {\n                    [methodName]: result\n                });\n            }\n        } catch (err) {\n            err.methodName = methodName;\n            this.emitError(methodName, err);\n        }\n\n        return result;\n    };\n\n    Jimp.prototype[methodName + 'Quiet'] = method;\n}\n\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\njimpEvMethod('clone', 'clone', function(cb) {\n    const clone = new Jimp(this);\n\n    if (isNodePattern(cb)) {\n        return cb.call(clone, null, clone);\n    }\n\n    return clone;\n});\n\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\nfunction jimpEvChange(methodName, method) {\n    jimpEvMethod(methodName, 'change', method);\n}\n\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('background', function(hex, cb) {\n    if (typeof hex !== 'number') {\n        return throwError.call(\n            this,\n            'hex must be a hexadecimal rgba value',\n            cb\n        );\n    }\n\n    this._background = hex;\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n});\n\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('scan', function(x, y, w, h, f, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n        return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    if (typeof w !== 'number' || typeof h !== 'number') {\n        return throwError.call(this, 'w and h must be numbers', cb);\n    }\n\n    if (typeof f !== 'function') {\n        return throwError.call(this, 'f must be a function', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    for (let _y = y; _y < y + h; _y++) {\n        for (let _x = x; _x < x + w; _x++) {\n            const idx = (this.bitmap.width * _y + _x) << 2;\n            f.call(this, _x, _y, idx);\n        }\n    }\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n});\n\n/**\n * Crops the image at a given point to a give size\n * @param {number} x the x coordinate to crop form\n * @param {number} y the y coordinate to crop form\n * @param w the width of the crop region\n * @param h the height of the crop region\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('crop', function(x, y, w, h, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number')\n        return throwError.call(this, 'x and y must be numbers', cb);\n    if (typeof w !== 'number' || typeof h !== 'number')\n        return throwError.call(this, 'w and h must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    const bitmap = Buffer.alloc(this.bitmap.data.length);\n    let offset = 0;\n\n    this.scanQuiet(x, y, w, h, function(x, y, idx) {\n        const data = this.bitmap.data.readUInt32BE(idx);\n        bitmap.writeUInt32BE(data, offset);\n        offset += 4;\n    });\n\n    this.bitmap.data = Buffer.from(bitmap);\n    this.bitmap.width = w;\n    this.bitmap.height = h;\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n});\n\nif (process.env.ENVIRONMENT === 'BROWSER') {\n    // For use in a web browser or web worker\n    /* global self */\n    let gl;\n\n    if (typeof window !== 'undefined' && typeof window === 'object') {\n        gl = window;\n    }\n\n    if (typeof self !== 'undefined' && typeof self === 'object') {\n        gl = self;\n    }\n\n    gl.Jimp = Jimp;\n    gl.Buffer = Buffer;\n}\n\nexport default Jimp;\n"],"file":"index.js"}