{"version":3,"sources":["../../../src/modules/resize.js"],"names":["Resize","widthOriginal","heightOriginal","targetWidth","targetHeight","blendAlpha","interpolationPass","resizeCallback","Math","abs","floor","colorChannels","Boolean","targetWidthMultipliedByChannels","originalWidthMultipliedByChannels","originalHeightMultipliedByChannels","widthPassResultSize","finalResultSize","initialize","prototype","configurePasses","Error","resizeWidth","bypassResizer","ratioWeightWidthPass","initializeFirstPassBuffers","resizeWidthInterpolatedRGBA","resizeWidthInterpolatedRGB","resizeWidthRGBA","resizeWidthRGB","resizeHeight","ratioWeightHeightPass","initializeSecondPassBuffers","resizeHeightInterpolated","resizeHeightRGBA","resizeHeightRGB","_resizeWidthInterpolatedRGBChannels","buffer","fourthChannel","channelsNum","ratioWeight","outputBuffer","widthBuffer","weight","finalOffset","pixelOffset","firstWeight","secondWeight","targetPosition","interpolationWidthSourceReadStop","_resizeWidthRGBChannels","ratioWeightDivisor","nextLineOffsetOriginalWidth","nextLineOffsetTargetWidth","output","outputWidthWorkBench","trustworthyColorsCount","outputWidthWorkBenchOpaquePixelsCount","amountToNext","actualPosition","currentPosition","line","outputOffset","multiplier","r","g","b","a","min","_resizeHeightRGBChannels","outputHeightWorkBench","heightBuffer","outputHeightWorkBenchOpaquePixelsCount","caret","round","pixelOffsetAccumulated","pixelOffsetAccumulated2","interpolationHeightSourceReadStop","resize","BILINEARAlgo","generateFloatBuffer","generateFloat64Buffer","generateUint8Buffer","bufferLength","Float32Array","error","Float64Array","Uint8Array","module","exports"],"mappings":"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","sourcesContent":["// JavaScript Image Resizer (c) 2012 - Grant Galitz\n// Released to public domain 29 July 2013: https://github.com/grantgalitz/JS-Image-Resizer/issues/4\n\nfunction Resize(\n    widthOriginal,\n    heightOriginal,\n    targetWidth,\n    targetHeight,\n    blendAlpha,\n    interpolationPass,\n    resizeCallback\n) {\n    this.widthOriginal = Math.abs(Math.floor(widthOriginal) || 0);\n    this.heightOriginal = Math.abs(Math.floor(heightOriginal) || 0);\n    this.targetWidth = Math.abs(Math.floor(targetWidth) || 0);\n    this.targetHeight = Math.abs(Math.floor(targetHeight) || 0);\n    this.colorChannels = blendAlpha ? 4 : 3;\n    this.interpolationPass = Boolean(interpolationPass);\n    this.resizeCallback =\n        typeof resizeCallback === 'function' ? resizeCallback : function() {};\n    this.targetWidthMultipliedByChannels =\n        this.targetWidth * this.colorChannels;\n    this.originalWidthMultipliedByChannels =\n        this.widthOriginal * this.colorChannels;\n    this.originalHeightMultipliedByChannels =\n        this.heightOriginal * this.colorChannels;\n    this.widthPassResultSize =\n        this.targetWidthMultipliedByChannels * this.heightOriginal;\n    this.finalResultSize =\n        this.targetWidthMultipliedByChannels * this.targetHeight;\n    this.initialize();\n}\n\nResize.prototype.initialize = function() {\n    // Perform some checks:\n    if (\n        this.widthOriginal > 0 &&\n        this.heightOriginal > 0 &&\n        this.targetWidth > 0 &&\n        this.targetHeight > 0\n    ) {\n        this.configurePasses();\n    } else {\n        throw new Error('Invalid settings specified for the resizer.');\n    }\n};\n\nResize.prototype.configurePasses = function() {\n    if (this.widthOriginal === this.targetWidth) {\n        // Bypass the width resizer pass:\n        this.resizeWidth = this.bypassResizer;\n    } else {\n        // Setup the width resizer pass:\n        this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;\n        if (this.ratioWeightWidthPass < 1 && this.interpolationPass) {\n            this.initializeFirstPassBuffers(true);\n            this.resizeWidth =\n                this.colorChannels === 4\n                    ? this.resizeWidthInterpolatedRGBA\n                    : this.resizeWidthInterpolatedRGB;\n        } else {\n            this.initializeFirstPassBuffers(false);\n            this.resizeWidth =\n                this.colorChannels === 4\n                    ? this.resizeWidthRGBA\n                    : this.resizeWidthRGB;\n        }\n    }\n    if (this.heightOriginal === this.targetHeight) {\n        // Bypass the height resizer pass:\n        this.resizeHeight = this.bypassResizer;\n    } else {\n        // Setup the height resizer pass:\n        this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;\n        if (this.ratioWeightHeightPass < 1 && this.interpolationPass) {\n            this.initializeSecondPassBuffers(true);\n            this.resizeHeight = this.resizeHeightInterpolated;\n        } else {\n            this.initializeSecondPassBuffers(false);\n            this.resizeHeight =\n                this.colorChannels === 4\n                    ? this.resizeHeightRGBA\n                    : this.resizeHeightRGB;\n        }\n    }\n};\n\nResize.prototype._resizeWidthInterpolatedRGBChannels = function(\n    buffer,\n    fourthChannel\n) {\n    const channelsNum = fourthChannel ? 4 : 3;\n    const ratioWeight = this.ratioWeightWidthPass;\n    const outputBuffer = this.widthBuffer;\n\n    let weight = 0;\n    let finalOffset = 0;\n    let pixelOffset = 0;\n    let firstWeight = 0;\n    let secondWeight = 0;\n    let targetPosition;\n\n    // Handle for only one interpolation input being valid for start calculation:\n    for (\n        targetPosition = 0;\n        weight < 1 / 3;\n        targetPosition += channelsNum, weight += ratioWeight\n    ) {\n        for (\n            finalOffset = targetPosition, pixelOffset = 0;\n            finalOffset < this.widthPassResultSize;\n            pixelOffset += this.originalWidthMultipliedByChannels,\n                finalOffset += this.targetWidthMultipliedByChannels\n        ) {\n            outputBuffer[finalOffset] = buffer[pixelOffset];\n            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n            if (fourthChannel)\n                outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n        }\n    }\n    // Adjust for overshoot of the last pass's counter:\n    weight -= 1 / 3;\n    let interpolationWidthSourceReadStop;\n\n    for (\n        interpolationWidthSourceReadStop = this.widthOriginal - 1;\n        weight < interpolationWidthSourceReadStop;\n        targetPosition += channelsNum, weight += ratioWeight\n    ) {\n        // Calculate weightings:\n        secondWeight = weight % 1;\n        firstWeight = 1 - secondWeight;\n        // Interpolate:\n        for (\n            finalOffset = targetPosition,\n                pixelOffset = Math.floor(weight) * channelsNum;\n            finalOffset < this.widthPassResultSize;\n            pixelOffset += this.originalWidthMultipliedByChannels,\n                finalOffset += this.targetWidthMultipliedByChannels\n        ) {\n            outputBuffer[finalOffset + 0] =\n                buffer[pixelOffset + 0] * firstWeight +\n                buffer[pixelOffset + channelsNum + 0] * secondWeight;\n            outputBuffer[finalOffset + 1] =\n                buffer[pixelOffset + 1] * firstWeight +\n                buffer[pixelOffset + channelsNum + 1] * secondWeight;\n            outputBuffer[finalOffset + 2] =\n                buffer[pixelOffset + 2] * firstWeight +\n                buffer[pixelOffset + channelsNum + 2] * secondWeight;\n            if (fourthChannel)\n                outputBuffer[finalOffset + 3] =\n                    buffer[pixelOffset + 3] * firstWeight +\n                    buffer[pixelOffset + channelsNum + 3] * secondWeight;\n        }\n    }\n\n    // Handle for only one interpolation input being valid for end calculation:\n    for (\n        interpolationWidthSourceReadStop =\n            this.originalWidthMultipliedByChannels - channelsNum;\n        targetPosition < this.targetWidthMultipliedByChannels;\n        targetPosition += channelsNum\n    ) {\n        for (\n            finalOffset = targetPosition,\n                pixelOffset = interpolationWidthSourceReadStop;\n            finalOffset < this.widthPassResultSize;\n            pixelOffset += this.originalWidthMultipliedByChannels,\n                finalOffset += this.targetWidthMultipliedByChannels\n        ) {\n            outputBuffer[finalOffset] = buffer[pixelOffset];\n            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];\n            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];\n            if (fourthChannel)\n                outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];\n        }\n    }\n\n    return outputBuffer;\n};\n\nResize.prototype._resizeWidthRGBChannels = function(buffer, fourthChannel) {\n    const channelsNum = fourthChannel ? 4 : 3;\n    const ratioWeight = this.ratioWeightWidthPass;\n    const ratioWeightDivisor = 1 / ratioWeight;\n    const nextLineOffsetOriginalWidth =\n        this.originalWidthMultipliedByChannels - channelsNum + 1;\n    const nextLineOffsetTargetWidth =\n        this.targetWidthMultipliedByChannels - channelsNum + 1;\n    const output = this.outputWidthWorkBench;\n    const outputBuffer = this.widthBuffer;\n    const trustworthyColorsCount = this.outputWidthWorkBenchOpaquePixelsCount;\n\n    let weight = 0;\n    let amountToNext = 0;\n    let actualPosition = 0;\n    let currentPosition = 0;\n    let line = 0;\n    let pixelOffset = 0;\n    let outputOffset = 0;\n    let multiplier = 1;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n\n    do {\n        for (line = 0; line < this.originalHeightMultipliedByChannels; ) {\n            output[line++] = 0;\n            output[line++] = 0;\n            output[line++] = 0;\n            if (fourthChannel) {\n                output[line++] = 0;\n                trustworthyColorsCount[line / channelsNum - 1] = 0;\n            }\n        }\n\n        weight = ratioWeight;\n\n        do {\n            amountToNext = 1 + actualPosition - currentPosition;\n            multiplier = Math.min(weight, amountToNext);\n            for (\n                line = 0, pixelOffset = actualPosition;\n                line < this.originalHeightMultipliedByChannels;\n                pixelOffset += nextLineOffsetOriginalWidth\n            ) {\n                r = buffer[pixelOffset];\n                g = buffer[++pixelOffset];\n                b = buffer[++pixelOffset];\n                a = fourthChannel ? buffer[++pixelOffset] : 255;\n                // Ignore RGB values if pixel is completely transparent\n                output[line++] += (a ? r : 0) * multiplier;\n                output[line++] += (a ? g : 0) * multiplier;\n                output[line++] += (a ? b : 0) * multiplier;\n                if (fourthChannel) {\n                    output[line++] += a * multiplier;\n                    trustworthyColorsCount[line / channelsNum - 1] += a\n                        ? multiplier\n                        : 0;\n                }\n            }\n            if (weight >= amountToNext) {\n                actualPosition += channelsNum;\n                currentPosition = actualPosition;\n                weight -= amountToNext;\n            } else {\n                currentPosition += weight;\n                break;\n            }\n        } while (\n            weight > 0 &&\n            actualPosition < this.originalWidthMultipliedByChannels\n        );\n\n        for (\n            line = 0, pixelOffset = outputOffset;\n            line < this.originalHeightMultipliedByChannels;\n            pixelOffset += nextLineOffsetTargetWidth\n        ) {\n            weight = fourthChannel\n                ? trustworthyColorsCount[line / channelsNum]\n                : 1;\n            multiplier = fourthChannel\n                ? weight\n                    ? 1 / weight\n                    : 0\n                : ratioWeightDivisor;\n            outputBuffer[pixelOffset] = output[line++] * multiplier;\n            outputBuffer[++pixelOffset] = output[line++] * multiplier;\n            outputBuffer[++pixelOffset] = output[line++] * multiplier;\n            if (fourthChannel)\n                outputBuffer[++pixelOffset] =\n                    output[line++] * ratioWeightDivisor;\n        }\n\n        outputOffset += channelsNum;\n    } while (outputOffset < this.targetWidthMultipliedByChannels);\n    return outputBuffer;\n};\n\nResize.prototype._resizeHeightRGBChannels = function(buffer, fourthChannel) {\n    const ratioWeight = this.ratioWeightHeightPass;\n    const ratioWeightDivisor = 1 / ratioWeight;\n    const output = this.outputHeightWorkBench;\n    const outputBuffer = this.heightBuffer;\n    const trustworthyColorsCount = this.outputHeightWorkBenchOpaquePixelsCount;\n\n    let weight = 0;\n    let amountToNext = 0;\n    let actualPosition = 0;\n    let currentPosition = 0;\n    let pixelOffset = 0;\n    let outputOffset = 0;\n    let caret = 0;\n    let multiplier = 1;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n\n    do {\n        for (\n            pixelOffset = 0;\n            pixelOffset < this.targetWidthMultipliedByChannels;\n\n        ) {\n            output[pixelOffset++] = 0;\n            output[pixelOffset++] = 0;\n            output[pixelOffset++] = 0;\n\n            if (fourthChannel) {\n                output[pixelOffset++] = 0;\n                trustworthyColorsCount[pixelOffset / 4 - 1] = 0;\n            }\n        }\n\n        weight = ratioWeight;\n\n        do {\n            amountToNext = 1 + actualPosition - currentPosition;\n            multiplier = Math.min(weight, amountToNext);\n            caret = actualPosition;\n\n            for (\n                pixelOffset = 0;\n                pixelOffset < this.targetWidthMultipliedByChannels;\n\n            ) {\n                r = buffer[caret++];\n                g = buffer[caret++];\n                b = buffer[caret++];\n                a = fourthChannel ? buffer[caret++] : 255;\n                // Ignore RGB values if pixel is completely transparent\n                output[pixelOffset++] += (a ? r : 0) * multiplier;\n                output[pixelOffset++] += (a ? g : 0) * multiplier;\n                output[pixelOffset++] += (a ? b : 0) * multiplier;\n\n                if (fourthChannel) {\n                    output[pixelOffset++] += a * multiplier;\n                    trustworthyColorsCount[pixelOffset / 4 - 1] += a\n                        ? multiplier\n                        : 0;\n                }\n            }\n\n            if (weight >= amountToNext) {\n                actualPosition = caret;\n                currentPosition = actualPosition;\n                weight -= amountToNext;\n            } else {\n                currentPosition += weight;\n                break;\n            }\n        } while (weight > 0 && actualPosition < this.widthPassResultSize);\n\n        for (\n            pixelOffset = 0;\n            pixelOffset < this.targetWidthMultipliedByChannels;\n\n        ) {\n            weight = fourthChannel\n                ? trustworthyColorsCount[pixelOffset / 4]\n                : 1;\n            multiplier = fourthChannel\n                ? weight\n                    ? 1 / weight\n                    : 0\n                : ratioWeightDivisor;\n            outputBuffer[outputOffset++] = Math.round(\n                output[pixelOffset++] * multiplier\n            );\n            outputBuffer[outputOffset++] = Math.round(\n                output[pixelOffset++] * multiplier\n            );\n            outputBuffer[outputOffset++] = Math.round(\n                output[pixelOffset++] * multiplier\n            );\n\n            if (fourthChannel) {\n                outputBuffer[outputOffset++] = Math.round(\n                    output[pixelOffset++] * ratioWeightDivisor\n                );\n            }\n        }\n    } while (outputOffset < this.finalResultSize);\n\n    return outputBuffer;\n};\n\nResize.prototype.resizeWidthInterpolatedRGB = function(buffer) {\n    return this._resizeWidthInterpolatedRGBChannels(buffer, false);\n};\n\nResize.prototype.resizeWidthInterpolatedRGBA = function(buffer) {\n    return this._resizeWidthInterpolatedRGBChannels(buffer, true);\n};\n\nResize.prototype.resizeWidthRGB = function(buffer) {\n    return this._resizeWidthRGBChannels(buffer, false);\n};\n\nResize.prototype.resizeWidthRGBA = function(buffer) {\n    return this._resizeWidthRGBChannels(buffer, true);\n};\n\nResize.prototype.resizeHeightInterpolated = function(buffer) {\n    const ratioWeight = this.ratioWeightHeightPass;\n    const outputBuffer = this.heightBuffer;\n\n    let weight = 0;\n    let finalOffset = 0;\n    let pixelOffset = 0;\n    let pixelOffsetAccumulated = 0;\n    let pixelOffsetAccumulated2 = 0;\n    let firstWeight = 0;\n    let secondWeight = 0;\n    let interpolationHeightSourceReadStop;\n\n    // Handle for only one interpolation input being valid for start calculation:\n    for (; weight < 1 / 3; weight += ratioWeight) {\n        for (\n            pixelOffset = 0;\n            pixelOffset < this.targetWidthMultipliedByChannels;\n\n        ) {\n            outputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);\n        }\n    }\n\n    // Adjust for overshoot of the last pass's counter:\n    weight -= 1 / 3;\n\n    for (\n        interpolationHeightSourceReadStop = this.heightOriginal - 1;\n        weight < interpolationHeightSourceReadStop;\n        weight += ratioWeight\n    ) {\n        // Calculate weightings:\n        secondWeight = weight % 1;\n        firstWeight = 1 - secondWeight;\n        // Interpolate:\n        pixelOffsetAccumulated =\n            Math.floor(weight) * this.targetWidthMultipliedByChannels;\n        pixelOffsetAccumulated2 =\n            pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;\n        for (\n            pixelOffset = 0;\n            pixelOffset < this.targetWidthMultipliedByChannels;\n            ++pixelOffset\n        ) {\n            outputBuffer[finalOffset++] = Math.round(\n                buffer[pixelOffsetAccumulated++] * firstWeight +\n                    buffer[pixelOffsetAccumulated2++] * secondWeight\n            );\n        }\n    }\n    // Handle for only one interpolation input being valid for end calculation:\n    while (finalOffset < this.finalResultSize) {\n        for (\n            pixelOffset = 0,\n                pixelOffsetAccumulated =\n                    interpolationHeightSourceReadStop *\n                    this.targetWidthMultipliedByChannels;\n            pixelOffset < this.targetWidthMultipliedByChannels;\n            ++pixelOffset\n        ) {\n            outputBuffer[finalOffset++] = Math.round(\n                buffer[pixelOffsetAccumulated++]\n            );\n        }\n    }\n    return outputBuffer;\n};\n\nResize.prototype.resizeHeightRGB = function(buffer) {\n    return this._resizeHeightRGBChannels(buffer, false);\n};\n\nResize.prototype.resizeHeightRGBA = function(buffer) {\n    return this._resizeHeightRGBChannels(buffer, true);\n};\n\nResize.prototype.resize = function(buffer) {\n    this.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));\n};\n\nResize.prototype.bypassResizer = function(buffer) {\n    // Just return the buffer passed:\n    return buffer;\n};\n\nResize.prototype.initializeFirstPassBuffers = function(BILINEARAlgo) {\n    // Initialize the internal width pass buffers:\n    this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);\n\n    if (!BILINEARAlgo) {\n        this.outputWidthWorkBench = this.generateFloatBuffer(\n            this.originalHeightMultipliedByChannels\n        );\n\n        if (this.colorChannels > 3) {\n            this.outputWidthWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(\n                this.heightOriginal\n            );\n        }\n    }\n};\n\nResize.prototype.initializeSecondPassBuffers = function(BILINEARAlgo) {\n    // Initialize the internal height pass buffers:\n    this.heightBuffer = this.generateUint8Buffer(this.finalResultSize);\n\n    if (!BILINEARAlgo) {\n        this.outputHeightWorkBench = this.generateFloatBuffer(\n            this.targetWidthMultipliedByChannels\n        );\n\n        if (this.colorChannels > 3) {\n            this.outputHeightWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(\n                this.targetWidth\n            );\n        }\n    }\n};\n\nResize.prototype.generateFloatBuffer = function(bufferLength) {\n    // Generate a float32 typed array buffer:\n    try {\n        return new Float32Array(bufferLength);\n    } catch (error) {\n        return [];\n    }\n};\n\nResize.prototype.generateFloat64Buffer = function(bufferLength) {\n    // Generate a float64 typed array buffer:\n    try {\n        return new Float64Array(bufferLength);\n    } catch (error) {\n        return [];\n    }\n};\n\nResize.prototype.generateUint8Buffer = function(bufferLength) {\n    // Generate a uint8 typed array buffer:\n    try {\n        return new Uint8Array(bufferLength);\n    } catch (error) {\n        return [];\n    }\n};\n\nmodule.exports = Resize;\n"],"file":"resize.js"}