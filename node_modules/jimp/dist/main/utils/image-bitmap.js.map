{"version":3,"sources":["../../../src/utils/image-bitmap.js"],"names":["getMIMEFromBuffer","buffer","path","fileTypeFromBuffer","mime","MIME","getType","getBitmapFromGIF","data","gifObj","GIF","GifReader","gifData","Buffer","alloc","width","height","decodeAndBlitFrameRGBA","exifRotate","img","exif","_exif","tags","Orientation","mirror","rotate","parseBitmap","cb","Error","_originalMime","toLowerCase","getMIME","constants","MIME_PNG","png","PNG","parse","err","throwError","call","bitmap","from","MIME_JPEG","JPEG","decode","EXIFParser","create","MIME_TIFF","ifds","UTIF","page","decodeImages","rgba","toRGBA8","t256","t257","MIME_BMP","MIME_X_MS_BMP","BMP","MIME_GIF","compositeBitmapOverBackground","Jimp","image","_background","composite","getBuffer","AUTO","bitDepth","deflateLevel","_deflateLevel","deflateStrategy","_deflateStrategy","filterType","_filterType","colorType","_rgba","inputHasAlpha","constructor","sync","write","jpeg","encode","_quality","bmp","c","tiff","encodeImage","getBufferAsync"],"mappings":"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","sourcesContent":["import fileType from 'file-type';\n\nimport { PNG } from 'pngjs';\nimport JPEG from 'jpeg-js';\nimport BMP from 'bmp-js';\nimport UTIF from 'utif';\nimport EXIFParser from 'exif-parser';\nimport GIF from 'omggif';\n\nimport * as constants from '../constants';\nimport { throwError } from './error-checking';\nimport * as MIME from './mime';\nimport promisify from './promisify';\n\nfunction getMIMEFromBuffer(buffer, path) {\n    const fileTypeFromBuffer = fileType(buffer);\n\n    if (fileTypeFromBuffer) {\n        // If fileType returns something for buffer, then return the mime given\n        return fileTypeFromBuffer.mime;\n    }\n\n    if (path) {\n        // If a path is supplied, and fileType yields no results, then retry with MIME\n        // Path can be either a file path or a url\n        return MIME.getType(path);\n    }\n\n    return null;\n}\n\n// gets image data from a GIF buffer\nfunction getBitmapFromGIF(data) {\n    const gifObj = new GIF.GifReader(data);\n    const gifData = Buffer.alloc(gifObj.width * gifObj.height * 4);\n\n    gifObj.decodeAndBlitFrameRGBA(0, gifData);\n\n    return {\n        data: gifData,\n        width: gifObj.width,\n        height: gifObj.height\n    };\n}\n\n/*\n * Automagically rotates an image based on its EXIF data (if present)\n * @param img a constants object\n*/\nfunction exifRotate(img) {\n    const exif = img._exif;\n\n    if (exif && exif.tags && exif.tags.Orientation) {\n        switch (img._exif.tags.Orientation) {\n            case 1: // Horizontal (normal)\n                // do nothing\n                break;\n            case 2: // Mirror horizontal\n                img.mirror(true, false);\n                break;\n            case 3: // Rotate 180\n                img.rotate(180, false);\n                break;\n            case 4: // Mirror vertical\n                img.mirror(false, true);\n                break;\n            case 5: // Mirror horizontal and rotate 270 CW\n                img.rotate(-90, false).mirror(true, false);\n                break;\n            case 6: // Rotate 90 CW\n                img.rotate(-90, false);\n                break;\n            case 7: // Mirror horizontal and rotate 90 CW\n                img.rotate(90, false).mirror(true, false);\n                break;\n            case 8: // Rotate 270 CW\n                img.rotate(-270, false);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return img;\n}\n\n// parses a bitmap from the constructor to the JIMP bitmap property\nexport function parseBitmap(data, path, cb) {\n    const mime = getMIMEFromBuffer(data, path);\n\n    if (typeof mime !== 'string') {\n        return cb(new Error('Could not find MIME for Buffer <' + path + '>'));\n    }\n\n    this._originalMime = mime.toLowerCase();\n\n    switch (this.getMIME()) {\n        case constants.MIME_PNG: {\n            const png = new PNG();\n            png.parse(data, (err, data) => {\n                if (err) {\n                    return throwError.call(this, err, cb);\n                }\n\n                this.bitmap = {\n                    data: Buffer.from(data.data),\n                    width: data.width,\n                    height: data.height\n                };\n                cb.call(this, null, this);\n            });\n            break;\n        }\n\n        case constants.MIME_JPEG:\n            try {\n                this.bitmap = JPEG.decode(data);\n\n                try {\n                    this._exif = EXIFParser.create(data).parse();\n                    exifRotate(this); // EXIF data\n                } catch (err) {\n                    /* meh */\n                }\n                cb.call(this, null, this);\n            } catch (err) {\n                cb.call(this, err, this);\n            }\n            break;\n\n        case constants.MIME_TIFF: {\n            const ifds = UTIF.decode(data);\n            const page = ifds[0];\n            UTIF.decodeImages(data, ifds);\n            const rgba = UTIF.toRGBA8(page);\n\n            this.bitmap = {\n                data: Buffer.from(rgba),\n                width: page.t256[0],\n                height: page.t257[0]\n            };\n\n            cb.call(this, null, this);\n            break;\n        }\n\n        case constants.MIME_BMP:\n        case constants.MIME_X_MS_BMP:\n            this.bitmap = BMP.decode(data);\n            cb.call(this, null, this);\n            break;\n\n        case constants.MIME_GIF:\n            this.bitmap = getBitmapFromGIF(data);\n            cb.call(this, null, this);\n            break;\n\n        default:\n            return throwError.call(this, 'Unsupported MIME type: ' + mime, cb);\n    }\n\n    return this;\n}\n\nfunction compositeBitmapOverBackground(Jimp, image) {\n    return new Jimp(\n        image.bitmap.width,\n        image.bitmap.height,\n        image._background\n    ).composite(image, 0, 0).bitmap;\n}\n\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\nexport function getBuffer(mime, cb) {\n    if (mime === constants.AUTO) {\n        // allow auto MIME detection\n        mime = this.getMIME();\n    }\n\n    if (typeof mime !== 'string') {\n        return throwError.call(this, 'mime must be a string', cb);\n    }\n\n    if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', cb);\n    }\n\n    switch (mime.toLowerCase()) {\n        case constants.MIME_PNG: {\n            const png = new PNG({\n                width: this.bitmap.width,\n                height: this.bitmap.height,\n                bitDepth: 8,\n                deflateLevel: this._deflateLevel,\n                deflateStrategy: this._deflateStrategy,\n                filterType: this._filterType,\n                colorType: this._rgba ? 6 : 2,\n                inputHasAlpha: true\n            });\n\n            if (this._rgba) {\n                png.data = Buffer.from(this.bitmap.data);\n            } else {\n                // when PNG doesn't support alpha\n                png.data = compositeBitmapOverBackground(\n                    this.constructor,\n                    this\n                ).data;\n            }\n\n            const buffer = PNG.sync.write(png);\n            cb.call(this, null, buffer);\n            break;\n        }\n\n        case constants.MIME_JPEG: {\n            // composite onto a new image so that the background shows through alpha channels\n            const jpeg = JPEG.encode(\n                compositeBitmapOverBackground(this.constructor, this),\n                this._quality\n            );\n            cb.call(this, null, jpeg.data);\n            break;\n        }\n\n        case constants.MIME_BMP:\n        case constants.MIME_X_MS_BMP: {\n            // composite onto a new image so that the background shows through alpha channels\n            const bmp = BMP.encode(\n                compositeBitmapOverBackground(this.constructor, this)\n            );\n            cb.call(this, null, bmp.data);\n            break;\n        }\n\n        case constants.MIME_TIFF: {\n            const c = compositeBitmapOverBackground(this.constructor, this);\n            const tiff = UTIF.encodeImage(c.data, c.width, c.height);\n            cb.call(this, null, Buffer.from(tiff));\n            break;\n        }\n\n        default:\n            cb.call(this, 'Unsupported MIME type: ' + mime);\n            break;\n    }\n\n    return this;\n}\n\nexport function getBufferAsync(mime) {\n    return promisify(getBuffer, this, mime);\n}\n"],"file":"image-bitmap.js"}