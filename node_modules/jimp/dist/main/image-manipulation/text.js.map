{"version":3,"sources":["../../../src/image-manipulation/text.js"],"names":["measureText","font","text","x","i","length","chars","xoffset","kernings","xadvance","measureTextHeight","maxWidth","words","split","line","textTotalHeight","common","lineHeight","n","testLine","testWidth","xOffsetBasedOnAlignment","alignment","constants","HORIZONTAL_ALIGN_LEFT","HORIZONTAL_ALIGN_CENTER","drawCharacter","image","y","char","width","height","imageChar","pages","page","cloneQuiet","crop","composite","yoffset","printText","print","maxHeight","cb","Infinity","throwError","call","alignmentX","alignmentY","VERTICAL_ALIGN_TOP","VERTICAL_ALIGN_BOTTOM","VERTICAL_ALIGN_MIDDLE"],"mappings":"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","sourcesContent":["import { isNodePattern, throwError } from '../utils/error-checking';\nimport * as constants from '../constants';\n\nfunction measureText(font, text) {\n    let x = 0;\n\n    for (let i = 0; i < text.length; i++) {\n        if (font.chars[text[i]]) {\n            x +=\n                font.chars[text[i]].xoffset +\n                (font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]]\n                    ? font.kernings[text[i]][text[i + 1]]\n                    : 0) +\n                (font.chars[text[i]].xadvance || 0);\n        }\n    }\n\n    return x;\n}\n\nfunction measureTextHeight(font, text, maxWidth) {\n    const words = text.split(' ');\n    let line = '';\n    let textTotalHeight = font.common.lineHeight;\n\n    for (let n = 0; n < words.length; n++) {\n        const testLine = line + words[n] + ' ';\n        const testWidth = measureText(font, testLine);\n\n        if (testWidth > maxWidth && n > 0) {\n            textTotalHeight += font.common.lineHeight;\n            line = words[n] + ' ';\n        } else {\n            line = testLine;\n        }\n    }\n\n    return textTotalHeight;\n}\n\nfunction xOffsetBasedOnAlignment(font, line, maxWidth, alignment) {\n    if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n        return 0;\n    }\n\n    if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n        return (maxWidth - measureText(font, line)) / 2;\n    }\n\n    return maxWidth - measureText(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, char) {\n    if (char.width > 0 && char.height > 0) {\n        const imageChar = font.pages[char.page]\n            .cloneQuiet()\n            .crop(char.x, char.y, char.width, char.height);\n        return image.composite(imageChar, x + char.xoffset, y + char.yoffset);\n    }\n\n    return image;\n}\n\nfunction printText(font, x, y, text) {\n    for (let i = 0; i < text.length; i++) {\n        if (font.chars[text[i]]) {\n            drawCharacter(this, font, x, y, font.chars[text[i]]);\n            x +=\n                (font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]]\n                    ? font.kernings[text[i]][text[i + 1]]\n                    : 0) + (font.chars[text[i]].xadvance || 0);\n        }\n    }\n}\n\n/**\n * Draws a text on a image on a given boundary\n * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n * @param {number} x the x position to start drawing the text\n * @param {number} y the y position to start drawing the text\n * @param {string} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n * @param {number} maxWidth (optional) the boundary width to draw in\n * @param {number} maxHeight (optional) the boundary height to draw in\n * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n * @returns {Jimp} this for chaining of methods\n */\nexport function print(font, x, y, text, maxWidth, maxHeight, cb) {\n    if (typeof maxWidth === 'function' && typeof cb === 'undefined') {\n        cb = maxWidth;\n        maxWidth = Infinity;\n    }\n\n    if (typeof maxWidth === 'undefined') {\n        maxWidth = Infinity;\n    }\n\n    if (typeof maxHeight === 'function' && typeof cb === 'undefined') {\n        cb = maxHeight;\n        maxWidth = Infinity;\n    }\n\n    if (typeof maxHeight === 'undefined') {\n        maxHeight = Infinity;\n    }\n\n    if (typeof font !== 'object') {\n        return throwError.call(this, 'font must be a Jimp loadFont', cb);\n    }\n\n    if (\n        typeof x !== 'number' ||\n        typeof y !== 'number' ||\n        typeof maxWidth !== 'number'\n    ) {\n        return throwError.call(this, 'x, y and maxWidth must be numbers', cb);\n    }\n\n    if (typeof text !== 'string' && typeof text !== 'object') {\n        return throwError.call(this, 'text must be a string or an object', cb);\n    }\n\n    if (typeof maxWidth !== 'number') {\n        return throwError.call(this, 'maxWidth must be a number', cb);\n    }\n\n    if (typeof maxHeight !== 'number') {\n        return throwError.call(this, 'maxHeight must be a number', cb);\n    }\n\n    let alignmentX;\n    let alignmentY;\n\n    if (typeof text === 'object') {\n        alignmentX = text.alignmentX || constants.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || constants.VERTICAL_ALIGN_TOP;\n        ({ text } = text);\n    } else {\n        alignmentX = constants.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = constants.VERTICAL_ALIGN_TOP;\n    }\n\n    if (\n        maxHeight !== Infinity &&\n        alignmentY === constants.VERTICAL_ALIGN_BOTTOM\n    ) {\n        y = maxHeight - measureTextHeight(font, text, maxWidth);\n    } else if (\n        maxHeight !== Infinity &&\n        alignmentY === constants.VERTICAL_ALIGN_MIDDLE\n    ) {\n        y = maxHeight / 2 - measureTextHeight(font, text, maxWidth) / 2;\n    }\n\n    const words = text.split(' ');\n    let line = '';\n\n    for (let n = 0; n < words.length; n++) {\n        const testLine = line + words[n] + ' ';\n        const testWidth = measureText(font, testLine);\n\n        if (testWidth > maxWidth && n > 0) {\n            this.print(\n                font,\n                x + xOffsetBasedOnAlignment(font, line, maxWidth, alignmentX),\n                y,\n                line\n            );\n            line = words[n] + ' ';\n            y += font.common.lineHeight;\n        } else {\n            line = testLine;\n        }\n    }\n\n    printText.call(\n        this,\n        font,\n        x + xOffsetBasedOnAlignment(font, line, maxWidth, alignmentX),\n        y,\n        line\n    );\n\n    if (isNodePattern(cb)) {\n        return cb.call(this, null, this);\n    }\n\n    return this;\n}\n"],"file":"text.js"}