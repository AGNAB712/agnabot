{"version":3,"sources":["../../src/utils/image-bitmap.js"],"names":["getMIMEFromBuffer","buffer","path","fileTypeFromBuffer","mime","MIME","getType","getBitmapFromGIF","data","gifObj","GIF","GifReader","gifData","Buffer","alloc","width","height","decodeAndBlitFrameRGBA","exifRotate","img","exif","_exif","tags","Orientation","mirror","rotate","parseBitmap","cb","Error","_originalMime","toLowerCase","getMIME","constants","MIME_PNG","png","PNG","sync","read","bitmap","from","MIME_JPEG","JPEG","decode","EXIFParser","create","parse","err","MIME_TIFF","ifds","UTIF","page","decodeImages","rgba","toRGBA8","t256","t257","MIME_BMP","MIME_X_MS_BMP","BMP","MIME_GIF","throwError","call","error","compositeBitmapOverBackground","Jimp","image","_background","composite","getBuffer","AUTO","bitDepth","deflateLevel","_deflateLevel","deflateStrategy","_deflateStrategy","filterType","_filterType","colorType","_rgba","inputHasAlpha","constructor","write","jpeg","encode","_quality","bmp","c","tiff","encodeImage","getBufferAsync"],"mappings":"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","sourcesContent":["import fileType from 'file-type';\n\nimport { PNG } from 'pngjs';\nimport JPEG from 'jpeg-js';\nimport BMP from 'bmp-js';\nimport UTIF from 'utif';\nimport EXIFParser from 'exif-parser';\nimport GIF from 'omggif';\n\nimport * as constants from '../constants';\nimport { toAGBR, fromAGBR } from './abgr';\nimport { throwError } from './error-checking';\nimport * as MIME from './mime';\nimport promisify from './promisify';\n\nfunction getMIMEFromBuffer(buffer, path) {\n    const fileTypeFromBuffer = fileType(buffer);\n\n    if (fileTypeFromBuffer) {\n        // If fileType returns something for buffer, then return the mime given\n        return fileTypeFromBuffer.mime;\n    }\n\n    if (path) {\n        // If a path is supplied, and fileType yields no results, then retry with MIME\n        // Path can be either a file path or a url\n        return MIME.getType(path);\n    }\n\n    return null;\n}\n\n// gets image data from a GIF buffer\nfunction getBitmapFromGIF(data) {\n    const gifObj = new GIF.GifReader(data);\n    const gifData = Buffer.alloc(gifObj.width * gifObj.height * 4);\n\n    gifObj.decodeAndBlitFrameRGBA(0, gifData);\n\n    return {\n        data: gifData,\n        width: gifObj.width,\n        height: gifObj.height\n    };\n}\n\n/*\n * Automagically rotates an image based on its EXIF data (if present)\n * @param img a constants object\n*/\nfunction exifRotate(img) {\n    const exif = img._exif;\n\n    if (exif && exif.tags && exif.tags.Orientation) {\n        switch (img._exif.tags.Orientation) {\n            case 1: // Horizontal (normal)\n                // do nothing\n                break;\n            case 2: // Mirror horizontal\n                img.mirror(true, false);\n                break;\n            case 3: // Rotate 180\n                img.rotate(180, false);\n                break;\n            case 4: // Mirror vertical\n                img.mirror(false, true);\n                break;\n            case 5: // Mirror horizontal and rotate 270 CW\n                img.rotate(-90, false).mirror(true, false);\n                break;\n            case 6: // Rotate 90 CW\n                img.rotate(-90, false);\n                break;\n            case 7: // Mirror horizontal and rotate 90 CW\n                img.rotate(90, false).mirror(true, false);\n                break;\n            case 8: // Rotate 270 CW\n                img.rotate(-270, false);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return img;\n}\n\n// parses a bitmap from the constructor to the JIMP bitmap property\nexport function parseBitmap(data, path, cb) {\n    const mime = getMIMEFromBuffer(data, path);\n\n    if (typeof mime !== 'string') {\n        return cb(new Error('Could not find MIME for Buffer <' + path + '>'));\n    }\n\n    this._originalMime = mime.toLowerCase();\n\n    try {\n        switch (this.getMIME()) {\n            case constants.MIME_PNG: {\n                const png = PNG.sync.read(data);\n\n                this.bitmap = {\n                    data: Buffer.from(png.data),\n                    width: png.width,\n                    height: png.height\n                };\n\n                break;\n            }\n\n            case constants.MIME_JPEG:\n                this.bitmap = JPEG.decode(data);\n\n                try {\n                    this._exif = EXIFParser.create(data).parse();\n                    exifRotate(this); // EXIF data\n                } catch (err) {\n                    /* meh */\n                }\n\n                break;\n\n            case constants.MIME_TIFF: {\n                const ifds = UTIF.decode(data);\n                const page = ifds[0];\n                UTIF.decodeImages(data, ifds);\n                const rgba = UTIF.toRGBA8(page);\n\n                this.bitmap = {\n                    data: Buffer.from(rgba),\n                    width: page.t256[0],\n                    height: page.t257[0]\n                };\n\n                break;\n            }\n\n            case constants.MIME_BMP:\n            case constants.MIME_X_MS_BMP:\n                this.bitmap = BMP.decode(data);\n\n                fromAGBR(this);\n\n                break;\n\n            case constants.MIME_GIF:\n                this.bitmap = getBitmapFromGIF(data);\n                break;\n\n            default:\n                return throwError.call(\n                    this,\n                    'Unsupported MIME type: ' + mime,\n                    cb\n                );\n        }\n    } catch (error) {\n        cb.call(this, error, this);\n    }\n\n    cb.call(this, null, this);\n\n    return this;\n}\n\nfunction compositeBitmapOverBackground(Jimp, image) {\n    return new Jimp(\n        image.bitmap.width,\n        image.bitmap.height,\n        image._background\n    ).composite(image, 0, 0).bitmap;\n}\n\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\nexport function getBuffer(mime, cb) {\n    if (mime === constants.AUTO) {\n        // allow auto MIME detection\n        mime = this.getMIME();\n    }\n\n    if (typeof mime !== 'string') {\n        return throwError.call(this, 'mime must be a string', cb);\n    }\n\n    if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', cb);\n    }\n\n    switch (mime.toLowerCase()) {\n        case constants.MIME_PNG: {\n            const png = new PNG({\n                width: this.bitmap.width,\n                height: this.bitmap.height,\n                bitDepth: 8,\n                deflateLevel: this._deflateLevel,\n                deflateStrategy: this._deflateStrategy,\n                filterType: this._filterType,\n                colorType: this._rgba ? 6 : 2,\n                inputHasAlpha: true\n            });\n\n            if (this._rgba) {\n                png.data = Buffer.from(this.bitmap.data);\n            } else {\n                // when PNG doesn't support alpha\n                png.data = compositeBitmapOverBackground(\n                    this.constructor,\n                    this\n                ).data;\n            }\n\n            const buffer = PNG.sync.write(png);\n            cb.call(this, null, buffer);\n            break;\n        }\n\n        case constants.MIME_JPEG: {\n            // composite onto a new image so that the background shows through alpha channels\n            const jpeg = JPEG.encode(\n                compositeBitmapOverBackground(this.constructor, this),\n                this._quality\n            );\n            cb.call(this, null, jpeg.data);\n            break;\n        }\n\n        case constants.MIME_BMP:\n        case constants.MIME_X_MS_BMP: {\n            // composite onto a new image so that the background shows through alpha channels\n            toAGBR(this);\n\n            const bmp = BMP.encode(\n                compositeBitmapOverBackground(this.constructor, this)\n            );\n            cb.call(this, null, bmp.data);\n            break;\n        }\n\n        case constants.MIME_TIFF: {\n            const c = compositeBitmapOverBackground(this.constructor, this);\n            const tiff = UTIF.encodeImage(c.data, c.width, c.height);\n            cb.call(this, null, Buffer.from(tiff));\n            break;\n        }\n\n        default:\n            cb.call(this, 'Unsupported MIME type: ' + mime);\n            break;\n    }\n\n    return this;\n}\n\nexport function getBufferAsync(mime) {\n    return promisify(getBuffer, this, mime);\n}\n"],"file":"image-bitmap.js"}