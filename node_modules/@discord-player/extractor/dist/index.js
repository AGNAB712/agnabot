"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AppleMusicExtractor: () => AppleMusicExtractor,
  AttachmentExtractor: () => AttachmentExtractor,
  BridgeProvider: () => BridgeProvider,
  BridgeSource: () => BridgeSource,
  Internal: () => internal_exports,
  ReverbnationExtractor: () => ReverbnationExtractor,
  SoundCloudExtractor: () => SoundCloudExtractor,
  SpotifyExtractor: () => SpotifyExtractor,
  UA: () => UA,
  VimeoExtractor: () => VimeoExtractor,
  YouTubeExtractor: () => YoutubeExtractor,
  YouTubeLibs: () => YouTubeLibs,
  YoutubeExtractor: () => YoutubeExtractor,
  createImport: () => createImport,
  getFetch: () => getFetch,
  loadYtdl: () => loadYtdl,
  lyricsExtractor: () => lyricsExtractor,
  makeSCSearch: () => makeSCSearch,
  makeYTSearch: () => makeYTSearch,
  pullSCMetadata: () => pullSCMetadata,
  pullYTMetadata: () => pullYTMetadata,
  version: () => version
});
module.exports = __toCommonJS(src_exports);

// src/extractors/SoundCloudExtractor.ts
var import_discord_player = require("discord-player");
var SoundCloud = __toESM(require("soundcloud.ts"));
var _SoundCloudExtractor = class extends import_discord_player.BaseExtractor {
  constructor() {
    super(...arguments);
    this.internal = new SoundCloud.default({
      clientId: this.options.clientId,
      oauthToken: this.options.oauthToken,
      proxy: this.options.proxy
    });
  }
  async activate() {
    _SoundCloudExtractor.soundcloud = this.internal;
  }
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [
      import_discord_player.QueryType.SOUNDCLOUD,
      import_discord_player.QueryType.SOUNDCLOUD_PLAYLIST,
      import_discord_player.QueryType.SOUNDCLOUD_SEARCH,
      import_discord_player.QueryType.SOUNDCLOUD_TRACK,
      import_discord_player.QueryType.AUTO,
      import_discord_player.QueryType.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    if (track.queryType === import_discord_player.QueryType.SOUNDCLOUD_TRACK)
      return this.handle(track.author || track.title, {
        requestedBy: track.requestedBy,
        type: import_discord_player.QueryType.SOUNDCLOUD_SEARCH
      });
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player.QueryType.SOUNDCLOUD_TRACK: {
        const trackInfo = await this.internal.tracks.getV2(query).catch(import_discord_player.Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new import_discord_player.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.permalink_url,
          duration: import_discord_player.Util.buildTimeCode(import_discord_player.Util.parseMS(trackInfo.duration)),
          description: trackInfo.description ?? "",
          thumbnail: trackInfo.artwork_url,
          views: trackInfo.playback_count,
          author: trackInfo.user.username,
          requestedBy: context.requestedBy,
          source: "soundcloud",
          engine: trackInfo,
          queryType: context.type,
          metadata: trackInfo,
          requestMetadata: async () => {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      case import_discord_player.QueryType.SOUNDCLOUD_PLAYLIST: {
        const data = await this.internal.playlists.getV2(query).catch(import_discord_player.Util.noop);
        if (!data)
          return { playlist: null, tracks: [] };
        const res = new import_discord_player.Playlist(this.context.player, {
          title: data.title,
          description: data.description ?? "",
          thumbnail: data.artwork_url ?? data.tracks[0].artwork_url,
          type: "playlist",
          source: "soundcloud",
          author: {
            name: data.user.username,
            url: data.user.permalink_url
          },
          tracks: [],
          id: `${data.id}`,
          url: data.permalink_url,
          rawPlaylist: data
        });
        for (const song of data.tracks) {
          const track = new import_discord_player.Track(this.context.player, {
            title: song.title,
            description: song.description ?? "",
            author: song.user.username,
            url: song.permalink_url,
            thumbnail: song.artwork_url,
            duration: import_discord_player.Util.buildTimeCode(import_discord_player.Util.parseMS(song.duration)),
            views: song.playback_count,
            requestedBy: context.requestedBy,
            playlist: res,
            source: "soundcloud",
            engine: song,
            queryType: context.type,
            metadata: song,
            requestMetadata: async () => {
              return song;
            }
          });
          track.extractor = this;
          track.playlist = res;
          res.tracks.push(track);
        }
        return { playlist: res, tracks: res.tracks };
      }
      default: {
        const tracks = await this.internal.tracks.searchV2({ q: query }).catch(import_discord_player.Util.noop);
        if (!tracks || !tracks.collection.length)
          return this.emptyResponse();
        const resolvedTracks = [];
        for (const trackInfo of tracks.collection) {
          const track = new import_discord_player.Track(this.context.player, {
            title: trackInfo.title,
            url: trackInfo.permalink_url,
            duration: import_discord_player.Util.buildTimeCode(import_discord_player.Util.parseMS(trackInfo.duration)),
            description: trackInfo.description ?? "",
            thumbnail: trackInfo.artwork_url,
            views: trackInfo.playback_count,
            author: trackInfo.user.username,
            requestedBy: context.requestedBy,
            source: "soundcloud",
            engine: trackInfo,
            queryType: "soundcloudTrack",
            metadata: trackInfo,
            requestMetadata: async () => {
              return trackInfo;
            }
          });
          track.extractor = this;
          resolvedTracks.push(track);
        }
        return { playlist: null, tracks: resolvedTracks };
      }
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const url = await this.internal.util.streamLink(info.url).catch(import_discord_player.Util.noop);
    if (!url)
      throw new Error("Could not extract stream from this track source");
    return url;
  }
};
var SoundCloudExtractor = _SoundCloudExtractor;
__name(SoundCloudExtractor, "SoundCloudExtractor");
SoundCloudExtractor.identifier = "com.discord-player.soundcloudextractor";
SoundCloudExtractor.soundcloud = null;

// src/extractors/YoutubeExtractor.ts
var import_youtube_sr2 = require("youtube-sr");
var import_discord_player2 = require("discord-player");

// src/extractors/common/helper.ts
var import_youtube_sr = require("youtube-sr");
var factory;
var createImport = /* @__PURE__ */ __name((lib) => import(lib).catch(() => null), "createImport");
var UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.49";
var YouTubeLibs = [
  "ytdl-core",
  "@distube/ytdl-core",
  "play-dl",
  "yt-stream"
];
var ERR_NO_YT_LIB = new Error(`Could not load youtube library. Install one of ${YouTubeLibs.map((lib) => `"${lib}"`).join(", ")}`);
var forcedLib = process.env.DP_FORCE_YTDL_MOD;
if (forcedLib)
  YouTubeLibs.unshift(forcedLib);
var getFetch = typeof fetch !== "undefined" ? fetch : async (info, init) => {
  let dy;
  if (dy = await createImport("undici")) {
    return (dy.fetch || dy.default.fetch)(info, init);
  } else if (dy = await createImport("node-fetch")) {
    return (dy.fetch || dy.default)(info, init);
  } else {
    throw new Error("No fetch lib found");
  }
};
async function loadYtdl(options, force = false) {
  if (factory && !force)
    return factory;
  let lib, _ytLibName, _stream;
  for (const ytlib of YouTubeLibs) {
    lib = await import(ytlib).then(
      (m) => m,
      () => null
    );
    if (!lib)
      continue;
    lib = lib.default || lib;
    _ytLibName = ytlib;
    break;
  }
  if (lib) {
    const isYtdl = ["ytdl-core", "@distube/ytdl-core"].some((lib2) => lib2 === _ytLibName);
    _stream = /* @__PURE__ */ __name(async (query) => {
      if (isYtdl) {
        const dl = lib;
        const info = await dl.getInfo(query, options);
        const formats = info.formats.filter((format) => {
          return info.videoDetails.isLiveContent ? format.isHLS && format.hasAudio : format.hasAudio;
        }).sort((a, b) => Number(b.audioBitrate) - Number(a.audioBitrate) || Number(a.bitrate) - Number(b.bitrate));
        const fmt = formats.find((format) => !format.hasVideo) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];
        const url = fmt?.url;
        if (!url)
          throw new Error(`Failed to parse stream url for ${query}`);
        return url;
      } else if (_ytLibName === "play-dl") {
        const dl = lib;
        const info = await dl.video_info(query);
        const formats = info.format.filter((format) => {
          const re2 = /\/manifest\/hls_(variant|playlist)\//;
          if (!format.url)
            return false;
          if (info.video_details.live)
            return re2.test(format.url) && typeof format.bitrate === "number";
          return typeof format.bitrate === "number";
        }).sort((a, b) => Number(b.bitrate) - Number(a.bitrate));
        const fmt = formats.find((format) => !format.qualityLabel) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];
        const url = fmt?.url;
        if (!url)
          throw new Error(`Failed to parse stream url for ${query}`);
        return url;
      } else if (_ytLibName === "yt-stream") {
        const dl = lib;
        const decipher = await import("yt-stream/src/stream/decipher.js");
        const info = await dl.getInfo(query);
        info.formats = await decipher?.format_decipher(info.formats, info.html5player);
        const url = info.formats.filter((val) => val.mimeType.startsWith("audio") && val.audioQuality !== "AUDIO_QUALITY_LOW").map((val) => val.url);
        if (url.length !== 0)
          return url[0];
        return info.formats.filter((val) => val.mimeType.startsWith("audio")).map((val) => val.url)[0];
      } else {
        throw ERR_NO_YT_LIB;
      }
    }, "_stream");
  } else {
    throw ERR_NO_YT_LIB;
  }
  factory = { name: _ytLibName, stream: _stream, lib };
  return factory;
}
__name(loadYtdl, "loadYtdl");
async function makeYTSearch(query, opt) {
  const res = await import_youtube_sr.YouTube.search(query, {
    type: "video",
    requestOptions: opt
  }).catch(() => {
  });
  return res || [];
}
__name(makeYTSearch, "makeYTSearch");
async function makeSCSearch(query) {
  const { soundcloud } = SoundCloudExtractor;
  if (!soundcloud)
    return [];
  try {
    const info = await soundcloud.tracks.searchV2({
      q: query,
      limit: 5
    });
    return info.collection;
  } catch {
    const info = await soundcloud.tracks.searchAlt(query);
    return info;
  }
}
__name(makeSCSearch, "makeSCSearch");
async function pullYTMetadata(ext, info) {
  const meta = await makeYTSearch(ext.createBridgeQuery(info), "video").then((r) => r[0]).catch(() => null);
  return meta;
}
__name(pullYTMetadata, "pullYTMetadata");
async function pullSCMetadata(ext, info) {
  const meta = await makeSCSearch(ext.createBridgeQuery(info)).then((r) => r[0]).catch(() => null);
  return meta;
}
__name(pullSCMetadata, "pullSCMetadata");

// src/extractors/YoutubeExtractor.ts
var validQueryDomains = /* @__PURE__ */ new Set(["youtube.com", "www.youtube.com", "m.youtube.com", "music.youtube.com", "gaming.youtube.com"]);
var validPathDomains = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts)\/)/;
var idRegex = /^[a-zA-Z0-9-_]{11}$/;
var _YoutubeExtractor = class extends import_discord_player2.BaseExtractor {
  async activate() {
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const { stream, name } = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = stream;
    this._ytLibName = name;
  }
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [
      import_discord_player2.QueryType.YOUTUBE,
      import_discord_player2.QueryType.YOUTUBE_PLAYLIST,
      import_discord_player2.QueryType.YOUTUBE_SEARCH,
      import_discord_player2.QueryType.YOUTUBE_VIDEO,
      import_discord_player2.QueryType.AUTO,
      import_discord_player2.QueryType.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async handle(query, context) {
    query = query.includes("youtube.com") ? query.replace(/(m(usic)?|gaming)\./, "") : query;
    if (_YoutubeExtractor.validateURL(query))
      context.type = import_discord_player2.QueryType.YOUTUBE_VIDEO;
    switch (context.type) {
      case import_discord_player2.QueryType.YOUTUBE_PLAYLIST: {
        const ytpl = await import_youtube_sr2.YouTube.getPlaylist(query, {
          fetchAll: true,
          requestOptions: context.requestOptions
        }).catch(import_discord_player2.Util.noop);
        if (!ytpl)
          return this.emptyResponse();
        const playlist = new import_discord_player2.Playlist(this.context.player, {
          title: ytpl.title,
          thumbnail: ytpl.thumbnail?.displayThumbnailURL("maxresdefault"),
          description: ytpl.title || "",
          type: "playlist",
          source: "youtube",
          author: {
            name: ytpl.channel.name,
            url: ytpl.channel.url
          },
          tracks: [],
          id: ytpl.id,
          url: ytpl.url,
          rawPlaylist: ytpl
        });
        playlist.tracks = ytpl.videos.map((video) => {
          const track = new import_discord_player2.Track(this.context.player, {
            title: video.title,
            description: video.description,
            author: video.channel?.name,
            url: video.url,
            requestedBy: context.requestedBy,
            thumbnail: video.thumbnail.url,
            views: video.views,
            duration: video.durationFormatted,
            raw: video,
            playlist,
            source: "youtube",
            queryType: "youtubeVideo",
            metadata: video,
            async requestMetadata() {
              return video;
            }
          });
          track.extractor = this;
          track.playlist = playlist;
          return track;
        });
        return { playlist, tracks: playlist.tracks };
      }
      case import_discord_player2.QueryType.YOUTUBE_VIDEO: {
        const id = /[a-zA-Z0-9-_]{11}/.exec(query);
        if (!id?.[0])
          return this.emptyResponse();
        const video = await import_youtube_sr2.YouTube.getVideo(`https://www.youtube.com/watch?v=${id}`, context.requestOptions).catch(import_discord_player2.Util.noop);
        if (!video)
          return this.emptyResponse();
        video.source = "youtube";
        const track = new import_discord_player2.Track(this.context.player, {
          title: video.title,
          description: video.description,
          author: video.channel?.name,
          url: video.url,
          requestedBy: context.requestedBy,
          thumbnail: video.thumbnail?.displayThumbnailURL("maxresdefault"),
          views: video.views,
          duration: video.durationFormatted,
          source: "youtube",
          raw: video,
          queryType: context.type,
          metadata: video,
          async requestMetadata() {
            return video;
          }
        });
        track.extractor = this;
        return {
          playlist: null,
          tracks: [track]
        };
      }
      default: {
        const tracks = await this._makeYTSearch(query, context);
        return { playlist: null, tracks };
      }
    }
  }
  async _makeYTSearch(query, context) {
    const res = await makeYTSearch(query, context.requestOptions).catch(import_discord_player2.Util.noop);
    if (!res || !res.length)
      return [];
    return res.map((video) => {
      video.source = "youtube";
      const track = new import_discord_player2.Track(this.context.player, {
        title: video.title,
        description: video.description,
        author: video.channel?.name,
        url: video.url,
        requestedBy: context.requestedBy,
        thumbnail: video.thumbnail?.displayThumbnailURL("maxresdefault"),
        views: video.views,
        duration: video.durationFormatted,
        source: "youtube",
        raw: video,
        queryType: context.type,
        metadata: video,
        async requestMetadata() {
          return video;
        }
      });
      track.extractor = this;
      return track;
    });
  }
  async getRelatedTracks(track) {
    let info;
    if (_YoutubeExtractor.validateURL(track.url))
      info = await import_youtube_sr2.YouTube.getVideo(track.url).then((x) => x.videos).catch(import_discord_player2.Util.noop);
    if (!info)
      info = await import_youtube_sr2.YouTube.search(track.author || track.title, { limit: 5, type: "video" }).then((x) => x).catch(import_discord_player2.Util.noop);
    if (!info?.length) {
      return this.createResponse();
    }
    const similar = info.map((video) => {
      const t = new import_discord_player2.Track(this.context.player, {
        title: video.title,
        url: `https://www.youtube.com/watch?v=${video.id}`,
        duration: video.durationFormatted || import_discord_player2.Util.buildTimeCode(import_discord_player2.Util.parseMS(video.duration * 1e3)),
        description: video.title,
        thumbnail: typeof video.thumbnail === "string" ? video.thumbnail : video.thumbnail.url,
        views: video.views,
        author: video.channel.name,
        requestedBy: track.requestedBy,
        source: "youtube",
        queryType: "youtubeVideo",
        metadata: video,
        async requestMetadata() {
          return video;
        }
      });
      t.extractor = this;
      return t;
    });
    return this.createResponse(null, similar);
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    if (!this._stream) {
      throw new Error(`Could not find youtube streaming library. Install one of ${YouTubeLibs.join(", ")}`);
    }
    let url = info.url;
    url = url.includes("youtube.com") ? url.replace(/(m(usic)?|gaming)\./, "") : url;
    return this._stream(url);
  }
  static validateURL(link) {
    try {
      _YoutubeExtractor.parseURL(link);
      return true;
    } catch {
      return false;
    }
  }
  static validateId(id) {
    return idRegex.test(id.trim());
  }
  static parseURL(link) {
    const parsed = new URL(link.trim());
    let id = parsed.searchParams.get("v");
    if (validPathDomains.test(link.trim()) && !id) {
      const paths = parsed.pathname.split("/");
      id = parsed.host === "youtu.be" ? paths[1] : paths[2];
    } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {
      throw Error("Not a YouTube domain");
    }
    if (!id) {
      throw Error(`No video id found: "${link}"`);
    }
    id = id.substring(0, 11);
    if (!this.validateId(id)) {
      throw TypeError(`Video id (${id}) does not match expected format (${idRegex.toString()})`);
    }
    return id;
  }
};
var YoutubeExtractor = _YoutubeExtractor;
__name(YoutubeExtractor, "YoutubeExtractor");
YoutubeExtractor.identifier = "com.discord-player.youtubeextractor";

// src/extractors/LyricsExtractor.ts
var import_genius_lyrics = require("genius-lyrics");
var client;
function lyricsExtractor(apiKey, force) {
  if (!client && !force)
    client = new import_genius_lyrics.Client(apiKey);
  return { search, client };
}
__name(lyricsExtractor, "lyricsExtractor");
function search(query) {
  return new Promise((resolve, reject) => {
    if (typeof query !== "string")
      return reject(new TypeError(`Expected search query to be a string, received "${typeof query}"!`));
    client.songs.search(query).then(async (songs) => {
      const data = {
        title: songs[0].title,
        fullTitle: songs[0].fullTitle,
        id: songs[0].id,
        thumbnail: songs[0].thumbnail,
        image: songs[0].image,
        url: songs[0].url,
        artist: {
          name: songs[0].artist.name,
          id: songs[0].artist.id,
          url: songs[0].artist.url,
          image: songs[0].artist.image
        },
        lyrics: await songs[0].lyrics(false)
      };
      resolve(data);
    }).catch(() => {
      reject(new Error("Could not parse lyrics"));
    });
  });
}
__name(search, "search");

// src/extractors/VimeoExtractor.ts
var import_discord_player3 = require("discord-player");

// src/internal/Vimeo.ts
var import_http = __toESM(require("http"));
var import_https = __toESM(require("https"));
var Vimeo = class {
  constructor() {
    throw new Error(`The ${this.constructor.name} class may not be instantiated!`);
  }
  static download(id) {
    return new Promise(async (resolve) => {
      const info = await Vimeo.getInfo(id);
      if (!info)
        return null;
      const downloader = info.stream.startsWith("https://") ? import_https.default : import_http.default;
      downloader.get(info.stream, (res) => {
        resolve(res);
      });
    });
  }
  static async getInfo(id) {
    if (!id)
      throw new Error("Invalid id");
    const url = `https://player.vimeo.com/video/${id}`;
    try {
      const res = await getFetch(url);
      const data = await res.text();
      const json = JSON.parse(data.split("window.playerConfig =")[1].split(";")[0].trim());
      const obj = {
        id: json.video.id,
        duration: json.video.duration * 1e3,
        title: json.video.title,
        url: json.video.url,
        thumbnail: json.video.thumbs["1280"] || json.video.thumbs.base,
        stream: json.request.files.progressive[0].url,
        author: {
          id: json.video.owner.id,
          name: json.video.owner.name,
          url: json.video.owner.url,
          avatar: json.video.owner.img_2x || json.video.owner.img
        }
      };
      return obj;
    } catch {
      return null;
    }
  }
};
__name(Vimeo, "Vimeo");

// src/extractors/VimeoExtractor.ts
var VimeoExtractor = class extends import_discord_player3.BaseExtractor {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [import_discord_player3.QueryType.VIMEO].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player3.QueryType.VIMEO: {
        const trackInfo = await Vimeo.getInfo(
          query.split("/").filter((x) => !!x).pop()
        ).catch(import_discord_player3.Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new import_discord_player3.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player3.Util.buildTimeCode(import_discord_player3.Util.parseMS(trackInfo.duration || 0)),
          description: `${trackInfo.title} by ${trackInfo.author.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.stream,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await Vimeo.getInfo(info.url).catch(import_discord_player3.Util.noop);
    if (!track || !track.stream)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.stream
    };
    return track.stream;
  }
};
__name(VimeoExtractor, "VimeoExtractor");
VimeoExtractor.identifier = "com.discord-player.vimeoextractor";

// src/extractors/ReverbnationExtractor.ts
var import_discord_player4 = require("discord-player");
var import_reverbnation_scraper = __toESM(require("reverbnation-scraper"));
var ReverbnationExtractor = class extends import_discord_player4.BaseExtractor {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [import_discord_player4.QueryType.REVERBNATION].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player4.QueryType.REVERBNATION: {
        const trackInfo = await import_reverbnation_scraper.default.getInfo(query).catch(import_discord_player4.Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new import_discord_player4.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player4.Util.buildTimeCode(import_discord_player4.Util.parseMS(trackInfo.duration)),
          description: trackInfo.lyrics || `${trackInfo.title} by ${trackInfo.artist.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.artist.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.streamURL,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await import_reverbnation_scraper.default.getInfo(info.url).catch(import_discord_player4.Util.noop);
    if (!track || !track.streamURL)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.streamURL
    };
    return track.streamURL;
  }
};
__name(ReverbnationExtractor, "ReverbnationExtractor");
ReverbnationExtractor.identifier = "com.discord-player.reverbnationextractor";

// src/extractors/AttachmentExtractor.ts
var import_discord_player5 = require("discord-player");
var import_fs = require("fs");

// src/internal/downloader.ts
var import_http2 = __toESM(require("http"));
var import_https2 = __toESM(require("https"));
function downloadStream(url, opts = {}) {
  return new Promise((resolve, reject) => {
    const lib = url.startsWith("http://") ? import_http2.default : import_https2.default;
    lib.get(url, opts, (res) => resolve(res)).once("error", reject);
  });
}
__name(downloadStream, "downloadStream");

// src/extractors/AttachmentExtractor.ts
var fileType = __toESM(require("file-type"));
var import_path = __toESM(require("path"));
var import_promises = require("fs/promises");
var AttachmentExtractor = class extends import_discord_player5.BaseExtractor {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [import_discord_player5.QueryType.ARBITRARY, import_discord_player5.QueryType.FILE].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player5.QueryType.ARBITRARY: {
        const data = await downloadStream(query, context.requestOptions);
        if (!["audio/", "video/"].some((r) => !!data.headers["content-type"]?.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: (query.split("/").filter((x) => x.length).pop() ?? "Attachment").split("?")[0].trim(),
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: data.client?.servername || "Attachment",
          description: data.client?.servername || "Attachment",
          url: data.url || query
        };
        const track = new import_discord_player5.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player5.Util.buildTimeCode(import_discord_player5.Util.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = false;
        return { playlist: null, tracks: [track] };
      }
      case import_discord_player5.QueryType.FILE: {
        if (!(0, import_fs.existsSync)(query))
          return this.emptyResponse();
        const fstat = await (0, import_promises.stat)(query);
        if (!fstat.isFile())
          return this.emptyResponse();
        const mime = await fileType.fromFile(query).catch(() => null);
        if (!mime || !["audio/", "video/"].some((r) => !!mime.mime.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: import_path.default.basename(query) || "Attachment",
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: "Attachment",
          description: "Attachment",
          url: query
        };
        const track = new import_discord_player5.Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: import_discord_player5.Util.buildTimeCode(import_discord_player5.Util.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = true;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    const isFile = info.raw.isFile;
    if (!engine)
      throw new Error("Could not find stream source");
    if (!isFile) {
      return engine;
    }
    return (0, import_fs.createReadStream)(engine);
  }
};
__name(AttachmentExtractor, "AttachmentExtractor");
AttachmentExtractor.identifier = "com.discord-player.attachmentextractor";

// src/extractors/AppleMusicExtractor.ts
var import_discord_player7 = require("discord-player");

// src/internal/index.ts
var internal_exports = {};
__export(internal_exports, {
  AppleMusic: () => AppleMusic,
  SpotifyAPI: () => SpotifyAPI,
  Vimeo: () => Vimeo,
  downloadStream: () => downloadStream
});

// src/internal/AppleMusic.ts
var import_discord_player6 = require("discord-player");
var import_node_html_parser = require("node-html-parser");
function getHTML(link) {
  return getFetch(link, {
    headers: {
      "User-Agent": UA
    }
  }).then((r) => r.text()).then(
    (txt) => (0, import_node_html_parser.parse)(txt),
    () => null
  );
}
__name(getHTML, "getHTML");
function makeImage({ height, url, width, ext = "jpg" }) {
  return url.replace("{w}", `${width}`).replace("{h}", `${height}`).replace("{f}", ext);
}
__name(makeImage, "makeImage");
function parseDuration(d) {
  const r = /* @__PURE__ */ __name((name, unit) => `((?<${name}>-?\\d*[\\.,]?\\d+)${unit})?`, "r");
  const regex = new RegExp(
    [
      "(?<negative>-)?P",
      r("years", "Y"),
      r("months", "M"),
      r("weeks", "W"),
      r("days", "D"),
      "(T",
      r("hours", "H"),
      r("minutes", "M"),
      r("seconds", "S"),
      ")?"
    ].join("")
  );
  const test = regex.exec(d);
  if (!test || !test.groups)
    return "0:00";
  const dur = [test.groups.years, test.groups.months, test.groups.weeks, test.groups.days, test.groups.hours, test.groups.minutes, test.groups.seconds];
  return dur.filter((r2, i, a) => !!r2 || i > a.length - 2).map((m, i) => {
    if (!m)
      m = "0";
    return i < 1 ? m : m.padStart(2, "0");
  }).join(":") || "0:00";
}
__name(parseDuration, "parseDuration");
var AppleMusic = class {
  constructor() {
    return AppleMusic;
  }
  static async search(query) {
    try {
      const url = `https://music.apple.com/us/search?term=${encodeURIComponent(query)}`;
      const node = await getHTML(url);
      if (!node)
        return [];
      const rawData = node.getElementById("serialized-server-data");
      if (!rawData)
        return [];
      const data = JSON.parse(rawData.innerText)[0].data.sections;
      const tracks = data.find((s) => s.itemKind === "trackLockup")?.items;
      if (!tracks)
        return [];
      return tracks.map((track) => ({
        id: track.contentDescriptor.identifiers.storeAdamID,
        duration: track.duration || "0:00",
        title: track.title,
        url: track.contentDescriptor.url,
        thumbnail: track?.artwork?.dictionary ? makeImage({
          url: track.artwork.dictionary.url,
          height: track.artwork.dictionary.height,
          width: track.artwork.dictionary.width
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: track.subtitleLinks?.[0]?.title ?? "Unknown Artist"
        }
      }));
    } catch {
      return [];
    }
  }
  static async getSongInfoFallback(res, name, id, link) {
    try {
      const metaTags = res.getElementsByTagName("meta");
      if (!metaTags.length)
        return null;
      const title = metaTags.find((r) => r.getAttribute("name") === "apple:title")?.getAttribute("content") || res.querySelector("title")?.innerText || name;
      const contentId = metaTags.find((r) => r.getAttribute("name") === "apple:content_id")?.getAttribute("content") || id;
      const durationRaw = metaTags.find((r) => r.getAttribute("property") === "music:song:duration")?.getAttribute("content");
      const song = {
        id: contentId,
        duration: durationRaw ? parseDuration(durationRaw) : metaTags.find((m) => m.getAttribute("name") === "apple:description")?.textContent.split("Duration: ")?.[1].split('"')?.[0] || "0:00",
        title,
        url: link,
        thumbnail: metaTags.find((r) => ["og:image:secure_url", "og:image"].includes(r.getAttribute("property")))?.getAttribute("content") || "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: res.querySelector(".song-subtitles__artists>a")?.textContent?.trim() || "Apple Music"
        }
      };
      return song;
    } catch {
      return null;
    }
  }
  static async getSongInfo(link) {
    if (!import_discord_player6.QueryResolver.regex.appleMusicSongRegex.test(link)) {
      return null;
    }
    const url = new URL(link);
    const id = url.searchParams.get("i");
    const name = url.pathname.split("album/")[1]?.split("/")[0];
    if (!id || !name)
      return null;
    const res = await getHTML(`https://music.apple.com/us/song/${name}/${id}`);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const data = JSON.parse(datasrc)[0].data.seoData;
      const song = data.ogSongs[0]?.attributes;
      return {
        id: data.ogSongs[0]?.id || data.appleContentId || id,
        duration: song?.durationInMillis || "0:00",
        title: song?.name || data.appleTitle,
        url: song?.url || data.url || link,
        thumbnail: song?.artwork ? makeImage({
          url: song.artwork.url,
          height: song.artwork.height,
          width: song.artwork.width
        }) : data.artworkUrl ? makeImage({
          height: data.height,
          width: data.width,
          url: data.artworkUrl,
          ext: data.fileType || "jpg"
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: song?.artistName || data.socialTitle || "Apple Music"
        }
      };
    } catch {
      return this.getSongInfoFallback(res, name, id, link);
    }
  }
  static async getPlaylistInfo(link) {
    if (!import_discord_player6.QueryResolver.regex.appleMusicPlaylistRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: pl.ogSongs?.map((m) => {
          const song = m.attributes;
          return {
            id: m.id,
            duration: song.durationInMillis || "0:00",
            title: song.name,
            url: song.url,
            thumbnail: song.artwork ? makeImage({
              url: song.artwork.url,
              height: song.artwork.height,
              width: song.artwork.width
            }) : thumbnail,
            artist: {
              name: song.artistName || "Apple Music"
            }
          };
        }) || []
      };
    } catch {
      return null;
    }
  }
  static async getAlbumInfo(link) {
    if (!import_discord_player6.QueryResolver.regex.appleMusicAlbumRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: pl.ogSongs?.map((m) => {
          const song = m.attributes;
          return {
            id: m.id,
            duration: song.durationInMillis || "0:00",
            title: song.name,
            url: song.url,
            thumbnail: song.artwork ? makeImage({
              url: song.artwork.url,
              height: song.artwork.height,
              width: song.artwork.width
            }) : thumbnail,
            artist: {
              name: song.artistName || "Apple Music"
            }
          };
        }) || []
      };
    } catch {
      return null;
    }
  }
};
__name(AppleMusic, "AppleMusic");

// src/internal/Spotify.ts
var SP_ANON_TOKEN_URL = "https://open.spotify.com/get_access_token?reason=transport&productType=embed";
var SP_ACCESS_TOKEN_URL = "https://accounts.spotify.com/api/token?grant_type=client_credentials";
var SP_BASE = "https://api.spotify.com/v1";
var SpotifyAPI = class {
  constructor(credentials = {
    clientId: null,
    clientSecret: null
  }) {
    this.credentials = credentials;
    this.accessToken = null;
  }
  get authorizationKey() {
    if (!this.credentials.clientId || !this.credentials.clientSecret)
      return null;
    return Buffer.from(`${this.credentials.clientId}:${this.credentials.clientSecret}`).toString("base64");
  }
  async requestToken() {
    const key = this.authorizationKey;
    if (!key)
      return await this.requestAnonymousToken();
    try {
      const res = await getFetch(SP_ACCESS_TOKEN_URL, {
        method: "POST",
        headers: {
          "User-Agent": UA,
          Authorization: `Basic ${key}`,
          "Content-Type": "application/json"
        }
      });
      const body = await res.json();
      if (!body.access_token)
        throw "no token";
      const data = {
        token: body.access_token,
        expiresAfter: body.expires_in,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return await this.requestAnonymousToken();
    }
  }
  async requestAnonymousToken() {
    try {
      const res = await getFetch(SP_ANON_TOKEN_URL, {
        headers: {
          "User-Agent": UA,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        throw "not_ok";
      const body = await res.json();
      if (!body.accessToken)
        throw "no_access_token";
      const data = {
        token: body.accessToken,
        expiresAfter: body.accessTokenExpirationTimestampMs,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return null;
    }
  }
  isTokenExpired() {
    if (!this.accessToken)
      return true;
    return Date.now() > this.accessToken.expiresAfter;
  }
  async search(query) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/search/?q=${encodeURIComponent(query)}&type=track&market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      return data.tracks.items.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
    } catch {
      return null;
    }
  }
  async getPlaylist(id) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/playlists/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      if (!data.tracks.items.length)
        return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await getFetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok)
            break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next)
            break;
        } catch {
          break;
        }
      }
      const tracks = t.map(({ track: m }) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
      if (!tracks.length)
        return null;
      return {
        name: data.name,
        author: data.owner.display_name,
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/playlist/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
  async getAlbum(id) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/albums/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      if (!data.tracks.items.length)
        return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await getFetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok)
            break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next)
            break;
        } catch {
          break;
        }
      }
      const tracks = t.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: data.images?.[0]?.url || null
      }));
      if (!tracks.length)
        return null;
      return {
        name: data.name,
        author: data.artists.map((m) => m.name).join(", "),
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/album/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
};
__name(SpotifyAPI, "SpotifyAPI");

// src/extractors/AppleMusicExtractor.ts
var AppleMusicExtractor = class extends import_discord_player7.BaseExtractor {
  constructor() {
    super(...arguments);
    this._isYtdl = false;
  }
  async activate() {
    if (this.options.bridgeProvider)
      return;
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._isYtdl = false;
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const lib = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = lib.stream;
    this._isYtdl = true;
  }
  async validate(query, type) {
    return [
      import_discord_player7.QueryType.APPLE_MUSIC_ALBUM,
      import_discord_player7.QueryType.APPLE_MUSIC_PLAYLIST,
      import_discord_player7.QueryType.APPLE_MUSIC_SONG,
      import_discord_player7.QueryType.APPLE_MUSIC_SEARCH,
      import_discord_player7.QueryType.AUTO,
      import_discord_player7.QueryType.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    if (track.queryType === import_discord_player7.QueryType.APPLE_MUSIC_SONG)
      return this.handle(track.author || track.title, {
        type: import_discord_player7.QueryType.APPLE_MUSIC_SEARCH,
        requestedBy: track.requestedBy
      });
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player7.QueryType.AUTO:
      case import_discord_player7.QueryType.AUTO_SEARCH:
      case import_discord_player7.QueryType.APPLE_MUSIC_SEARCH: {
        const data = await AppleMusic.search(query);
        if (!data || !data.length)
          return this.createResponse();
        const tracks = data.map(
          (m) => {
            const track = new import_discord_player7.Track(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.extractor = this;
            return track;
          }
        );
        return this.createResponse(null, tracks);
      }
      case import_discord_player7.QueryType.APPLE_MUSIC_ALBUM: {
        const info = await AppleMusic.getAlbumInfo(query);
        if (!info)
          return this.createResponse();
        const playlist = new import_discord_player7.Playlist(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "album",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new import_discord_player7.Track(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: info,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: info,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case import_discord_player7.QueryType.APPLE_MUSIC_PLAYLIST: {
        const info = await AppleMusic.getPlaylistInfo(query);
        if (!info)
          return this.createResponse();
        const playlist = new import_discord_player7.Playlist(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "playlist",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new import_discord_player7.Track(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case import_discord_player7.QueryType.APPLE_MUSIC_SONG: {
        const info = await AppleMusic.getSongInfo(query);
        if (!info)
          return this.createResponse();
        const track = new import_discord_player7.Track(this.context.player, {
          author: info.artist.name,
          description: info.title,
          duration: typeof info.duration === "number" ? import_discord_player7.Util.buildTimeCode(import_discord_player7.Util.parseMS(info.duration)) : info.duration,
          thumbnail: info.thumbnail,
          title: info.title,
          url: info.url,
          views: 0,
          source: "apple_music",
          requestedBy: context.requestedBy,
          queryType: context.type,
          metadata: {
            source: info,
            bridge: null
          },
          requestMetadata: async () => {
            return {
              source: info,
              bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
            };
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (this.options.bridgeProvider) {
      const provider = this.options.bridgeProvider;
      const data = await provider.resolve(this, info);
      if (!data)
        throw new Error("Failed to bridge this track");
      info.setMetadata({
        ...info.metadata || {},
        bridge: data.data
      });
      return await provider.stream(data);
    }
    if (!this._stream) {
      throw new Error(`Could not initialize streaming api for '${this.constructor.name}'`);
    }
    let url = info.url;
    if (this._isYtdl) {
      if (YoutubeExtractor.validateURL(info.raw.url))
        url = info.raw.url;
      else {
        const meta = await pullYTMetadata(this, info);
        if (meta)
          info.setMetadata({
            ...info.metadata || {},
            bridge: meta
          });
        const _url = meta?.url;
        if (!_url)
          throw new Error("Failed to fetch resources for ytdl streaming");
        info.raw.url = url = _url;
      }
    }
    return this._stream(url);
  }
};
__name(AppleMusicExtractor, "AppleMusicExtractor");
AppleMusicExtractor.identifier = "com.discord-player.applemusicextractor";

// src/extractors/SpotifyExtractor.ts
var import_discord_player8 = require("discord-player");
var import_spotify_url_info = __toESM(require("spotify-url-info"));
var re = /^(?:https:\/\/open\.spotify\.com\/(intl-([a-z]|[A-Z]){0,3}\/)?(?:user\/[A-Za-z0-9]+\/)?|spotify:)(album|playlist|track)(?:[/:])([A-Za-z0-9]+).*$/;
var SpotifyExtractor = class extends import_discord_player8.BaseExtractor {
  constructor() {
    super(...arguments);
    this._isYtdl = false;
    this._credentials = {
      clientId: this.options.clientId || process.env.DP_SPOTIFY_CLIENT_ID || null,
      clientSecret: this.options.clientSecret || process.env.DP_SPOTIFY_CLIENT_SECRET || null
    };
    this.internal = new SpotifyAPI(this._credentials);
  }
  async activate() {
    if (this.options.bridgeProvider)
      return;
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._isYtdl = false;
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const lib = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = lib.stream;
    this._lib = (0, import_spotify_url_info.default)(getFetch);
    this._isYtdl = true;
    if (this.internal.isTokenExpired())
      await this.internal.requestToken();
  }
  async validate(query, type) {
    return [
      import_discord_player8.QueryType.SPOTIFY_ALBUM,
      import_discord_player8.QueryType.SPOTIFY_PLAYLIST,
      import_discord_player8.QueryType.SPOTIFY_SONG,
      import_discord_player8.QueryType.SPOTIFY_SEARCH,
      import_discord_player8.QueryType.AUTO,
      import_discord_player8.QueryType.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    return await this.handle(track.author || track.title, {
      type: import_discord_player8.QueryType.SPOTIFY_SEARCH,
      requestedBy: track.requestedBy
    });
  }
  async handle(query, context) {
    switch (context.type) {
      case import_discord_player8.QueryType.AUTO:
      case import_discord_player8.QueryType.AUTO_SEARCH:
      case import_discord_player8.QueryType.SPOTIFY_SEARCH: {
        const data = await this.internal.search(query);
        if (!data)
          return this.createResponse();
        return this.createResponse(
          null,
          data.map((spotifyData) => {
            const track = new import_discord_player8.Track(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: import_discord_player8.QueryType.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.extractor = this;
            return track;
          })
        );
      }
      case import_discord_player8.QueryType.SPOTIFY_SONG: {
        const spotifyData = await this._lib.getData(query, context.requestOptions).catch(import_discord_player8.Util.noop);
        if (!spotifyData)
          return { playlist: null, tracks: [] };
        const spotifyTrack = new import_discord_player8.Track(this.context.player, {
          title: spotifyData.title,
          description: `${spotifyData.name} by ${spotifyData.artists.map((m) => m.name).join(", ")}`,
          author: spotifyData.artists[0]?.name ?? "Unknown Artist",
          url: spotifyData.id ? `https://open.spotify.com/track/${spotifyData.id}` : query,
          thumbnail: spotifyData.coverArt?.sources?.[0]?.url || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
          duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? spotifyData.maxDuration ?? 0)),
          views: 0,
          requestedBy: context.requestedBy,
          source: "spotify",
          queryType: context.type,
          metadata: {
            source: spotifyData,
            bridge: null
          },
          requestMetadata: async () => {
            return {
              source: spotifyData,
              bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, spotifyTrack)).data : await pullYTMetadata(this, spotifyTrack)
            };
          }
        });
        spotifyTrack.extractor = this;
        return { playlist: null, tracks: [spotifyTrack] };
      }
      case import_discord_player8.QueryType.SPOTIFY_PLAYLIST: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "playlist")
            throw "err";
          const spotifyPlaylist = await this.internal.getPlaylist(id);
          if (!spotifyPlaylist)
            throw "err";
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: spotifyPlaylist.name,
            description: spotifyPlaylist.name ?? "",
            thumbnail: spotifyPlaylist.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "playlist",
            source: "spotify",
            author: {
              name: spotifyPlaylist.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.url || query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.tracks.map((spotifyData) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: import_discord_player8.QueryType.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const spotifyPlaylist = await this._lib.getData(query, context.requestOptions).catch(import_discord_player8.Util.noop);
          if (!spotifyPlaylist)
            return { playlist: null, tracks: [] };
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: spotifyPlaylist.name ?? spotifyPlaylist.title,
            description: spotifyPlaylist.title ?? "",
            thumbnail: spotifyPlaylist.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: spotifyPlaylist.type,
            source: "spotify",
            author: {
              name: spotifyPlaylist.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.id ? `https://open.spotify.com/playlist/${spotifyPlaylist.id}` : query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.trackList.map((m) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      case import_discord_player8.QueryType.SPOTIFY_ALBUM: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "album")
            throw "err";
          const spotifyAlbum = await this.internal.getAlbum(id);
          if (!spotifyAlbum)
            throw "err";
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: spotifyAlbum.name,
            description: spotifyAlbum.name ?? "",
            thumbnail: spotifyAlbum.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "album",
            source: "spotify",
            author: {
              name: spotifyAlbum.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyAlbum.id,
            url: spotifyAlbum.url || query,
            rawPlaylist: spotifyAlbum
          });
          playlist.tracks = spotifyAlbum.tracks.map((spotifyData) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: import_discord_player8.QueryType.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const album = await this._lib.getData(query, context.requestOptions).catch(import_discord_player8.Util.noop);
          if (!album)
            return { playlist: null, tracks: [] };
          const playlist = new import_discord_player8.Playlist(this.context.player, {
            title: album.name ?? album.title,
            description: album.title ?? "",
            thumbnail: album.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: album.type,
            source: "spotify",
            author: {
              name: album.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: album.id,
            url: album.id ? `https://open.spotify.com/playlist/${album.id}` : query,
            rawPlaylist: album
          });
          playlist.tracks = album.trackList.map((m) => {
            const data = new import_discord_player8.Track(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: import_discord_player8.Util.buildTimeCode(import_discord_player8.Util.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (this.options.bridgeProvider) {
      const provider = this.options.bridgeProvider;
      const data = await provider.resolve(this, info);
      if (!data)
        throw new Error("Failed to bridge this track");
      info.setMetadata({
        ...info.metadata || {},
        bridge: data.data
      });
      return await provider.stream(data);
    }
    if (!this._stream) {
      throw new Error(`Could not initialize streaming api for '${this.constructor.name}'`);
    }
    let url = info.url;
    if (this._isYtdl) {
      if (YoutubeExtractor.validateURL(info.raw.url))
        url = info.raw.url;
      else {
        const meta = await pullYTMetadata(this, info);
        if (meta)
          info.setMetadata({
            ...info.metadata || {},
            bridge: meta
          });
        const _url = meta?.url;
        if (!_url)
          throw new Error("Failed to fetch resources for ytdl streaming");
        info.raw.url = url = _url;
      }
    }
    return this._stream(url);
  }
  parse(q) {
    const [, , , queryType, id] = re.exec(q) || [];
    return { queryType, id };
  }
};
__name(SpotifyExtractor, "SpotifyExtractor");
SpotifyExtractor.identifier = "com.discord-player.spotifyextractor";

// src/extractors/common/BridgeProvider.ts
var BridgeSource = /* @__PURE__ */ ((BridgeSource2) => {
  BridgeSource2["SoundCloud"] = "soundcloud";
  BridgeSource2["YouTube"] = "youtube";
  return BridgeSource2;
})(BridgeSource || {});
var BridgeProvider = class {
  constructor(source) {
    this.bridgeSource = "soundcloud" /* SoundCloud */;
    this.setBridgeSource(source);
  }
  setBridgeSource(source) {
    switch (source) {
      case "soundcloud":
      case "soundcloud" /* SoundCloud */:
        this.bridgeSource = "soundcloud" /* SoundCloud */;
        break;
      case "youtube":
      case "youtube" /* YouTube */:
        this.bridgeSource = "youtube" /* YouTube */;
        break;
      default:
        throw new TypeError("invalid bridge source");
    }
  }
  isSoundCloud() {
    return this.bridgeSource === "soundcloud" /* SoundCloud */;
  }
  isYouTube() {
    return this.bridgeSource === "youtube" /* YouTube */;
  }
  async resolve(ext, track) {
    const isSoundcloud = this.isSoundCloud();
    const bridgefn = isSoundcloud ? pullSCMetadata : pullYTMetadata;
    const oldQc = ext.createBridgeQuery;
    if (isSoundcloud)
      ext.createBridgeQuery = (track2) => `${track2.author} ${track2.title}`;
    const res = await bridgefn(ext, track);
    ext.createBridgeQuery = oldQc;
    return { source: isSoundcloud ? "soundcloud" : "youtube", data: res };
  }
  async stream(meta) {
    if (meta.source === "soundcloud") {
      if (!SoundCloudExtractor.soundcloud) {
        throw new Error("Could not find soundcloud client, make sure SoundCloudExtractor is instantiated properly.");
      }
      return await SoundCloudExtractor.soundcloud.util.streamLink(meta.data, "progressive");
    } else {
      const ytdl = await loadYtdl();
      return ytdl.stream(meta.data.url);
    }
  }
};
__name(BridgeProvider, "BridgeProvider");

// src/index.ts
var version = "4.4.0";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AppleMusicExtractor,
  AttachmentExtractor,
  BridgeProvider,
  BridgeSource,
  Internal,
  ReverbnationExtractor,
  SoundCloudExtractor,
  SpotifyExtractor,
  UA,
  VimeoExtractor,
  YouTubeExtractor,
  YouTubeLibs,
  YoutubeExtractor,
  createImport,
  getFetch,
  loadYtdl,
  lyricsExtractor,
  makeSCSearch,
  makeYTSearch,
  pullSCMetadata,
  pullYTMetadata,
  version
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL1NvdW5kQ2xvdWRFeHRyYWN0b3IudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvWW91dHViZUV4dHJhY3Rvci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9jb21tb24vaGVscGVyLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL0x5cmljc0V4dHJhY3Rvci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9WaW1lb0V4dHJhY3Rvci50cyIsICIuLi9zcmMvaW50ZXJuYWwvVmltZW8udHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvUmV2ZXJibmF0aW9uRXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL0F0dGFjaG1lbnRFeHRyYWN0b3IudHMiLCAiLi4vc3JjL2ludGVybmFsL2Rvd25sb2FkZXIudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvQXBwbGVNdXNpY0V4dHJhY3Rvci50cyIsICIuLi9zcmMvaW50ZXJuYWwvaW5kZXgudHMiLCAiLi4vc3JjL2ludGVybmFsL0FwcGxlTXVzaWMudHMiLCAiLi4vc3JjL2ludGVybmFsL1Nwb3RpZnkudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvU3BvdGlmeUV4dHJhY3Rvci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9jb21tb24vQnJpZGdlUHJvdmlkZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCAqIGZyb20gJy4vZXh0cmFjdG9ycyc7XG5leHBvcnQgKiBhcyBJbnRlcm5hbCBmcm9tICcuL2ludGVybmFsJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1pbmZlcnJhYmxlLXR5cGVzXG5leHBvcnQgY29uc3QgdmVyc2lvbjogc3RyaW5nID0gJzQuNC4wJztcbiIsICIvLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7XG4gICAgQmFzZUV4dHJhY3RvcixcbiAgICBFeHRyYWN0b3JJbmZvLFxuICAgIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gICAgUGxheWxpc3QsXG4gICAgUXVlcnlUeXBlLFxuICAgIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgICBUcmFjayxcbiAgICBVdGlsXG59IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCAqIGFzIFNvdW5kQ2xvdWQgZnJvbSAnc291bmRjbG91ZC50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU291bmRDbG91ZEV4dHJhY3RvckluaXQge1xuICAgIGNsaWVudElkPzogc3RyaW5nO1xuICAgIG9hdXRoVG9rZW4/OiBzdHJpbmc7XG4gICAgcHJveHk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTb3VuZENsb3VkRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvcjxTb3VuZENsb3VkRXh0cmFjdG9ySW5pdD4ge1xuICAgIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9ICdjb20uZGlzY29yZC1wbGF5ZXIuc291bmRjbG91ZGV4dHJhY3RvcicgYXMgY29uc3Q7XG5cbiAgICBwdWJsaWMgc3RhdGljIHNvdW5kY2xvdWQ6IGltcG9ydCgnc291bmRjbG91ZC50cycpLmRlZmF1bHQgfCBudWxsID0gbnVsbDtcblxuICAgIHB1YmxpYyBpbnRlcm5hbCA9IG5ldyBTb3VuZENsb3VkLmRlZmF1bHQoe1xuICAgICAgICBjbGllbnRJZDogdGhpcy5vcHRpb25zLmNsaWVudElkLFxuICAgICAgICBvYXV0aFRva2VuOiB0aGlzLm9wdGlvbnMub2F1dGhUb2tlbixcbiAgICAgICAgcHJveHk6IHRoaXMub3B0aW9ucy5wcm94eVxuICAgIH0pO1xuXG4gICAgcHVibGljIGFzeW5jIGFjdGl2YXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBTb3VuZENsb3VkRXh0cmFjdG9yLnNvdW5kY2xvdWQgPSB0aGlzLmludGVybmFsO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB2YWxpZGF0ZShxdWVyeTogc3RyaW5nLCB0eXBlPzogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgcmV0dXJuIChbXG4gICAgICAgICAgICBRdWVyeVR5cGUuU09VTkRDTE9VRCxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5TT1VORENMT1VEX1BMQVlMSVNULFxuICAgICAgICAgICAgUXVlcnlUeXBlLlNPVU5EQ0xPVURfU0VBUkNILFxuICAgICAgICAgICAgUXVlcnlUeXBlLlNPVU5EQ0xPVURfVFJBQ0ssXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVVUTyxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BVVRPX1NFQVJDSFxuICAgICAgICBdIGFzIFNlYXJjaFF1ZXJ5VHlwZVtdKS5zb21lKChyKSA9PiByID09PSB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICAgICAgaWYgKHRyYWNrLnF1ZXJ5VHlwZSA9PT0gUXVlcnlUeXBlLlNPVU5EQ0xPVURfVFJBQ0spXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUodHJhY2suYXV0aG9yIHx8IHRyYWNrLnRpdGxlLCB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IHRyYWNrLnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIHR5cGU6IFF1ZXJ5VHlwZS5TT1VORENMT1VEX1NFQVJDSFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlNPVU5EQ0xPVURfVFJBQ0s6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja0luZm8gPSBhd2FpdCB0aGlzLmludGVybmFsLnRyYWNrcy5nZXRWMihxdWVyeSkuY2F0Y2goVXRpbC5ub29wKTtcblxuICAgICAgICAgICAgICAgIGlmICghdHJhY2tJbmZvKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdHJhY2tJbmZvLnBlcm1hbGlua191cmwsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHRyYWNrSW5mby5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhY2tJbmZvLmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby5hcnR3b3JrX3VybCxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHRyYWNrSW5mby5wbGF5YmFja19jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB0cmFja0luZm8udXNlci51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3NvdW5kY2xvdWQnLFxuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB0cmFja0luZm8sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlNPVU5EQ0xPVURfUExBWUxJU1Q6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5pbnRlcm5hbC5wbGF5bGlzdHMuZ2V0VjIocXVlcnkpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGRhdGEuYXJ0d29ya191cmwgPz8gZGF0YS50cmFja3NbMF0uYXJ0d29ya191cmwsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwbGF5bGlzdCcsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3NvdW5kY2xvdWQnLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEudXNlci51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogZGF0YS51c2VyLnBlcm1hbGlua191cmxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGAke2RhdGEuaWR9YCxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBkYXRhLnBlcm1hbGlua191cmwsXG4gICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBkYXRhXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNvbmcgb2YgZGF0YS50cmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNvbmcudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc29uZy5kZXNjcmlwdGlvbiA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogc29uZy51c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb25nLnBlcm1hbGlua191cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNvbmcuYXJ0d29ya191cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhzb25nLmR1cmF0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3czogc29uZy5wbGF5YmFja19jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Q6IHJlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3NvdW5kY2xvdWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lOiBzb25nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogc29uZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb25nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdHJhY2sucGxheWxpc3QgPSByZXM7XG4gICAgICAgICAgICAgICAgICAgIHJlcy50cmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IHJlcywgdHJhY2tzOiByZXMudHJhY2tzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gYXdhaXQgdGhpcy5pbnRlcm5hbC50cmFja3Muc2VhcmNoVjIoeyBxOiBxdWVyeSB9KS5jYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgICAgIGlmICghdHJhY2tzIHx8ICF0cmFja3MuY29sbGVjdGlvbi5sZW5ndGgpIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkVHJhY2tzOiBUcmFja1tdID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrSW5mbyBvZiB0cmFja3MuY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2tJbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8ucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHRyYWNrSW5mby5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYWNrSW5mby5kZXNjcmlwdGlvbiA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdHJhY2tJbmZvLmFydHdvcmtfdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IHRyYWNrSW5mby5wbGF5YmFja19jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogdHJhY2tJbmZvLnVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3NvdW5kY2xvdWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8sXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6ICdzb3VuZGNsb3VkVHJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFja0luZm87XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRUcmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogcmVzb2x2ZWRUcmFja3MgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdHJlYW0oaW5mbzogVHJhY2spIHtcbiAgICAgICAgY29uc3QgdXJsID0gYXdhaXQgdGhpcy5pbnRlcm5hbC51dGlsLnN0cmVhbUxpbmsoaW5mby51cmwpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IHN0cmVhbSBmcm9tIHRoaXMgdHJhY2sgc291cmNlJyk7XG5cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgVmlkZW8sIFlvdVR1YmUgfSBmcm9tICd5b3V0dWJlLXNyJztcblxuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge1xuICAgIEJhc2VFeHRyYWN0b3IsXG4gICAgRXh0cmFjdG9ySW5mbyxcbiAgICBFeHRyYWN0b3JTZWFyY2hDb250ZXh0LFxuICAgIFBsYXlsaXN0LFxuICAgIFF1ZXJ5VHlwZSxcbiAgICBTZWFyY2hRdWVyeVR5cGUsXG4gICAgVHJhY2ssXG4gICAgVXRpbFxufSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5cbmltcG9ydCB7IFN0cmVhbUZOLCBZb3VUdWJlTGlicywgbG9hZFl0ZGwsIG1ha2VZVFNlYXJjaCB9IGZyb20gJy4vY29tbW9uL2hlbHBlcic7XG5pbXBvcnQgdHlwZSB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcblxuLy8gdGFrZW4gZnJvbSB5dGRsLWNvcmVcbmNvbnN0IHZhbGlkUXVlcnlEb21haW5zID0gbmV3IFNldChbJ3lvdXR1YmUuY29tJywgJ3d3dy55b3V0dWJlLmNvbScsICdtLnlvdXR1YmUuY29tJywgJ211c2ljLnlvdXR1YmUuY29tJywgJ2dhbWluZy55b3V0dWJlLmNvbSddKTtcbmNvbnN0IHZhbGlkUGF0aERvbWFpbnMgPSAvXmh0dHBzPzpcXC9cXC8oeW91dHVcXC5iZVxcL3wod3d3XFwuKT95b3V0dWJlXFwuY29tXFwvKGVtYmVkfHZ8c2hvcnRzKVxcLykvO1xuY29uc3QgaWRSZWdleCA9IC9eW2EtekEtWjAtOS1fXXsxMX0kLztcblxuZXhwb3J0IGludGVyZmFjZSBZb3V0dWJlRXh0cmFjdG9ySW5pdCB7XG4gICAgY3JlYXRlU3RyZWFtPzogKGV4dDogWW91dHViZUV4dHJhY3RvciwgdXJsOiBzdHJpbmcpID0+IFByb21pc2U8UmVhZGFibGUgfCBzdHJpbmc+O1xufVxuXG5leHBvcnQgY2xhc3MgWW91dHViZUV4dHJhY3RvciBleHRlbmRzIEJhc2VFeHRyYWN0b3I8WW91dHViZUV4dHJhY3RvckluaXQ+IHtcbiAgICBwdWJsaWMgc3RhdGljIGlkZW50aWZpZXIgPSAnY29tLmRpc2NvcmQtcGxheWVyLnlvdXR1YmVleHRyYWN0b3InIGFzIGNvbnN0O1xuICAgIHByaXZhdGUgX3N0cmVhbSE6IFN0cmVhbUZOO1xuICAgIHB1YmxpYyBfeXRMaWJOYW1lITogc3RyaW5nO1xuXG4gICAgcHVibGljIGFzeW5jIGFjdGl2YXRlKCkge1xuICAgICAgICBjb25zdCBmbiA9IHRoaXMub3B0aW9ucy5jcmVhdGVTdHJlYW07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fc3RyZWFtID0gKHE6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbih0aGlzLCBxKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgc3RyZWFtLCBuYW1lIH0gPSBhd2FpdCBsb2FkWXRkbCh0aGlzLmNvbnRleHQucGxheWVyLm9wdGlvbnMueXRkbE9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgIHRoaXMuX3l0TGliTmFtZSA9IG5hbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlKHF1ZXJ5OiBzdHJpbmcsIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICByZXR1cm4gKFtcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5ZT1VUVUJFLFxuICAgICAgICAgICAgUXVlcnlUeXBlLllPVVRVQkVfUExBWUxJU1QsXG4gICAgICAgICAgICBRdWVyeVR5cGUuWU9VVFVCRV9TRUFSQ0gsXG4gICAgICAgICAgICBRdWVyeVR5cGUuWU9VVFVCRV9WSURFTyxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BVVRPLFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFVVE9fU0VBUkNIXG4gICAgICAgIF0gYXMgU2VhcmNoUXVlcnlUeXBlW10pLnNvbWUoKHIpID0+IHIgPT09IHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBoYW5kbGUocXVlcnk6IHN0cmluZywgY29udGV4dDogRXh0cmFjdG9yU2VhcmNoQ29udGV4dCk6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmluY2x1ZGVzKCd5b3V0dWJlLmNvbScpID8gcXVlcnkucmVwbGFjZSgvKG0odXNpYyk/fGdhbWluZylcXC4vLCAnJykgOiBxdWVyeTtcbiAgICAgICAgaWYgKFlvdXR1YmVFeHRyYWN0b3IudmFsaWRhdGVVUkwocXVlcnkpKSBjb250ZXh0LnR5cGUgPSBRdWVyeVR5cGUuWU9VVFVCRV9WSURFTztcblxuICAgICAgICBzd2l0Y2ggKGNvbnRleHQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuWU9VVFVCRV9QTEFZTElTVDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHl0cGwgPSBhd2FpdCBZb3VUdWJlLmdldFBsYXlsaXN0KHF1ZXJ5LCB7XG4gICAgICAgICAgICAgICAgICAgIGZldGNoQWxsOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9uczogY29udGV4dC5yZXF1ZXN0T3B0aW9ucyBhcyB1bmtub3duIGFzIFJlcXVlc3RJbml0XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgICAgICAgICBpZiAoIXl0cGwpIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHl0cGwudGl0bGUhLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHl0cGwudGh1bWJuYWlsPy5kaXNwbGF5VGh1bWJuYWlsVVJMKCdtYXhyZXNkZWZhdWx0JykgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogeXRwbC50aXRsZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BsYXlsaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAneW91dHViZScsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogeXRwbC5jaGFubmVsIS5uYW1lIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogeXRwbC5jaGFubmVsIS51cmwgYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgICAgICAgIGlkOiB5dHBsLmlkIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB5dHBsLnVybCBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiB5dHBsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50cmFja3MgPSB5dHBsLnZpZGVvcy5tYXAoKHZpZGVvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB2aWRlby50aXRsZSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdmlkZW8uZGVzY3JpcHRpb24gYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB2aWRlby5jaGFubmVsPy5uYW1lIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdmlkZW8udXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHZpZGVvLnRodW1ibmFpbCEudXJsIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiB2aWRlby52aWV3cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB2aWRlby5kdXJhdGlvbkZvcm1hdHRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdzogdmlkZW8sXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdDogcGxheWxpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICd5b3V0dWJlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3lvdXR1YmVWaWRlbycsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogdmlkZW8sXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZGVvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0cmFjay5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLllPVVRVQkVfVklERU86IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IC9bYS16QS1aMC05LV9dezExfS8uZXhlYyhxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpZD8uWzBdKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlkZW8gPSBhd2FpdCBZb3VUdWJlLmdldFZpZGVvKGBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PSR7aWR9YCwgY29udGV4dC5yZXF1ZXN0T3B0aW9ucyBhcyB1bmtub3duIGFzIFJlcXVlc3RJbml0KS5jYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgICAgIGlmICghdmlkZW8pIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICB2aWRlby5zb3VyY2UgPSAneW91dHViZSc7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB2aWRlby50aXRsZSEsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2aWRlby5kZXNjcmlwdGlvbiEsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjogdmlkZW8uY2hhbm5lbD8ubmFtZSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdmlkZW8udXJsLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiB2aWRlby50aHVtYm5haWw/LmRpc3BsYXlUaHVtYm5haWxVUkwoJ21heHJlc2RlZmF1bHQnKSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB2aWRlby52aWV3cyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHZpZGVvLmR1cmF0aW9uRm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICd5b3V0dWJlJyxcbiAgICAgICAgICAgICAgICAgICAgcmF3OiB2aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB2aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZGVvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrczogW3RyYWNrXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gYXdhaXQgdGhpcy5fbWFrZVlUU2VhcmNoKHF1ZXJ5LCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIF9tYWtlWVRTZWFyY2gocXVlcnk6IHN0cmluZywgY29udGV4dDogRXh0cmFjdG9yU2VhcmNoQ29udGV4dCkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBtYWtlWVRTZWFyY2gocXVlcnksIGNvbnRleHQucmVxdWVzdE9wdGlvbnMpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgIGlmICghcmVzIHx8ICFyZXMubGVuZ3RoKSByZXR1cm4gW107XG5cbiAgICAgICAgcmV0dXJuIHJlcy5tYXAoKHZpZGVvKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICB2aWRlby5zb3VyY2UgPSAneW91dHViZSc7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdmlkZW8udGl0bGUhLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2aWRlby5kZXNjcmlwdGlvbiEsXG4gICAgICAgICAgICAgICAgYXV0aG9yOiB2aWRlby5jaGFubmVsPy5uYW1lIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICB1cmw6IHZpZGVvLnVybCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHZpZGVvLnRodW1ibmFpbD8uZGlzcGxheVRodW1ibmFpbFVSTCgnbWF4cmVzZGVmYXVsdCcpIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICB2aWV3czogdmlkZW8udmlld3MsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHZpZGVvLmR1cmF0aW9uRm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogJ3lvdXR1YmUnLFxuICAgICAgICAgICAgICAgIHJhdzogdmlkZW8sXG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUhLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB2aWRlbyxcbiAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWRlbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICAgICAgbGV0IGluZm86IFZpZGVvW10gfCB2b2lkO1xuXG4gICAgICAgIGlmIChZb3V0dWJlRXh0cmFjdG9yLnZhbGlkYXRlVVJMKHRyYWNrLnVybCkpXG4gICAgICAgICAgICBpbmZvID0gYXdhaXQgWW91VHViZS5nZXRWaWRlbyh0cmFjay51cmwpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHgpID0+IHgudmlkZW9zKVxuICAgICAgICAgICAgICAgIC5jYXRjaChVdGlsLm5vb3ApO1xuXG4gICAgICAgIC8vIGZhbGxiYWNrXG4gICAgICAgIGlmICghaW5mbylcbiAgICAgICAgICAgIGluZm8gPSBhd2FpdCBZb3VUdWJlLnNlYXJjaCh0cmFjay5hdXRob3IgfHwgdHJhY2sudGl0bGUsIHsgbGltaXQ6IDUsIHR5cGU6ICd2aWRlbycgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoeCkgPT4geClcbiAgICAgICAgICAgICAgICAuY2F0Y2goVXRpbC5ub29wKTtcblxuICAgICAgICBpZiAoIWluZm8/Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpbWlsYXIgPSBpbmZvLm1hcCgodmlkZW8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB2aWRlby50aXRsZSEsXG4gICAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0ke3ZpZGVvLmlkfWAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHZpZGVvLmR1cmF0aW9uRm9ybWF0dGVkIHx8IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModmlkZW8uZHVyYXRpb24gKiAxMDAwKSksXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHZpZGVvLnRpdGxlISxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHR5cGVvZiB2aWRlby50aHVtYm5haWwgPT09ICdzdHJpbmcnID8gdmlkZW8udGh1bWJuYWlsISA6IHZpZGVvLnRodW1ibmFpbCEudXJsISxcbiAgICAgICAgICAgICAgICB2aWV3czogdmlkZW8udmlld3MsXG4gICAgICAgICAgICAgICAgYXV0aG9yOiB2aWRlby5jaGFubmVsIS5uYW1lISxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogdHJhY2sucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgc291cmNlOiAneW91dHViZScsXG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlOiAneW91dHViZVZpZGVvJyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogdmlkZW8sXG4gICAgICAgICAgICAgICAgYXN5bmMgcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlkZW87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHQuZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKG51bGwsIHNpbWlsYXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdHJlYW0oaW5mbzogVHJhY2spIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdHJlYW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgeW91dHViZSBzdHJlYW1pbmcgbGlicmFyeS4gSW5zdGFsbCBvbmUgb2YgJHtZb3VUdWJlTGlicy5qb2luKCcsICcpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHVybCA9IGluZm8udXJsO1xuICAgICAgICB1cmwgPSB1cmwuaW5jbHVkZXMoJ3lvdXR1YmUuY29tJykgPyB1cmwucmVwbGFjZSgvKG0odXNpYyk/fGdhbWluZylcXC4vLCAnJykgOiB1cmw7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmVhbSh1cmwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVVUkwobGluazogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBZb3V0dWJlRXh0cmFjdG9yLnBhcnNlVVJMKGxpbmspO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZUlkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGlkUmVnZXgudGVzdChpZC50cmltKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VVUkwobGluazogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBVUkwobGluay50cmltKCkpO1xuICAgICAgICBsZXQgaWQgPSBwYXJzZWQuc2VhcmNoUGFyYW1zLmdldCgndicpO1xuICAgICAgICBpZiAodmFsaWRQYXRoRG9tYWlucy50ZXN0KGxpbmsudHJpbSgpKSAmJiAhaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gcGFyc2VkLnBhdGhuYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICBpZCA9IHBhcnNlZC5ob3N0ID09PSAneW91dHUuYmUnID8gcGF0aHNbMV0gOiBwYXRoc1syXTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJzZWQuaG9zdG5hbWUgJiYgIXZhbGlkUXVlcnlEb21haW5zLmhhcyhwYXJzZWQuaG9zdG5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTm90IGEgWW91VHViZSBkb21haW4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgTm8gdmlkZW8gaWQgZm91bmQ6IFwiJHtsaW5rfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWQgPSBpZC5zdWJzdHJpbmcoMCwgMTEpO1xuICAgICAgICBpZiAoIXRoaXMudmFsaWRhdGVJZChpZCkpIHtcbiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgVmlkZW8gaWQgKCR7aWR9KSBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBgICsgYGZvcm1hdCAoJHtpZFJlZ2V4LnRvU3RyaW5nKCl9KWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFlvdXR1YmVFeHRyYWN0b3IgYXMgWW91VHViZUV4dHJhY3RvciB9O1xuIiwgImltcG9ydCB7IEJhc2VFeHRyYWN0b3IsIFRyYWNrIH0gZnJvbSAnZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHsgWW91VHViZSB9IGZyb20gJ3lvdXR1YmUtc3InO1xuaW1wb3J0IHsgU291bmRDbG91ZEV4dHJhY3RvciB9IGZyb20gJy4uL1NvdW5kQ2xvdWRFeHRyYWN0b3InO1xuXG5sZXQgZmFjdG9yeToge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdHJlYW06IFN0cmVhbUZOO1xuICAgIGxpYjogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUltcG9ydCA9IChsaWI6IHN0cmluZykgPT4gaW1wb3J0KGxpYikuY2F0Y2goKCkgPT4gbnVsbCk7XG5leHBvcnQgY29uc3QgVUEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwOS4wLjAuMCBTYWZhcmkvNTM3LjM2IEVkZy8xMDkuMC4xNTE4LjQ5JztcblxuZXhwb3J0IGNvbnN0IFlvdVR1YmVMaWJzID0gW1xuICAgICd5dGRsLWNvcmUnLFxuICAgICdAZGlzdHViZS95dGRsLWNvcmUnLFxuICAgICdwbGF5LWRsJyxcbiAgICAneXQtc3RyZWFtJ1xuICAgIC8vIGFkZCBtb3JlIHRvIHRoZSBsaXN0IGlmIHlvdSBoYXZlIGFueVxuXTtcblxuY29uc3QgRVJSX05PX1lUX0xJQiA9IG5ldyBFcnJvcihgQ291bGQgbm90IGxvYWQgeW91dHViZSBsaWJyYXJ5LiBJbnN0YWxsIG9uZSBvZiAke1lvdVR1YmVMaWJzLm1hcCgobGliKSA9PiBgXCIke2xpYn1cImApLmpvaW4oJywgJyl9YCk7XG5cbi8vIGZvcmNlZCBsaWJcbmNvbnN0IGZvcmNlZExpYiA9IHByb2Nlc3MuZW52LkRQX0ZPUkNFX1lURExfTU9EO1xuaWYgKGZvcmNlZExpYikgWW91VHViZUxpYnMudW5zaGlmdChmb3JjZWRMaWIpO1xuXG5leHBvcnQgY29uc3QgZ2V0RmV0Y2ggPVxuICAgIHR5cGVvZiBmZXRjaCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBmZXRjaFxuICAgICAgICA6IGFzeW5jIChpbmZvOiBSZXF1ZXN0SW5mbywgaW5pdD86IFJlcXVlc3RJbml0KTogUHJvbWlzZTxSZXNwb25zZT4gPT4ge1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgbGV0IGR5OiBhbnk7XG5cbiAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cbiAgICAgICAgICAgICAgaWYgKChkeSA9IGF3YWl0IGNyZWF0ZUltcG9ydCgndW5kaWNpJykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGR5LmZldGNoIHx8IGR5LmRlZmF1bHQuZmV0Y2gpKGluZm8sIGluaXQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKChkeSA9IGF3YWl0IGNyZWF0ZUltcG9ydCgnbm9kZS1mZXRjaCcpKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChkeS5mZXRjaCB8fCBkeS5kZWZhdWx0KShpbmZvLCBpbml0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZmV0Y2ggbGliIGZvdW5kJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG4gICAgICAgICAgfTtcblxuZXhwb3J0IHR5cGUgU3RyZWFtRk4gPSAocTogc3RyaW5nKSA9PiBQcm9taXNlPGltcG9ydCgnc3RyZWFtJykuUmVhZGFibGUgfCBzdHJpbmc+O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRZdGRsKG9wdGlvbnM/OiBhbnksIGZvcmNlID0gZmFsc2UpIHtcbiAgICBpZiAoZmFjdG9yeSAmJiAhZm9yY2UpIHJldHVybiBmYWN0b3J5O1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBsZXQgbGliOiBhbnksIF95dExpYk5hbWU6IHN0cmluZywgX3N0cmVhbTogU3RyZWFtRk47XG5cbiAgICBmb3IgKGNvbnN0IHl0bGliIG9mIFlvdVR1YmVMaWJzKSB7XG4gICAgICAgIGxpYiA9IGF3YWl0IGltcG9ydCh5dGxpYikudGhlbihcbiAgICAgICAgICAgIChtKSA9PiBtLFxuICAgICAgICAgICAgKCkgPT4gbnVsbFxuICAgICAgICApO1xuICAgICAgICBpZiAoIWxpYikgY29udGludWU7XG4gICAgICAgIGxpYiA9IGxpYi5kZWZhdWx0IHx8IGxpYjtcbiAgICAgICAgX3l0TGliTmFtZSA9IHl0bGliO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAobGliKSB7XG4gICAgICAgIGNvbnN0IGlzWXRkbCA9IFsneXRkbC1jb3JlJywgJ0BkaXN0dWJlL3l0ZGwtY29yZSddLnNvbWUoKGxpYikgPT4gbGliID09PSBfeXRMaWJOYW1lKTtcblxuICAgICAgICBfc3RyZWFtID0gYXN5bmMgKHF1ZXJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNZdGRsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGwgPSBsaWIgYXMgdHlwZW9mIGltcG9ydCgneXRkbC1jb3JlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IGRsLmdldEluZm8ocXVlcnksIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0cyA9IGluZm8uZm9ybWF0c1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChmb3JtYXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmZvLnZpZGVvRGV0YWlscy5pc0xpdmVDb250ZW50ID8gZm9ybWF0LmlzSExTICYmIGZvcm1hdC5oYXNBdWRpbyA6IGZvcm1hdC5oYXNBdWRpbztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IE51bWJlcihiLmF1ZGlvQml0cmF0ZSkgLSBOdW1iZXIoYS5hdWRpb0JpdHJhdGUpIHx8IE51bWJlcihhLmJpdHJhdGUpIC0gTnVtYmVyKGIuYml0cmF0ZSkpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZm10ID0gZm9ybWF0cy5maW5kKChmb3JtYXQpID0+ICFmb3JtYXQuaGFzVmlkZW8pIHx8IGZvcm1hdHMuc29ydCgoYSwgYikgPT4gTnVtYmVyKGEuYml0cmF0ZSkgLSBOdW1iZXIoYi5iaXRyYXRlKSlbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gZm10Py51cmw7XG4gICAgICAgICAgICAgICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIHN0cmVhbSB1cmwgZm9yICR7cXVlcnl9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gZGwocXVlcnksIHRoaXMuY29udGV4dC5wbGF5ZXIub3B0aW9ucy55dGRsT3B0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF95dExpYk5hbWUgPT09ICdwbGF5LWRsJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRsID0gbGliIGFzIHR5cGVvZiBpbXBvcnQoJ3BsYXktZGwnKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBkbC52aWRlb19pbmZvKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRzID0gaW5mby5mb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoZm9ybWF0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IC9cXC9tYW5pZmVzdFxcL2hsc18odmFyaWFudHxwbGF5bGlzdClcXC8vO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JtYXQudXJsKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby52aWRlb19kZXRhaWxzLmxpdmUpIHJldHVybiByZS50ZXN0KGZvcm1hdC51cmwpICYmIHR5cGVvZiBmb3JtYXQuYml0cmF0ZSA9PT0gJ251bWJlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZvcm1hdC5iaXRyYXRlID09PSAnbnVtYmVyJztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IE51bWJlcihiLmJpdHJhdGUpIC0gTnVtYmVyKGEuYml0cmF0ZSkpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZm10ID0gZm9ybWF0cy5maW5kKChmb3JtYXQpID0+ICFmb3JtYXQucXVhbGl0eUxhYmVsKSB8fCBmb3JtYXRzLnNvcnQoKGEsIGIpID0+IE51bWJlcihhLmJpdHJhdGUpIC0gTnVtYmVyKGIuYml0cmF0ZSkpWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGZtdD8udXJsO1xuICAgICAgICAgICAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBzdHJlYW0gdXJsIGZvciAke3F1ZXJ5fWApO1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIChhd2FpdCBkbC5zdHJlYW0ocXVlcnksIHsgZGlzY29yZFBsYXllckNvbXBhdGliaWxpdHk6IHRydWUgfSkpLnN0cmVhbTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3l0TGliTmFtZSA9PT0gJ3l0LXN0cmVhbScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkbCA9IGxpYiBhcyB0eXBlb2YgaW1wb3J0KCd5dC1zdHJlYW0nKTtcblxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRGVmYXVsdCBsaWIgZGlkIG5vdCBwcm92aWRlIHR5cGVzIGZvciB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICBjb25zdCBkZWNpcGhlcjogYW55ID0gYXdhaXQgaW1wb3J0KCd5dC1zdHJlYW0vc3JjL3N0cmVhbS9kZWNpcGhlci5qcycpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IGRsLmdldEluZm8ocXVlcnkpO1xuXG4gICAgICAgICAgICAgICAgaW5mby5mb3JtYXRzID0gYXdhaXQgZGVjaXBoZXI/LmZvcm1hdF9kZWNpcGhlcihpbmZvLmZvcm1hdHMsIGluZm8uaHRtbDVwbGF5ZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBUaGUgbGliIGRpZCBub3QgcHJvdmlkZSB0cyBzdXBwb3J0XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gaW5mby5mb3JtYXRzLmZpbHRlcigodmFsKSA9PiB2YWwubWltZVR5cGUuc3RhcnRzV2l0aCgnYXVkaW8nKSAmJiB2YWwuYXVkaW9RdWFsaXR5ICE9PSAnQVVESU9fUVVBTElUWV9MT1cnKS5tYXAoKHZhbCkgPT4gdmFsLnVybCkgYXMgQXJyYXk8c3RyaW5nPjtcblxuICAgICAgICAgICAgICAgIGlmICh1cmwubGVuZ3RoICE9PSAwKSByZXR1cm4gdXJsWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBUaGUgbGliIGRpZCBub3QgcHJvdmlkZSB0cyBzdXBwb3J0XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZm8uZm9ybWF0cy5maWx0ZXIoKHZhbCkgPT4gdmFsLm1pbWVUeXBlLnN0YXJ0c1dpdGgoJ2F1ZGlvJykpLm1hcCgodmFsKSA9PiB2YWwudXJsKVswXSBhcyBzdHJpbmc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IEVSUl9OT19ZVF9MSUI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRVJSX05PX1lUX0xJQjtcbiAgICB9XG5cbiAgICBmYWN0b3J5ID0geyBuYW1lOiBfeXRMaWJOYW1lISwgc3RyZWFtOiBfc3RyZWFtLCBsaWIgfTtcbiAgICByZXR1cm4gZmFjdG9yeTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWtlWVRTZWFyY2gocXVlcnk6IHN0cmluZywgb3B0OiBhbnkpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBZb3VUdWJlLnNlYXJjaChxdWVyeSwge1xuICAgICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgICByZXF1ZXN0T3B0aW9uczogb3B0XG4gICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAvL1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlcyB8fCBbXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1ha2VTQ1NlYXJjaChxdWVyeTogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBzb3VuZGNsb3VkIH0gPSBTb3VuZENsb3VkRXh0cmFjdG9yO1xuICAgIGlmICghc291bmRjbG91ZCkgcmV0dXJuIFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHNvdW5kY2xvdWQudHJhY2tzLnNlYXJjaFYyKHtcbiAgICAgICAgICAgIHE6IHF1ZXJ5LFxuICAgICAgICAgICAgbGltaXQ6IDVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluZm8uY29sbGVjdGlvbjtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gZmFsbGJhY2tcbiAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IHNvdW5kY2xvdWQudHJhY2tzLnNlYXJjaEFsdChxdWVyeSk7XG5cbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVsbFlUTWV0YWRhdGEoZXh0OiBCYXNlRXh0cmFjdG9yLCBpbmZvOiBUcmFjaykge1xuICAgIGNvbnN0IG1ldGEgPSBhd2FpdCBtYWtlWVRTZWFyY2goZXh0LmNyZWF0ZUJyaWRnZVF1ZXJ5KGluZm8pLCAndmlkZW8nKVxuICAgICAgICAudGhlbigocikgPT4gclswXSlcbiAgICAgICAgLmNhdGNoKCgpID0+IG51bGwpO1xuXG4gICAgcmV0dXJuIG1ldGE7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdWxsU0NNZXRhZGF0YShleHQ6IEJhc2VFeHRyYWN0b3IsIGluZm86IFRyYWNrKSB7XG4gICAgY29uc3QgbWV0YSA9IGF3YWl0IG1ha2VTQ1NlYXJjaChleHQuY3JlYXRlQnJpZGdlUXVlcnkoaW5mbykpXG4gICAgICAgIC50aGVuKChyKSA9PiByWzBdKVxuICAgICAgICAuY2F0Y2goKCkgPT4gbnVsbCk7XG5cbiAgICByZXR1cm4gbWV0YTtcbn1cbiIsICJpbXBvcnQgeyBDbGllbnQgYXMgR2VuaXVzQ2xpZW50IH0gZnJvbSAnZ2VuaXVzLWx5cmljcyc7XG5cbi8vIGxhenkgbG9hZCBjbGllbnRcbmxldCBjbGllbnQ6IEdlbml1c0NsaWVudDtcblxuZXhwb3J0IGZ1bmN0aW9uIGx5cmljc0V4dHJhY3RvcihhcGlLZXk/OiBzdHJpbmcsIGZvcmNlPzogYm9vbGVhbikge1xuICAgIGlmICghY2xpZW50ICYmICFmb3JjZSkgY2xpZW50ID0gbmV3IEdlbml1c0NsaWVudChhcGlLZXkpO1xuICAgIHJldHVybiB7IHNlYXJjaCwgY2xpZW50IH07XG59XG5cbmZ1bmN0aW9uIHNlYXJjaChxdWVyeTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEx5cmljc0RhdGEgfCBudWxsPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHNlYXJjaCBxdWVyeSB0byBiZSBhIHN0cmluZywgcmVjZWl2ZWQgXCIke3R5cGVvZiBxdWVyeX1cIiFgKSk7XG5cbiAgICAgICAgY2xpZW50LnNvbmdzXG4gICAgICAgICAgICAuc2VhcmNoKHF1ZXJ5KVxuICAgICAgICAgICAgLnRoZW4oYXN5bmMgKHNvbmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNvbmdzWzBdLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBmdWxsVGl0bGU6IHNvbmdzWzBdLmZ1bGxUaXRsZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHNvbmdzWzBdLmlkLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNvbmdzWzBdLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IHNvbmdzWzBdLmltYWdlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHNvbmdzWzBdLnVybCxcbiAgICAgICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb25nc1swXS5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzb25nc1swXS5hcnRpc3QuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvbmdzWzBdLmFydGlzdC51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogc29uZ3NbMF0uYXJ0aXN0LmltYWdlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGx5cmljczogYXdhaXQgc29uZ3NbMF0ubHlyaWNzKGZhbHNlKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignQ291bGQgbm90IHBhcnNlIGx5cmljcycpKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEx5cmljc0RhdGEge1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgZnVsbFRpdGxlOiBzdHJpbmc7XG4gICAgaWQ6IG51bWJlcjtcbiAgICB0aHVtYm5haWw6IHN0cmluZztcbiAgICBpbWFnZTogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIGFydGlzdDoge1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGlkOiBudW1iZXI7XG4gICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICBpbWFnZTogc3RyaW5nO1xuICAgIH07XG4gICAgbHlyaWNzOiBzdHJpbmc7XG59XG4iLCAiLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge1xuICAgIEJhc2VFeHRyYWN0b3IsXG4gICAgRXh0cmFjdG9ySW5mbyxcbiAgICBFeHRyYWN0b3JTZWFyY2hDb250ZXh0LFxuICAgIFF1ZXJ5VHlwZSxcbiAgICBTZWFyY2hRdWVyeVR5cGUsXG4gICAgVHJhY2ssXG4gICAgVXRpbFxufSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgeyBWaW1lbyB9IGZyb20gJy4uL2ludGVybmFsL1ZpbWVvJztcblxuZXhwb3J0IGNsYXNzIFZpbWVvRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvciB7XG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci52aW1lb2V4dHJhY3RvcicgYXMgY29uc3Q7XG5cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIChbUXVlcnlUeXBlLlZJTUVPXSBhcyBTZWFyY2hRdWVyeVR5cGVbXSkuc29tZSgocikgPT4gciA9PT0gdHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFJlbGF0ZWRUcmFja3ModHJhY2s6IFRyYWNrKSB7XG4gICAgICAgIHZvaWQgdHJhY2s7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGhhbmRsZShxdWVyeTogc3RyaW5nLCBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KTogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5WSU1FTzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrSW5mbyA9IGF3YWl0IFZpbWVvLmdldEluZm8oXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJy8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoeCkgPT4gISF4KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBvcCgpIVxuICAgICAgICAgICAgICAgICkuY2F0Y2goVXRpbC5ub29wKTtcblxuICAgICAgICAgICAgICAgIGlmICghdHJhY2tJbmZvKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdHJhY2tJbmZvLnVybCxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModHJhY2tJbmZvLmR1cmF0aW9uIHx8IDApKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGAke3RyYWNrSW5mby50aXRsZX0gYnkgJHt0cmFja0luZm8uYXV0aG9yLm5hbWV9YCxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFja0luZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB0cmFja0luZm8uYXV0aG9yLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcmJpdHJhcnknLFxuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHRyYWNrSW5mby5zdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW3RyYWNrXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZW1wdHlSZXNwb25zZSgpOiBFeHRyYWN0b3JJbmZvIHtcbiAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKSB7XG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IGluZm8ucmF3LmVuZ2luZSBhcyBzdHJpbmc7XG4gICAgICAgIGlmIChlbmdpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0cmFjayA9IGF3YWl0IFZpbWVvLmdldEluZm8oaW5mby51cmwpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgIGlmICghdHJhY2sgfHwgIXRyYWNrLnN0cmVhbSkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZXh0cmFjdCBzdHJlYW0gZnJvbSB0aGlzIHNvdXJjZScpO1xuXG4gICAgICAgIGluZm8ucmF3LmVuZ2luZSA9IHtcbiAgICAgICAgICAgIHN0cmVhbVVSTDogdHJhY2suc3RyZWFtXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRyYWNrLnN0cmVhbTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHsgZ2V0RmV0Y2ggfSBmcm9tICcuLi9leHRyYWN0b3JzL2NvbW1vbi9oZWxwZXInO1xuXG5jbGFzcyBWaW1lbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSBjbGFzcyBtYXkgbm90IGJlIGluc3RhbnRpYXRlZCFgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7UmVhZGFibGV9IFJlYWRhYmxlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZHMgZnJvbSB2aW1lb1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpZCBWaW1lbyB2aWRlbyBpZFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFJlYWRhYmxlPn1cbiAgICAgKi9cbiAgICBzdGF0aWMgZG93bmxvYWQoaWQ6IG51bWJlciB8IHN0cmluZyk6IFByb21pc2U8UmVhZGFibGU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgVmltZW8uZ2V0SW5mbyhpZCk7XG4gICAgICAgICAgICBpZiAoIWluZm8pIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBkb3dubG9hZGVyID0gaW5mby5zdHJlYW0uc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSA/IGh0dHBzIDogaHR0cDtcblxuICAgICAgICAgICAgZG93bmxvYWRlci5nZXQoaW5mby5zdHJlYW0sIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB2aWRlbyBpbmZvXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFZpZGVvIGlkXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGdldEluZm8oaWQ6IG51bWJlciB8IHN0cmluZyk6IFByb21pc2U8VmltZW9JbmZvIHwgbnVsbD4ge1xuICAgICAgICBpZiAoIWlkKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaWQnKTtcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8ke2lkfWA7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEZldGNoKHVybCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKGRhdGEuc3BsaXQoJ3dpbmRvdy5wbGF5ZXJDb25maWcgPScpWzFdLnNwbGl0KCc7JylbMF0udHJpbSgpKTtcblxuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGlkOiBqc29uLnZpZGVvLmlkLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBqc29uLnZpZGVvLmR1cmF0aW9uICogMTAwMCxcbiAgICAgICAgICAgICAgICB0aXRsZToganNvbi52aWRlby50aXRsZSxcbiAgICAgICAgICAgICAgICB1cmw6IGpzb24udmlkZW8udXJsLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDoganNvbi52aWRlby50aHVtYnNbJzEyODAnXSB8fCBqc29uLnZpZGVvLnRodW1icy5iYXNlLFxuICAgICAgICAgICAgICAgIHN0cmVhbToganNvbi5yZXF1ZXN0LmZpbGVzLnByb2dyZXNzaXZlWzBdLnVybCxcbiAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGpzb24udmlkZW8ub3duZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGpzb24udmlkZW8ub3duZXIubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBqc29uLnZpZGVvLm93bmVyLnVybCxcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyOiBqc29uLnZpZGVvLm93bmVyLmltZ18yeCB8fCBqc29uLnZpZGVvLm93bmVyLmltZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmltZW9JbmZvIHtcbiAgICBpZDogbnVtYmVyO1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICB0aHVtYm5haWw6IHN0cmluZztcbiAgICBzdHJlYW06IHN0cmluZztcbiAgICBhdXRob3I6IHtcbiAgICAgICAgaWQ6IG51bWJlcjtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB1cmw6IHN0cmluZztcbiAgICAgICAgYXZhdGFyOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgVmltZW8gfTtcbiIsICIvLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7XG4gICAgQmFzZUV4dHJhY3RvcixcbiAgICBFeHRyYWN0b3JJbmZvLFxuICAgIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gICAgUXVlcnlUeXBlLFxuICAgIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgICBUcmFjayxcbiAgICBVdGlsXG59IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCByZXZlcmJuYXRpb24gZnJvbSAncmV2ZXJibmF0aW9uLXNjcmFwZXInO1xuXG5leHBvcnQgY2xhc3MgUmV2ZXJibmF0aW9uRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvciB7XG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5yZXZlcmJuYXRpb25leHRyYWN0b3InIGFzIGNvbnN0O1xuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlKHF1ZXJ5OiBzdHJpbmcsIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiAoW1F1ZXJ5VHlwZS5SRVZFUkJOQVRJT05dIGFzIFNlYXJjaFF1ZXJ5VHlwZVtdKS5zb21lKChyKSA9PiByID09PSB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICAgICAgdm9pZCB0cmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlJFVkVSQk5BVElPTjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrSW5mbyA9IGF3YWl0IHJldmVyYm5hdGlvbi5nZXRJbmZvKHF1ZXJ5KS5jYXRjaChVdGlsLm5vb3ApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFja0luZm8pIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrSW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYWNrSW5mby5seXJpY3MgfHwgYCR7dHJhY2tJbmZvLnRpdGxlfSBieSAke3RyYWNrSW5mby5hcnRpc3QubmFtZX1gLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FyYml0cmFyeScsXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLnN0cmVhbVVSTCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB0cmFja0luZm8sXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFja0luZm87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdHJlYW0oaW5mbzogVHJhY2spIHtcbiAgICAgICAgY29uc3QgZW5naW5lID0gaW5mby5yYXcuZW5naW5lIGFzIHN0cmluZztcbiAgICAgICAgaWYgKGVuZ2luZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyYWNrID0gYXdhaXQgcmV2ZXJibmF0aW9uLmdldEluZm8oaW5mby51cmwpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgIGlmICghdHJhY2sgfHwgIXRyYWNrLnN0cmVhbVVSTCkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZXh0cmFjdCBzdHJlYW0gZnJvbSB0aGlzIHNvdXJjZScpO1xuXG4gICAgICAgIGluZm8ucmF3LmVuZ2luZSA9IHtcbiAgICAgICAgICAgIHN0cmVhbVVSTDogdHJhY2suc3RyZWFtVVJMXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRyYWNrLnN0cmVhbVVSTDtcbiAgICB9XG59XG4iLCAiLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge1xuICAgIEJhc2VFeHRyYWN0b3IsXG4gICAgRXh0cmFjdG9ySW5mbyxcbiAgICBFeHRyYWN0b3JTZWFyY2hDb250ZXh0LFxuICAgIFF1ZXJ5VHlwZSxcbiAgICBTZWFyY2hRdWVyeVR5cGUsXG4gICAgVHJhY2ssXG4gICAgVXRpbFxufSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgdHlwZSB7IEluY29taW5nTWVzc2FnZSB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgY3JlYXRlUmVhZFN0cmVhbSwgZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGRvd25sb2FkU3RyZWFtIH0gZnJvbSAnLi4vaW50ZXJuYWwvZG93bmxvYWRlcic7XG5pbXBvcnQgKiBhcyBmaWxlVHlwZSBmcm9tICdmaWxlLXR5cGUnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBzdGF0IH0gZnJvbSAnZnMvcHJvbWlzZXMnO1xuXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudEV4dHJhY3RvciBleHRlbmRzIEJhc2VFeHRyYWN0b3Ige1xuICAgIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9ICdjb20uZGlzY29yZC1wbGF5ZXIuYXR0YWNobWVudGV4dHJhY3RvcicgYXMgY29uc3Q7XG5cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIChbUXVlcnlUeXBlLkFSQklUUkFSWSwgUXVlcnlUeXBlLkZJTEVdIGFzIFNlYXJjaFF1ZXJ5VHlwZVtdKS5zb21lKChyKSA9PiByID09PSB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICAgICAgdm9pZCB0cmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLkFSQklUUkFSWToge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoYXdhaXQgZG93bmxvYWRTdHJlYW0ocXVlcnksIGNvbnRleHQucmVxdWVzdE9wdGlvbnMpKSBhcyBJbmNvbWluZ01lc3NhZ2U7XG4gICAgICAgICAgICAgICAgaWYgKCFbJ2F1ZGlvLycsICd2aWRlby8nXS5zb21lKChyKSA9PiAhIWRhdGEuaGVhZGVyc1snY29udGVudC10eXBlJ10/LnN0YXJ0c1dpdGgocikpKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogKFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJy8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHgpID0+IHgubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wb3AoKSA/PyAnQXR0YWNobWVudCdcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCc/JylbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmltKCksXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6ICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzIvMmEvSVR1bmVzXzEyLjJfbG9nby5wbmcnLFxuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiAoKGRhdGEgYXMgYW55KS5jbGllbnQ/LnNlcnZlcm5hbWUgYXMgc3RyaW5nKSB8fCAnQXR0YWNobWVudCcsXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogKChkYXRhIGFzIGFueSkuY2xpZW50Py5zZXJ2ZXJuYW1lIGFzIHN0cmluZykgfHwgJ0F0dGFjaG1lbnQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGRhdGEudXJsIHx8IHF1ZXJ5XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrSW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYWNrSW5mby5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFja0luZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB0cmFja0luZm8uYXV0aG9yLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICB0cmFjay5yYXcuaXNGaWxlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5GSUxFOiB7XG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdHNTeW5jKHF1ZXJ5KSkgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZzdGF0ID0gYXdhaXQgc3RhdChxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFmc3RhdC5pc0ZpbGUoKSkgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbWUgPSBhd2FpdCBmaWxlVHlwZS5mcm9tRmlsZShxdWVyeSkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKCFtaW1lIHx8ICFbJ2F1ZGlvLycsICd2aWRlby8nXS5zb21lKChyKSA9PiAhIW1pbWUubWltZS5zdGFydHNXaXRoKHIpKSkgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHBhdGguYmFzZW5hbWUocXVlcnkpIHx8ICdBdHRhY2htZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogJ2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvMi8yYS9JVHVuZXNfMTIuMl9sb2dvLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZTogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjogJ0F0dGFjaG1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0F0dGFjaG1lbnQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHF1ZXJ5XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrSW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHRyYWNrSW5mby5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFja0luZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB0cmFja0luZm8uYXV0aG9yLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgICB0cmFjay5yYXcuaXNGaWxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGVtcHR5UmVzcG9uc2UoKTogRXh0cmFjdG9ySW5mbyB7XG4gICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjaykge1xuICAgICAgICBjb25zdCBlbmdpbmUgPSBpbmZvLnJhdy5lbmdpbmUgYXMgc3RyaW5nO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGNvbnN0IGlzRmlsZSA9IGluZm8ucmF3LmlzRmlsZSBhcyBib29sZWFuO1xuXG4gICAgICAgIGlmICghZW5naW5lKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHN0cmVhbSBzb3VyY2UnKTtcblxuICAgICAgICBpZiAoIWlzRmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICAgICAgICAgIC8vIHJldHVybiBhd2FpdCBkb3dubG9hZFN0cmVhbShlbmdpbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlYWRTdHJlYW0oZW5naW5lKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IGh0dHAsIHsgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdodHRwJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZFN0cmVhbSh1cmw6IHN0cmluZywgb3B0czogUmVxdWVzdE9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxSZWFkYWJsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBsaWIgPSB1cmwuc3RhcnRzV2l0aCgnaHR0cDovLycpID8gaHR0cCA6IGh0dHBzO1xuXG4gICAgICAgIGxpYi5nZXQodXJsLCBvcHRzLCAocmVzKSA9PiByZXNvbHZlKHJlcykpLm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICB9KTtcbn1cbiIsICJpbXBvcnQgeyBCYXNlRXh0cmFjdG9yLCBFeHRyYWN0b3JJbmZvLCBFeHRyYWN0b3JTZWFyY2hDb250ZXh0LCBQbGF5bGlzdCwgUXVlcnlUeXBlLCBTZWFyY2hRdWVyeVR5cGUsIFRyYWNrLCBVdGlsIH0gZnJvbSAnZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHsgQXBwbGVNdXNpYyB9IGZyb20gJy4uL2ludGVybmFsJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IFlvdXR1YmVFeHRyYWN0b3IgfSBmcm9tICcuL1lvdXR1YmVFeHRyYWN0b3InO1xuaW1wb3J0IHsgU3RyZWFtRk4sIGxvYWRZdGRsLCBwdWxsWVRNZXRhZGF0YSB9IGZyb20gJy4vY29tbW9uL2hlbHBlcic7XG5pbXBvcnQgeyBCcmlkZ2VQcm92aWRlciB9IGZyb20gJy4vY29tbW9uL0JyaWRnZVByb3ZpZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBBcHBsZU11c2ljRXh0cmFjdG9ySW5pdCB7XG4gICAgY3JlYXRlU3RyZWFtPzogKGV4dDogQXBwbGVNdXNpY0V4dHJhY3RvciwgdXJsOiBzdHJpbmcpID0+IFByb21pc2U8UmVhZGFibGUgfCBzdHJpbmc+O1xuICAgIGJyaWRnZVByb3ZpZGVyPzogQnJpZGdlUHJvdmlkZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBBcHBsZU11c2ljRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvcjxBcHBsZU11c2ljRXh0cmFjdG9ySW5pdD4ge1xuICAgIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9ICdjb20uZGlzY29yZC1wbGF5ZXIuYXBwbGVtdXNpY2V4dHJhY3RvcicgYXMgY29uc3Q7XG4gICAgcHJpdmF0ZSBfc3RyZWFtITogU3RyZWFtRk47XG4gICAgcHJpdmF0ZSBfaXNZdGRsID0gZmFsc2U7XG5cbiAgICBwdWJsaWMgYXN5bmMgYWN0aXZhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIHNraXAgaWYgd2UgaGF2ZSBhIGJyaWRnZSBwcm92aWRlclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZm4gPSB0aGlzLm9wdGlvbnMuY3JlYXRlU3RyZWFtO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzWXRkbCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fc3RyZWFtID0gKHE6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbih0aGlzLCBxKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpYiA9IGF3YWl0IGxvYWRZdGRsKHRoaXMuY29udGV4dC5wbGF5ZXIub3B0aW9ucy55dGRsT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3N0cmVhbSA9IGxpYi5zdHJlYW07XG4gICAgICAgIHRoaXMuX2lzWXRkbCA9IHRydWU7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlKHF1ZXJ5OiBzdHJpbmcsIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICByZXR1cm4gKDxTZWFyY2hRdWVyeVR5cGVbXT5bXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfQUxCVU0sXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfUExBWUxJU1QsXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU09ORyxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TRUFSQ0gsXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVVUTyxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BVVRPX1NFQVJDSFxuICAgICAgICBdKS5zb21lKCh0KSA9PiB0ID09PSB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICAgICAgaWYgKHRyYWNrLnF1ZXJ5VHlwZSA9PT0gUXVlcnlUeXBlLkFQUExFX01VU0lDX1NPTkcpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUodHJhY2suYXV0aG9yIHx8IHRyYWNrLnRpdGxlLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogUXVlcnlUeXBlLkFQUExFX01VU0lDX1NFQVJDSCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogdHJhY2sucmVxdWVzdGVkQnlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGhhbmRsZShxdWVyeTogc3RyaW5nLCBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KTogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BVVRPOlxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuQVVUT19TRUFSQ0g6XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TRUFSQ0g6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgQXBwbGVNdXNpYy5zZWFyY2gocXVlcnkpO1xuICAgICAgICAgICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5sZW5ndGgpIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gZGF0YS5tYXAoXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgIChtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBtLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0eXBlb2YgbS5kdXJhdGlvbiA9PT0gJ251bWJlcicgPyBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKG0uZHVyYXRpb24pKSA6IG0uZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBtLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG0udXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FwcGxlX211c2ljJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6ICdhcHBsZU11c2ljU29uZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIgPyAoYXdhaXQgdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyLnJlc29sdmUodGhpcywgdHJhY2spKS5kYXRhIDogYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgdHJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZShudWxsLCB0cmFja3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfQUxCVU06IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgQXBwbGVNdXNpYy5nZXRBbGJ1bUluZm8ocXVlcnkpO1xuICAgICAgICAgICAgICAgIGlmICghaW5mbykgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbmZvLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGluZm8uaWQsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FwcGxlX211c2ljJyxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBpbmZvLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZm8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhbGJ1bScsXG4gICAgICAgICAgICAgICAgICAgIHVybDogaW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBpbmZvXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50cmFja3MgPSBpbmZvLnRyYWNrcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgIG06IGFueSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IG0uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHR5cGVvZiBtLmR1cmF0aW9uID09PSAnbnVtYmVyJyA/IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpIDogbS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IG0udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ2FwcGxlTXVzaWNTb25nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGluZm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGluZm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCB0cmFjaykpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCB0cmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLnBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfUExBWUxJU1Q6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgQXBwbGVNdXNpYy5nZXRQbGF5bGlzdEluZm8ocXVlcnkpO1xuICAgICAgICAgICAgICAgIGlmICghaW5mbykgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbmZvLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGluZm8uaWQsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FwcGxlX211c2ljJyxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBpbmZvLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZm8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwbGF5bGlzdCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogaW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBpbmZvXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbGF5bGlzdC50cmFja3MgPSBpbmZvLnRyYWNrcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgIG06IGFueSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IG0uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHR5cGVvZiBtLmR1cmF0aW9uID09PSAnbnVtYmVyJyA/IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpIDogbS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IG0udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ2FwcGxlTXVzaWNTb25nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCB0cmFjaykpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCB0cmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2sucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLkFQUExFX01VU0lDX1NPTkc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgQXBwbGVNdXNpYy5nZXRTb25nSW5mbyhxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmZvKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBpbmZvLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHR5cGVvZiBpbmZvLmR1cmF0aW9uID09PSAnbnVtYmVyJyA/IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMoaW5mby5kdXJhdGlvbikpIDogaW5mby5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBpbmZvLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZm8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHVybDogaW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcHBsZV9tdXNpYycsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBpbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIHRyYWNrKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIHRyYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdHJlYW0oaW5mbzogVHJhY2spOiBQcm9taXNlPHN0cmluZyB8IFJlYWRhYmxlPiB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcHJvdmlkZXIucmVzb2x2ZSh0aGlzLCBpbmZvKTtcbiAgICAgICAgICAgIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gYnJpZGdlIHRoaXMgdHJhY2snKTtcblxuICAgICAgICAgICAgaW5mby5zZXRNZXRhZGF0YSh7XG4gICAgICAgICAgICAgICAgLi4uKGluZm8ubWV0YWRhdGEgfHwge30pLFxuICAgICAgICAgICAgICAgIGJyaWRnZTogZGF0YS5kYXRhXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb3ZpZGVyLnN0cmVhbShkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fc3RyZWFtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBpbml0aWFsaXplIHN0cmVhbWluZyBhcGkgZm9yICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nYCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdXJsID0gaW5mby51cmw7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzWXRkbCkge1xuICAgICAgICAgICAgaWYgKFlvdXR1YmVFeHRyYWN0b3IudmFsaWRhdGVVUkwoaW5mby5yYXcudXJsKSkgdXJsID0gaW5mby5yYXcudXJsO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIGluZm8pO1xuICAgICAgICAgICAgICAgIGlmIChtZXRhKVxuICAgICAgICAgICAgICAgICAgICBpbmZvLnNldE1ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihpbmZvLm1ldGFkYXRhIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbWV0YVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBfdXJsID0gbWV0YT8udXJsO1xuICAgICAgICAgICAgICAgIGlmICghX3VybCkgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggcmVzb3VyY2VzIGZvciB5dGRsIHN0cmVhbWluZycpO1xuICAgICAgICAgICAgICAgIGluZm8ucmF3LnVybCA9IHVybCA9IF91cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtKHVybCk7XG4gICAgfVxufVxuIiwgImV4cG9ydCAqIGZyb20gJy4vQXBwbGVNdXNpYyc7XG5leHBvcnQgKiBmcm9tICcuL1ZpbWVvJztcbmV4cG9ydCAqIGZyb20gJy4vZG93bmxvYWRlcic7XG5leHBvcnQgKiBmcm9tICcuL1Nwb3RpZnknO1xuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCB7IFF1ZXJ5UmVzb2x2ZXIgfSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgeyBwYXJzZSwgSFRNTEVsZW1lbnQgfSBmcm9tICdub2RlLWh0bWwtcGFyc2VyJztcbmltcG9ydCB7IFVBLCBnZXRGZXRjaCB9IGZyb20gJy4uL2V4dHJhY3RvcnMvY29tbW9uL2hlbHBlcic7XG5cbmZ1bmN0aW9uIGdldEhUTUwobGluazogc3RyaW5nKTogUHJvbWlzZTxIVE1MRWxlbWVudCB8IG51bGw+IHtcbiAgICByZXR1cm4gZ2V0RmV0Y2gobGluaywge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBXG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAudGhlbigocikgPT4gci50ZXh0KCkpXG4gICAgICAgIC50aGVuKFxuICAgICAgICAgICAgKHR4dCkgPT4gcGFyc2UodHh0KSxcbiAgICAgICAgICAgICgpID0+IG51bGxcbiAgICAgICAgKTtcbn1cblxuZnVuY3Rpb24gbWFrZUltYWdlKHsgaGVpZ2h0LCB1cmwsIHdpZHRoLCBleHQgPSAnanBnJyB9OiB7IHVybDogc3RyaW5nOyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgZXh0Pzogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4gdXJsLnJlcGxhY2UoJ3t3fScsIGAke3dpZHRofWApLnJlcGxhY2UoJ3tofScsIGAke2hlaWdodH1gKS5yZXBsYWNlKCd7Zn0nLCBleHQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUR1cmF0aW9uKGQ6IHN0cmluZykge1xuICAgIGNvbnN0IHIgPSAobmFtZTogc3RyaW5nLCB1bml0OiBzdHJpbmcpID0+IGAoKD88JHtuYW1lfT4tP1xcXFxkKltcXFxcLixdP1xcXFxkKykke3VuaXR9KT9gO1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgW1xuICAgICAgICAgICAgJyg/PG5lZ2F0aXZlPi0pP1AnLFxuICAgICAgICAgICAgcigneWVhcnMnLCAnWScpLFxuICAgICAgICAgICAgcignbW9udGhzJywgJ00nKSxcbiAgICAgICAgICAgIHIoJ3dlZWtzJywgJ1cnKSxcbiAgICAgICAgICAgIHIoJ2RheXMnLCAnRCcpLFxuICAgICAgICAgICAgJyhUJyxcbiAgICAgICAgICAgIHIoJ2hvdXJzJywgJ0gnKSxcbiAgICAgICAgICAgIHIoJ21pbnV0ZXMnLCAnTScpLFxuICAgICAgICAgICAgcignc2Vjb25kcycsICdTJyksXG4gICAgICAgICAgICAnKT8nIC8vIGVuZCBvcHRpb25hbCB0aW1lXG4gICAgICAgIF0uam9pbignJylcbiAgICApO1xuICAgIGNvbnN0IHRlc3QgPSByZWdleC5leGVjKGQpO1xuICAgIGlmICghdGVzdCB8fCAhdGVzdC5ncm91cHMpIHJldHVybiAnMDowMCc7XG5cbiAgICBjb25zdCBkdXIgPSBbdGVzdC5ncm91cHMueWVhcnMsIHRlc3QuZ3JvdXBzLm1vbnRocywgdGVzdC5ncm91cHMud2Vla3MsIHRlc3QuZ3JvdXBzLmRheXMsIHRlc3QuZ3JvdXBzLmhvdXJzLCB0ZXN0Lmdyb3Vwcy5taW51dGVzLCB0ZXN0Lmdyb3Vwcy5zZWNvbmRzXTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIGR1clxuICAgICAgICAgICAgLmZpbHRlcigociwgaSwgYSkgPT4gISFyIHx8IGkgPiBhLmxlbmd0aCAtIDIpXG4gICAgICAgICAgICAubWFwKChtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFtKSBtID0gJzAnO1xuICAgICAgICAgICAgICAgIHJldHVybiBpIDwgMSA/IG0gOiBtLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJzonKSB8fCAnMDowMCdcbiAgICApO1xufVxuXG5leHBvcnQgY2xhc3MgQXBwbGVNdXNpYyB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICByZXR1cm4gQXBwbGVNdXNpYztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHNlYXJjaChxdWVyeTogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9tdXNpYy5hcHBsZS5jb20vdXMvc2VhcmNoP3Rlcm09JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfWA7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gYXdhaXQgZ2V0SFRNTCh1cmwpO1xuICAgICAgICAgICAgaWYgKCFub2RlKSByZXR1cm4gW107XG5cbiAgICAgICAgICAgIGNvbnN0IHJhd0RhdGEgPSBub2RlLmdldEVsZW1lbnRCeUlkKCdzZXJpYWxpemVkLXNlcnZlci1kYXRhJyk7XG4gICAgICAgICAgICBpZiAoIXJhd0RhdGEpIHJldHVybiBbXTtcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmF3RGF0YS5pbm5lclRleHQpWzBdLmRhdGEuc2VjdGlvbnM7XG4gICAgICAgICAgICBjb25zdCB0cmFja3MgPSBkYXRhLmZpbmQoKHM6IGFueSkgPT4gcy5pdGVtS2luZCA9PT0gJ3RyYWNrTG9ja3VwJyk/Lml0ZW1zO1xuICAgICAgICAgICAgaWYgKCF0cmFja3MpIHJldHVybiBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHRyYWNrcy5tYXAoKHRyYWNrOiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgaWQ6IHRyYWNrLmNvbnRlbnREZXNjcmlwdG9yLmlkZW50aWZpZXJzLnN0b3JlQWRhbUlELFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0cmFjay5kdXJhdGlvbiB8fCAnMDowMCcsXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrLnRpdGxlLFxuICAgICAgICAgICAgICAgIHVybDogdHJhY2suY29udGVudERlc2NyaXB0b3IudXJsLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdHJhY2s/LmFydHdvcms/LmRpY3Rpb25hcnlcbiAgICAgICAgICAgICAgICAgICAgPyBtYWtlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHRyYWNrLmFydHdvcmsuZGljdGlvbmFyeS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdHJhY2suYXJ0d29yay5kaWN0aW9uYXJ5LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRyYWNrLmFydHdvcmsuZGljdGlvbmFyeS53aWR0aFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIDogJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZycsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRyYWNrLnN1YnRpdGxlTGlua3M/LlswXT8udGl0bGUgPz8gJ1Vua25vd24gQXJ0aXN0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldFNvbmdJbmZvRmFsbGJhY2socmVzOiBIVE1MRWxlbWVudCwgbmFtZTogc3RyaW5nLCBpZDogc3RyaW5nLCBsaW5rOiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFUYWdzID0gcmVzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZXRhJyk7XG4gICAgICAgICAgICBpZiAoIW1ldGFUYWdzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gbWV0YVRhZ3MuZmluZCgocikgPT4gci5nZXRBdHRyaWJ1dGUoJ25hbWUnKSA9PT0gJ2FwcGxlOnRpdGxlJyk/LmdldEF0dHJpYnV0ZSgnY29udGVudCcpIHx8IHJlcy5xdWVyeVNlbGVjdG9yKCd0aXRsZScpPy5pbm5lclRleHQgfHwgbmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJZCA9IG1ldGFUYWdzLmZpbmQoKHIpID0+IHIuZ2V0QXR0cmlidXRlKCduYW1lJykgPT09ICdhcHBsZTpjb250ZW50X2lkJyk/LmdldEF0dHJpYnV0ZSgnY29udGVudCcpIHx8IGlkO1xuICAgICAgICAgICAgY29uc3QgZHVyYXRpb25SYXcgPSBtZXRhVGFncy5maW5kKChyKSA9PiByLmdldEF0dHJpYnV0ZSgncHJvcGVydHknKSA9PT0gJ211c2ljOnNvbmc6ZHVyYXRpb24nKT8uZ2V0QXR0cmlidXRlKCdjb250ZW50Jyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNvbmcgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGNvbnRlbnRJZCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25SYXdcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUR1cmF0aW9uKGR1cmF0aW9uUmF3KVxuICAgICAgICAgICAgICAgICAgICA6IG1ldGFUYWdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKChtKSA9PiBtLmdldEF0dHJpYnV0ZSgnbmFtZScpID09PSAnYXBwbGU6ZGVzY3JpcHRpb24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/LnRleHRDb250ZW50LnNwbGl0KCdEdXJhdGlvbjogJyk/LlsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJ1wiJyk/LlswXSB8fCAnMDowMCcsXG4gICAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgICAgdXJsOiBsaW5rLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDpcbiAgICAgICAgICAgICAgICAgICAgbWV0YVRhZ3MuZmluZCgocikgPT4gWydvZzppbWFnZTpzZWN1cmVfdXJsJywgJ29nOmltYWdlJ10uaW5jbHVkZXMoci5nZXRBdHRyaWJ1dGUoJ3Byb3BlcnR5JykhKSk/LmdldEF0dHJpYnV0ZSgnY29udGVudCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICdodHRwczovL211c2ljLmFwcGxlLmNvbS9hc3NldHMvZmF2aWNvbi9mYXZpY29uLTE4MC5wbmcnLFxuICAgICAgICAgICAgICAgIGFydGlzdDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiByZXMucXVlcnlTZWxlY3RvcignLnNvbmctc3VidGl0bGVzX19hcnRpc3RzPmEnKT8udGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnQXBwbGUgTXVzaWMnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHNvbmc7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldFNvbmdJbmZvKGxpbms6IHN0cmluZykge1xuICAgICAgICBpZiAoIVF1ZXJ5UmVzb2x2ZXIucmVnZXguYXBwbGVNdXNpY1NvbmdSZWdleC50ZXN0KGxpbmspKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwobGluayk7XG4gICAgICAgIGNvbnN0IGlkID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2knKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHVybC5wYXRobmFtZS5zcGxpdCgnYWxidW0vJylbMV0/LnNwbGl0KCcvJylbMF07XG5cbiAgICAgICAgaWYgKCFpZCB8fCAhbmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0SFRNTChgaHR0cHM6Ly9tdXNpYy5hcHBsZS5jb20vdXMvc29uZy8ke25hbWV9LyR7aWR9YCk7XG4gICAgICAgIGlmICghcmVzKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGF0YXNyYyA9XG4gICAgICAgICAgICAgICAgcmVzLmdldEVsZW1lbnRCeUlkKCdzZXJpYWxpemVkLXNlcnZlci1kYXRhJyk/LmlubmVyVGV4dCB8fCByZXMuaW5uZXJUZXh0LnNwbGl0KCc8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9qc29uXCIgaWQ9XCJzZXJpYWxpemVkLXNlcnZlci1kYXRhXCI+Jyk/LlsxXT8uc3BsaXQoJzwvc2NyaXB0PicpPy5bMF07XG4gICAgICAgICAgICBpZiAoIWRhdGFzcmMpIHRocm93ICdub3QgZm91bmQnO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZGF0YXNyYylbMF0uZGF0YS5zZW9EYXRhO1xuICAgICAgICAgICAgY29uc3Qgc29uZyA9IGRhdGEub2dTb25nc1swXT8uYXR0cmlidXRlcztcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogZGF0YS5vZ1NvbmdzWzBdPy5pZCB8fCBkYXRhLmFwcGxlQ29udGVudElkIHx8IGlkLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBzb25nPy5kdXJhdGlvbkluTWlsbGlzIHx8ICcwOjAwJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogc29uZz8ubmFtZSB8fCBkYXRhLmFwcGxlVGl0bGUsXG4gICAgICAgICAgICAgICAgdXJsOiBzb25nPy51cmwgfHwgZGF0YS51cmwgfHwgbGluayxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNvbmc/LmFydHdvcmtcbiAgICAgICAgICAgICAgICAgICAgPyBtYWtlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvbmcuYXJ0d29yay51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogc29uZy5hcnR3b3JrLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHNvbmcuYXJ0d29yay53aWR0aFxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIDogZGF0YS5hcnR3b3JrVXJsXG4gICAgICAgICAgICAgICAgICAgID8gbWFrZUltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBkYXRhLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGRhdGEud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogZGF0YS5hcnR3b3JrVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHQ6IGRhdGEuZmlsZVR5cGUgfHwgJ2pwZydcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICA6ICdodHRwczovL211c2ljLmFwcGxlLmNvbS9hc3NldHMvZmF2aWNvbi9mYXZpY29uLTE4MC5wbmcnLFxuICAgICAgICAgICAgICAgIGFydGlzdDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb25nPy5hcnRpc3ROYW1lIHx8IGRhdGEuc29jaWFsVGl0bGUgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29uZ0luZm9GYWxsYmFjayhyZXMsIG5hbWUsIGlkLCBsaW5rKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0UGxheWxpc3RJbmZvKGxpbms6IHN0cmluZykge1xuICAgICAgICBpZiAoIVF1ZXJ5UmVzb2x2ZXIucmVnZXguYXBwbGVNdXNpY1BsYXlsaXN0UmVnZXgudGVzdChsaW5rKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIVE1MKGxpbmspO1xuICAgICAgICBpZiAoIXJlcykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFzcmMgPVxuICAgICAgICAgICAgICAgIHJlcy5nZXRFbGVtZW50QnlJZCgnc2VyaWFsaXplZC1zZXJ2ZXItZGF0YScpPy5pbm5lclRleHQgfHwgcmVzLmlubmVyVGV4dC5zcGxpdCgnPHNjcmlwdCB0eXBlPVwiYXBwbGljYXRpb24vanNvblwiIGlkPVwic2VyaWFsaXplZC1zZXJ2ZXItZGF0YVwiPicpPy5bMV0/LnNwbGl0KCc8L3NjcmlwdD4nKT8uWzBdO1xuICAgICAgICAgICAgaWYgKCFkYXRhc3JjKSB0aHJvdyAnbm90IGZvdW5kJztcbiAgICAgICAgICAgIGNvbnN0IHBsID0gSlNPTi5wYXJzZShkYXRhc3JjKVswXS5kYXRhLnNlb0RhdGE7XG4gICAgICAgICAgICBjb25zdCB0aHVtYm5haWwgPSBwbC5hcnR3b3JrVXJsXG4gICAgICAgICAgICAgICAgPyBtYWtlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGwuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwbC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBsLmFydHdvcmtVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgZXh0OiBwbC5maWxlVHlwZSB8fCAnanBnJ1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6ICdodHRwczovL211c2ljLmFwcGxlLmNvbS9hc3NldHMvZmF2aWNvbi9mYXZpY29uLTE4MC5wbmcnO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogcGwuYXBwbGVDb250ZW50SWQsXG4gICAgICAgICAgICAgICAgdGl0bGU6IHBsLmFwcGxlVGl0bGUsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgIGFydGlzdDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwbC5vZ1NvbmdzPy5bMF0/LmF0dHJpYnV0ZXM/LmFydGlzdE5hbWUgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXJsOiBwbC51cmwsXG4gICAgICAgICAgICAgICAgdHJhY2tzOlxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAgICAgcGwub2dTb25ncz8ubWFwKChtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvbmcgPSBtLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBzb25nLmR1cmF0aW9uSW5NaWxsaXMgfHwgJzA6MDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzb25nLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb25nLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNvbmcuYXJ0d29ya1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG1ha2VJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc29uZy5hcnR3b3JrLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzb25nLmFydHdvcmsuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogc29uZy5hcnR3b3JrLndpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNvbmcuYXJ0aXN0TmFtZSB8fCAnQXBwbGUgTXVzaWMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSkgfHwgW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldEFsYnVtSW5mbyhsaW5rOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFRdWVyeVJlc29sdmVyLnJlZ2V4LmFwcGxlTXVzaWNBbGJ1bVJlZ2V4LnRlc3QobGluaykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0SFRNTChsaW5rKTtcbiAgICAgICAgaWYgKCFyZXMpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhc3JjID1cbiAgICAgICAgICAgICAgICByZXMuZ2V0RWxlbWVudEJ5SWQoJ3NlcmlhbGl6ZWQtc2VydmVyLWRhdGEnKT8uaW5uZXJUZXh0IHx8IHJlcy5pbm5lclRleHQuc3BsaXQoJzxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2pzb25cIiBpZD1cInNlcmlhbGl6ZWQtc2VydmVyLWRhdGFcIj4nKT8uWzFdPy5zcGxpdCgnPC9zY3JpcHQ+Jyk/LlswXTtcbiAgICAgICAgICAgIGlmICghZGF0YXNyYykgdGhyb3cgJ25vdCBmb3VuZCc7XG4gICAgICAgICAgICBjb25zdCBwbCA9IEpTT04ucGFyc2UoZGF0YXNyYylbMF0uZGF0YS5zZW9EYXRhO1xuICAgICAgICAgICAgY29uc3QgdGh1bWJuYWlsID0gcGwuYXJ0d29ya1VybFxuICAgICAgICAgICAgICAgID8gbWFrZUltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHBsLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogcGwud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgdXJsOiBwbC5hcnR3b3JrVXJsLFxuICAgICAgICAgICAgICAgICAgICAgIGV4dDogcGwuZmlsZVR5cGUgfHwgJ2pwZydcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9tdXNpYy5hcHBsZS5jb20vYXNzZXRzL2Zhdmljb24vZmF2aWNvbi0xODAucG5nJztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IHBsLmFwcGxlQ29udGVudElkLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwbC5hcHBsZVRpdGxlLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICBhcnRpc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcGwub2dTb25ncz8uWzBdPy5hdHRyaWJ1dGVzPy5hcnRpc3ROYW1lIHx8ICdBcHBsZSBNdXNpYydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVybDogcGwudXJsLFxuICAgICAgICAgICAgICAgIHRyYWNrczpcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgIHBsLm9nU29uZ3M/Lm1hcCgobTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb25nID0gbS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogc29uZy5kdXJhdGlvbkluTWlsbGlzIHx8ICcwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc29uZy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc29uZy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzb25nLmFydHdvcmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBtYWtlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvbmcuYXJ0d29yay51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogc29uZy5hcnR3b3JrLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHNvbmcuYXJ0d29yay53aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFydGlzdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb25nLmFydGlzdE5hbWUgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pIHx8IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB7IFVBLCBnZXRGZXRjaCB9IGZyb20gJy4uL2V4dHJhY3RvcnMnO1xuXG5jb25zdCBTUF9BTk9OX1RPS0VOX1VSTCA9ICdodHRwczovL29wZW4uc3BvdGlmeS5jb20vZ2V0X2FjY2Vzc190b2tlbj9yZWFzb249dHJhbnNwb3J0JnByb2R1Y3RUeXBlPWVtYmVkJztcbmNvbnN0IFNQX0FDQ0VTU19UT0tFTl9VUkwgPSAnaHR0cHM6Ly9hY2NvdW50cy5zcG90aWZ5LmNvbS9hcGkvdG9rZW4/Z3JhbnRfdHlwZT1jbGllbnRfY3JlZGVudGlhbHMnO1xuY29uc3QgU1BfQkFTRSA9ICdodHRwczovL2FwaS5zcG90aWZ5LmNvbS92MSc7XG5cbmludGVyZmFjZSBTUF9BQ0NFU1NfVE9LRU4ge1xuICAgIHRva2VuOiBzdHJpbmc7XG4gICAgZXhwaXJlc0FmdGVyOiBudW1iZXI7XG4gICAgdHlwZTogJ0JlYXJlcic7XG59XG5cbmV4cG9ydCBjbGFzcyBTcG90aWZ5QVBJIHtcbiAgICBwdWJsaWMgYWNjZXNzVG9rZW46IFNQX0FDQ0VTU19UT0tFTiB8IG51bGwgPSBudWxsO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgY3JlZGVudGlhbHM6IHsgY2xpZW50SWQ6IHN0cmluZyB8IG51bGw7IGNsaWVudFNlY3JldDogc3RyaW5nIHwgbnVsbCB9ID0ge1xuICAgICAgICAgICAgY2xpZW50SWQ6IG51bGwsXG4gICAgICAgICAgICBjbGllbnRTZWNyZXQ6IG51bGxcbiAgICAgICAgfVxuICAgICkge31cblxuICAgIHB1YmxpYyBnZXQgYXV0aG9yaXphdGlvbktleSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNyZWRlbnRpYWxzLmNsaWVudElkIHx8ICF0aGlzLmNyZWRlbnRpYWxzLmNsaWVudFNlY3JldCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShgJHt0aGlzLmNyZWRlbnRpYWxzLmNsaWVudElkfToke3RoaXMuY3JlZGVudGlhbHMuY2xpZW50U2VjcmV0fWApLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVxdWVzdFRva2VuKCkge1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmF1dGhvcml6YXRpb25LZXk7XG5cbiAgICAgICAgaWYgKCFrZXkpIHJldHVybiBhd2FpdCB0aGlzLnJlcXVlc3RBbm9ueW1vdXNUb2tlbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGZXRjaChTUF9BQ0NFU1NfVE9LRU5fVVJMLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmFzaWMgJHtrZXl9YCxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LmFjY2Vzc190b2tlbikgdGhyb3cgJ25vIHRva2VuJztcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB0b2tlbjogYm9keS5hY2Nlc3NfdG9rZW4gYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIGV4cGlyZXNBZnRlcjogYm9keS5leHBpcmVzX2luIGFzIG51bWJlcixcbiAgICAgICAgICAgICAgICB0eXBlOiAnQmVhcmVyJyBhcyBjb25zdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmFjY2Vzc1Rva2VuID0gZGF0YSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVxdWVzdEFub255bW91c1Rva2VuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVxdWVzdEFub255bW91c1Rva2VuKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0RmV0Y2goU1BfQU5PTl9UT0tFTl9VUkwsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogVUEsXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXMub2spIHRocm93ICdub3Rfb2snO1xuXG4gICAgICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LmFjY2Vzc1Rva2VuKSB0aHJvdyAnbm9fYWNjZXNzX3Rva2VuJztcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB0b2tlbjogYm9keS5hY2Nlc3NUb2tlbiBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgZXhwaXJlc0FmdGVyOiBib2R5LmFjY2Vzc1Rva2VuRXhwaXJhdGlvblRpbWVzdGFtcE1zIGFzIG51bWJlcixcbiAgICAgICAgICAgICAgICB0eXBlOiAnQmVhcmVyJyBhcyBjb25zdFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmFjY2Vzc1Rva2VuID0gZGF0YSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaXNUb2tlbkV4cGlyZWQoKSB7XG4gICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpID4gdGhpcy5hY2Nlc3NUb2tlbi5leHBpcmVzQWZ0ZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHNlYXJjaChxdWVyeTogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyByZXFcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVG9rZW5FeHBpcmVkKCkpIGF3YWl0IHRoaXMucmVxdWVzdFRva2VuKCk7XG4gICAgICAgICAgICAvLyBmYWlsZWRcbiAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEZldGNoKGAke1NQX0JBU0V9L3NlYXJjaC8/cT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeSl9JnR5cGU9dHJhY2smbWFya2V0PVVTYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlcy5vaykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IHsgdHJhY2tzOiB7IGl0ZW1zOiBTcG90aWZ5VHJhY2tbXSB9IH0gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YS50cmFja3MuaXRlbXMubWFwKChtKSA9PiAoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBtLm5hbWUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IG0uZHVyYXRpb25fbXMsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiBtLmFydGlzdHMubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oJywgJyksXG4gICAgICAgICAgICAgICAgdXJsOiBtLmV4dGVybmFsX3VybHM/LnNwb3RpZnkgfHwgYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFjay8ke20uaWR9YCxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IG0uYWxidW0uaW1hZ2VzPy5bMF0/LnVybCB8fCBudWxsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UGxheWxpc3QoaWQ6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gcmVxXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Rva2VuRXhwaXJlZCgpKSBhd2FpdCB0aGlzLnJlcXVlc3RUb2tlbigpO1xuICAgICAgICAgICAgLy8gZmFpbGVkXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWNjZXNzVG9rZW4pIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGZXRjaChgJHtTUF9CQVNFfS9wbGF5bGlzdHMvJHtpZH0/bWFya2V0PVVTYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFyZXMub2spIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxfdXJsczogeyBzcG90aWZ5OiBzdHJpbmcgfTtcbiAgICAgICAgICAgICAgICBvd25lcjogeyBkaXNwbGF5X25hbWU6IHN0cmluZyB9O1xuICAgICAgICAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGltYWdlczogeyB1cmw6IHN0cmluZyB9W107XG4gICAgICAgICAgICAgICAgdHJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB7IHRyYWNrOiBTcG90aWZ5VHJhY2sgfVtdO1xuICAgICAgICAgICAgICAgICAgICBuZXh0Pzogc3RyaW5nO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgICAgICAgICAgaWYgKCFkYXRhLnRyYWNrcy5pdGVtcy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCB0OiB7IHRyYWNrOiBTcG90aWZ5VHJhY2sgfVtdID0gZGF0YS50cmFja3MuaXRlbXM7XG5cbiAgICAgICAgICAgIGxldCBuZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQgPSBkYXRhLnRyYWNrcy5uZXh0O1xuXG4gICAgICAgICAgICB3aGlsZSAodHlwZW9mIG5leHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0RmV0Y2gobmV4dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogVUEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcy5vaykgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQYWdlOiB7IGl0ZW1zOiB7IHRyYWNrOiBTcG90aWZ5VHJhY2sgfVtdOyBuZXh0Pzogc3RyaW5nIH0gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHQucHVzaCguLi5uZXh0UGFnZS5pdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0UGFnZS5uZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gdC5tYXAoKHsgdHJhY2s6IG0gfSkgPT4gKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbS5uYW1lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBtLmR1cmF0aW9uX21zLFxuICAgICAgICAgICAgICAgIGFydGlzdDogbS5hcnRpc3RzLm1hcCgobSkgPT4gbS5uYW1lKS5qb2luKCcsICcpLFxuICAgICAgICAgICAgICAgIHVybDogbS5leHRlcm5hbF91cmxzPy5zcG90aWZ5IHx8IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2svJHttLmlkfWAsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBtLmFsYnVtLmltYWdlcz8uWzBdPy51cmwgfHwgbnVsbFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBpZiAoIXRyYWNrcy5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgYXV0aG9yOiBkYXRhLm93bmVyLmRpc3BsYXlfbmFtZSxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGRhdGEuaW1hZ2VzPy5bMF0/LnVybCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgIHVybDogZGF0YS5leHRlcm5hbF91cmxzLnNwb3RpZnkgfHwgYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9wbGF5bGlzdC8ke2lkfWAsXG4gICAgICAgICAgICAgICAgdHJhY2tzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEFsYnVtKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHJlcVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2tlbkV4cGlyZWQoKSkgYXdhaXQgdGhpcy5yZXF1ZXN0VG9rZW4oKTtcbiAgICAgICAgICAgIC8vIGZhaWxlZFxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0RmV0Y2goYCR7U1BfQkFTRX0vYWxidW1zLyR7aWR9P21hcmtldD1VU2AsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogVUEsXG4gICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGAke3RoaXMuYWNjZXNzVG9rZW4udHlwZX0gJHt0aGlzLmFjY2Vzc1Rva2VuLnRva2VufWAsXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgZGF0YToge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsX3VybHM6IHsgc3BvdGlmeTogc3RyaW5nIH07XG4gICAgICAgICAgICAgICAgYXJ0aXN0czogeyBuYW1lOiBzdHJpbmcgfVtdO1xuICAgICAgICAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGltYWdlczogeyB1cmw6IHN0cmluZyB9W107XG4gICAgICAgICAgICAgICAgdHJhY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBTcG90aWZ5VHJhY2tbXTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dD86IHN0cmluZztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgICAgICAgIGlmICghZGF0YS50cmFja3MuaXRlbXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgdDogU3BvdGlmeVRyYWNrW10gPSBkYXRhLnRyYWNrcy5pdGVtcztcblxuICAgICAgICAgICAgbGV0IG5leHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGRhdGEudHJhY2tzLm5leHQ7XG5cbiAgICAgICAgICAgIHdoaWxlICh0eXBlb2YgbmV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGZXRjaChuZXh0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHt0aGlzLmFjY2Vzc1Rva2VuLnR5cGV9ICR7dGhpcy5hY2Nlc3NUb2tlbi50b2tlbn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzLm9rKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFBhZ2U6IHsgaXRlbXM6IFNwb3RpZnlUcmFja1tdOyBuZXh0Pzogc3RyaW5nIH0gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHQucHVzaCguLi5uZXh0UGFnZS5pdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0UGFnZS5uZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gdC5tYXAoKG0pID0+ICh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG0ubmFtZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogbS5kdXJhdGlvbl9tcyxcbiAgICAgICAgICAgICAgICBhcnRpc3Q6IG0uYXJ0aXN0cy5tYXAoKG0pID0+IG0ubmFtZSkuam9pbignLCAnKSxcbiAgICAgICAgICAgICAgICB1cmw6IG0uZXh0ZXJuYWxfdXJscz8uc3BvdGlmeSB8fCBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrLyR7bS5pZH1gLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS5pbWFnZXM/LlswXT8udXJsIHx8IG51bGxcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgaWYgKCF0cmFja3MubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgIGF1dGhvcjogZGF0YS5hcnRpc3RzLm1hcCgobSkgPT4gbS5uYW1lKS5qb2luKCcsICcpLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS5pbWFnZXM/LlswXT8udXJsIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgdXJsOiBkYXRhLmV4dGVybmFsX3VybHMuc3BvdGlmeSB8fCBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL2FsYnVtLyR7aWR9YCxcbiAgICAgICAgICAgICAgICB0cmFja3NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BvdGlmeVRyYWNrIHtcbiAgICBhbGJ1bToge1xuICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgIGhlaWdodDogbnVtYmVyO1xuICAgICAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgICAgICAgICB3aWR0aDogbnVtYmVyO1xuICAgICAgICB9W107XG4gICAgfTtcbiAgICBhcnRpc3RzOiB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICB9W107XG4gICAgZHVyYXRpb25fbXM6IG51bWJlcjtcbiAgICBleHBsaWNpdDogYm9vbGVhbjtcbiAgICBleHRlcm5hbF91cmxzOiB7IHNwb3RpZnk6IHN0cmluZyB9O1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xufVxuIiwgImltcG9ydCB7IEJhc2VFeHRyYWN0b3IsIEV4dHJhY3RvckluZm8sIEV4dHJhY3RvclNlYXJjaENvbnRleHQsIFBsYXlsaXN0LCBRdWVyeVR5cGUsIFNlYXJjaFF1ZXJ5VHlwZSwgVHJhY2ssIFV0aWwgfSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgdHlwZSB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IFlvdXR1YmVFeHRyYWN0b3IgfSBmcm9tICcuL1lvdXR1YmVFeHRyYWN0b3InO1xuaW1wb3J0IHsgU3RyZWFtRk4sIGdldEZldGNoLCBsb2FkWXRkbCwgcHVsbFlUTWV0YWRhdGEgfSBmcm9tICcuL2NvbW1vbi9oZWxwZXInO1xuaW1wb3J0IHNwb3RpZnksIHsgU3BvdGlmeSwgU3BvdGlmeUFsYnVtLCBTcG90aWZ5UGxheWxpc3QsIFNwb3RpZnlTb25nIH0gZnJvbSAnc3BvdGlmeS11cmwtaW5mbyc7XG5pbXBvcnQgeyBTcG90aWZ5QVBJIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuaW1wb3J0IHsgQnJpZGdlUHJvdmlkZXIgfSBmcm9tICcuL2NvbW1vbi9CcmlkZ2VQcm92aWRlcic7XG5cbmNvbnN0IHJlID0gL14oPzpodHRwczpcXC9cXC9vcGVuXFwuc3BvdGlmeVxcLmNvbVxcLyhpbnRsLShbYS16XXxbQS1aXSl7MCwzfVxcLyk/KD86dXNlclxcL1tBLVphLXowLTldK1xcLyk/fHNwb3RpZnk6KShhbGJ1bXxwbGF5bGlzdHx0cmFjaykoPzpbLzpdKShbQS1aYS16MC05XSspLiokLztcblxuZXhwb3J0IGludGVyZmFjZSBTcG90aWZ5RXh0cmFjdG9ySW5pdCB7XG4gICAgY2xpZW50SWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIGNsaWVudFNlY3JldD86IHN0cmluZyB8IG51bGw7XG4gICAgY3JlYXRlU3RyZWFtPzogKGV4dDogU3BvdGlmeUV4dHJhY3RvciwgdXJsOiBzdHJpbmcpID0+IFByb21pc2U8UmVhZGFibGUgfCBzdHJpbmc+O1xuICAgIGJyaWRnZVByb3ZpZGVyPzogQnJpZGdlUHJvdmlkZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBTcG90aWZ5RXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvcjxTcG90aWZ5RXh0cmFjdG9ySW5pdD4ge1xuICAgIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9ICdjb20uZGlzY29yZC1wbGF5ZXIuc3BvdGlmeWV4dHJhY3RvcicgYXMgY29uc3Q7XG4gICAgcHJpdmF0ZSBfc3RyZWFtITogU3RyZWFtRk47XG4gICAgcHJpdmF0ZSBfaXNZdGRsID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfbGliITogU3BvdGlmeTtcbiAgICBwcml2YXRlIF9jcmVkZW50aWFscyA9IHtcbiAgICAgICAgY2xpZW50SWQ6IHRoaXMub3B0aW9ucy5jbGllbnRJZCB8fCBwcm9jZXNzLmVudi5EUF9TUE9USUZZX0NMSUVOVF9JRCB8fCBudWxsLFxuICAgICAgICBjbGllbnRTZWNyZXQ6IHRoaXMub3B0aW9ucy5jbGllbnRTZWNyZXQgfHwgcHJvY2Vzcy5lbnYuRFBfU1BPVElGWV9DTElFTlRfU0VDUkVUIHx8IG51bGxcbiAgICB9O1xuICAgIHB1YmxpYyBpbnRlcm5hbCA9IG5ldyBTcG90aWZ5QVBJKHRoaXMuX2NyZWRlbnRpYWxzKTtcblxuICAgIHB1YmxpYyBhc3luYyBhY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gc2tpcCBpZiB3ZSBoYXZlIGEgYnJpZGdlIHByb3ZpZGVyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIpIHJldHVybjtcblxuICAgICAgICBjb25zdCBmbiA9IHRoaXMub3B0aW9ucy5jcmVhdGVTdHJlYW07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5faXNZdGRsID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0gPSAocTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKHRoaXMsIHEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGliID0gYXdhaXQgbG9hZFl0ZGwodGhpcy5jb250ZXh0LnBsYXllci5vcHRpb25zLnl0ZGxPcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3RyZWFtID0gbGliLnN0cmVhbTtcbiAgICAgICAgdGhpcy5fbGliID0gc3BvdGlmeShnZXRGZXRjaCk7XG4gICAgICAgIHRoaXMuX2lzWXRkbCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmludGVybmFsLmlzVG9rZW5FeHBpcmVkKCkpIGF3YWl0IHRoaXMuaW50ZXJuYWwucmVxdWVzdFRva2VuKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlKHF1ZXJ5OiBzdHJpbmcsIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICByZXR1cm4gKDxTZWFyY2hRdWVyeVR5cGVbXT5bXG4gICAgICAgICAgICBRdWVyeVR5cGUuU1BPVElGWV9BTEJVTSxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5TUE9USUZZX1BMQVlMSVNULFxuICAgICAgICAgICAgUXVlcnlUeXBlLlNQT1RJRllfU09ORyxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5TUE9USUZZX1NFQVJDSCxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BVVRPLFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFVVE9fU0VBUkNIXG4gICAgICAgIF0pLnNvbWUoKHQpID0+IHQgPT09IHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGUodHJhY2suYXV0aG9yIHx8IHRyYWNrLnRpdGxlLCB7XG4gICAgICAgICAgICB0eXBlOiBRdWVyeVR5cGUuU1BPVElGWV9TRUFSQ0gsXG4gICAgICAgICAgICByZXF1ZXN0ZWRCeTogdHJhY2sucmVxdWVzdGVkQnlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGhhbmRsZShxdWVyeTogc3RyaW5nLCBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KTogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BVVRPOlxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuQVVUT19TRUFSQ0g6XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5TUE9USUZZX1NFQVJDSDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmludGVybmFsLnNlYXJjaChxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWFwKChzcG90aWZ5RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeURhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGAke3Nwb3RpZnlEYXRhLnRpdGxlfSBieSAke3Nwb3RpZnlEYXRhLmFydGlzdH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogc3BvdGlmeURhdGEuYXJ0aXN0ID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5RGF0YS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzcG90aWZ5RGF0YS50aHVtYm5haWwgfHwgJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMoc3BvdGlmeURhdGEuZHVyYXRpb24gPz8gMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogUXVlcnlUeXBlLlNQT1RJRllfU09ORyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIHRyYWNrKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIHRyYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlNQT1RJRllfU09ORzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwb3RpZnlEYXRhOiBTcG90aWZ5U29uZyB8IHZvaWQgPSBhd2FpdCB0aGlzLl9saWIuZ2V0RGF0YShxdWVyeSwgY29udGV4dC5yZXF1ZXN0T3B0aW9ucyBhcyB1bmtub3duIGFzIFJlcXVlc3RJbml0KS5jYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgICAgIGlmICghc3BvdGlmeURhdGEpIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BvdGlmeVRyYWNrOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5RGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGAke3Nwb3RpZnlEYXRhLm5hbWV9IGJ5ICR7c3BvdGlmeURhdGEuYXJ0aXN0cy5tYXAoKG0pID0+IG0ubmFtZSkuam9pbignLCAnKX1gLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHNwb3RpZnlEYXRhLmFydGlzdHNbMF0/Lm5hbWUgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5RGF0YS5pZCA/IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2svJHtzcG90aWZ5RGF0YS5pZH1gIDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc3BvdGlmeURhdGEuY292ZXJBcnQ/LnNvdXJjZXM/LlswXT8udXJsIHx8ICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhzcG90aWZ5RGF0YS5kdXJhdGlvbiA/PyBzcG90aWZ5RGF0YS5tYXhEdXJhdGlvbiA/PyAwKSksXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCBzcG90aWZ5VHJhY2spKS5kYXRhIDogYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgc3BvdGlmeVRyYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc3BvdGlmeVRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbc3BvdGlmeVRyYWNrXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuU1BPVElGWV9QTEFZTElTVDoge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcXVlcnlUeXBlLCBpZCB9ID0gdGhpcy5wYXJzZShxdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWVyeVR5cGUgIT09ICdwbGF5bGlzdCcpIHRocm93ICdlcnInO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwb3RpZnlQbGF5bGlzdCA9IGF3YWl0IHRoaXMuaW50ZXJuYWwuZ2V0UGxheWxpc3QoaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNwb3RpZnlQbGF5bGlzdCkgdGhyb3cgJ2Vycic7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNwb3RpZnlQbGF5bGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHNwb3RpZnlQbGF5bGlzdC5uYW1lID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzcG90aWZ5UGxheWxpc3QudGh1bWJuYWlsID8/ICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BsYXlsaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3BvdGlmeVBsYXlsaXN0LmF1dGhvciA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbnVsbCBhcyB1bmtub3duIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogc3BvdGlmeVBsYXlsaXN0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5UGxheWxpc3QudXJsIHx8IHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3UGxheWxpc3Q6IHNwb3RpZnlQbGF5bGlzdFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC50cmFja3MgPSBzcG90aWZ5UGxheWxpc3QudHJhY2tzLm1hcCgoc3BvdGlmeURhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGE6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeURhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGAke3Nwb3RpZnlEYXRhLnRpdGxlfSBieSAke3Nwb3RpZnlEYXRhLmFydGlzdH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogc3BvdGlmeURhdGEuYXJ0aXN0ID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5RGF0YS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzcG90aWZ5RGF0YS50aHVtYm5haWwgfHwgJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMoc3BvdGlmeURhdGEuZHVyYXRpb24gPz8gMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogUXVlcnlUeXBlLlNQT1RJRllfU09ORyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIGRhdGEpKS5kYXRhIDogYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXh0cmFjdG9yID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KSBhcyBUcmFja1tdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcG90aWZ5UGxheWxpc3Q6IFNwb3RpZnlQbGF5bGlzdCB8IHZvaWQgPSBhd2FpdCB0aGlzLl9saWIuZ2V0RGF0YShxdWVyeSwgY29udGV4dC5yZXF1ZXN0T3B0aW9ucyBhcyB1bmtub3duIGFzIFJlcXVlc3RJbml0KS5jYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNwb3RpZnlQbGF5bGlzdCkgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5bGlzdCA9IG5ldyBQbGF5bGlzdCh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeVBsYXlsaXN0Lm5hbWUgPz8gc3BvdGlmeVBsYXlsaXN0LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHNwb3RpZnlQbGF5bGlzdC50aXRsZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc3BvdGlmeVBsYXlsaXN0LmNvdmVyQXJ0Py5zb3VyY2VzPy5bMF0/LnVybCA/PyAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHNwb3RpZnlQbGF5bGlzdC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzcG90aWZ5UGxheWxpc3Quc3VidGl0bGUgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG51bGwgYXMgdW5rbm93biBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHNwb3RpZnlQbGF5bGlzdC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc3BvdGlmeVBsYXlsaXN0LmlkID8gYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9wbGF5bGlzdC8ke3Nwb3RpZnlQbGF5bGlzdC5pZH1gIDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICByYXdQbGF5bGlzdDogc3BvdGlmeVBsYXlsaXN0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IHNwb3RpZnlQbGF5bGlzdC50cmFja0xpc3QubWFwKChtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG0udGl0bGUgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG0udGl0bGUgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBtLnN1YnRpdGxlID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtLnVpZCA/IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2tzLyR7bS51aWR9YCA6IHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3Nwb3RpZnlTb25nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCBkYXRhKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV4dHJhY3RvciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSkgYXMgVHJhY2tbXTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5TUE9USUZZX0FMQlVNOiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBxdWVyeVR5cGUsIGlkIH0gPSB0aGlzLnBhcnNlKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5VHlwZSAhPT0gJ2FsYnVtJykgdGhyb3cgJ2Vycic7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BvdGlmeUFsYnVtID0gYXdhaXQgdGhpcy5pbnRlcm5hbC5nZXRBbGJ1bShpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BvdGlmeUFsYnVtKSB0aHJvdyAnZXJyJztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5bGlzdCA9IG5ldyBQbGF5bGlzdCh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeUFsYnVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc3BvdGlmeUFsYnVtLm5hbWUgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNwb3RpZnlBbGJ1bS50aHVtYm5haWwgPz8gJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYWxidW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzcG90aWZ5QWxidW0uYXV0aG9yID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBudWxsIGFzIHVua25vd24gYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzcG90aWZ5QWxidW0uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlBbGJ1bS51cmwgfHwgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICByYXdQbGF5bGlzdDogc3BvdGlmeUFsYnVtXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IHNwb3RpZnlBbGJ1bS50cmFja3MubWFwKChzcG90aWZ5RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YTogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5RGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7c3BvdGlmeURhdGEudGl0bGV9IGJ5ICR7c3BvdGlmeURhdGEuYXJ0aXN0fWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBzcG90aWZ5RGF0YS5hcnRpc3QgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlEYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNwb3RpZnlEYXRhLnRodW1ibmFpbCB8fCAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhzcG90aWZ5RGF0YS5kdXJhdGlvbiA/PyAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBRdWVyeVR5cGUuU1BPVElGWV9TT05HLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3BvdGlmeURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIgPyAoYXdhaXQgdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyLnJlc29sdmUodGhpcywgZGF0YSkpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0pIGFzIFRyYWNrW107XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3QsIHRyYWNrczogcGxheWxpc3QudHJhY2tzIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsYnVtOiBTcG90aWZ5QWxidW0gfCB2b2lkID0gYXdhaXQgdGhpcy5fbGliLmdldERhdGEocXVlcnksIGNvbnRleHQucmVxdWVzdE9wdGlvbnMgYXMgdW5rbm93biBhcyBSZXF1ZXN0SW5pdCkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGJ1bSkgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5bGlzdCA9IG5ldyBQbGF5bGlzdCh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYWxidW0ubmFtZSA/PyBhbGJ1bS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhbGJ1bS50aXRsZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogYWxidW0uY292ZXJBcnQ/LnNvdXJjZXM/LlswXT8udXJsID8/ICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYWxidW0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYWxidW0uc3VidGl0bGUgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG51bGwgYXMgdW5rbm93biBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGFsYnVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBhbGJ1bS5pZCA/IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vcGxheWxpc3QvJHthbGJ1bS5pZH1gIDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICByYXdQbGF5bGlzdDogYWxidW1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QudHJhY2tzID0gYWxidW0udHJhY2tMaXN0Lm1hcCgobSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YTogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogbS5zdWJ0aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbS51aWQgPyBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrcy8ke20udWlkfWAgOiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6ICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKG0uZHVyYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6ICdzcG90aWZ5U29uZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIgPyAoYXdhaXQgdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyLnJlc29sdmUodGhpcywgZGF0YSkpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0pIGFzIFRyYWNrW107XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3QsIHRyYWNrczogcGxheWxpc3QudHJhY2tzIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjayk6IFByb21pc2U8c3RyaW5nIHwgUmVhZGFibGU+IHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlcikge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXI7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwcm92aWRlci5yZXNvbHZlKHRoaXMsIGluZm8pO1xuICAgICAgICAgICAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBicmlkZ2UgdGhpcyB0cmFjaycpO1xuXG4gICAgICAgICAgICBpbmZvLnNldE1ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICAuLi4oaW5mby5tZXRhZGF0YSB8fCB7fSksXG4gICAgICAgICAgICAgICAgYnJpZGdlOiBkYXRhLmRhdGFcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuc3RyZWFtKGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9zdHJlYW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGluaXRpYWxpemUgc3RyZWFtaW5nIGFwaSBmb3IgJyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSdgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cmwgPSBpbmZvLnVybDtcblxuICAgICAgICBpZiAodGhpcy5faXNZdGRsKSB7XG4gICAgICAgICAgICBpZiAoWW91dHViZUV4dHJhY3Rvci52YWxpZGF0ZVVSTChpbmZvLnJhdy51cmwpKSB1cmwgPSBpbmZvLnJhdy51cmw7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgaW5mbyk7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGEpXG4gICAgICAgICAgICAgICAgICAgIGluZm8uc2V0TWV0YWRhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGluZm8ubWV0YWRhdGEgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBtZXRhXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IF91cmwgPSBtZXRhPy51cmw7XG4gICAgICAgICAgICAgICAgaWYgKCFfdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCByZXNvdXJjZXMgZm9yIHl0ZGwgc3RyZWFtaW5nJyk7XG4gICAgICAgICAgICAgICAgaW5mby5yYXcudXJsID0gdXJsID0gX3VybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW0odXJsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGFyc2UocTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IFssICwgLCBxdWVyeVR5cGUsIGlkXSA9IHJlLmV4ZWMocSkgfHwgW107XG5cbiAgICAgICAgcmV0dXJuIHsgcXVlcnlUeXBlLCBpZCB9O1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBCYXNlRXh0cmFjdG9yLCBUcmFjayB9IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB7IFNvdW5kY2xvdWRUcmFja1YyIH0gZnJvbSAnc291bmRjbG91ZC50cyc7XG5pbXBvcnQgeyBWaWRlbyB9IGZyb20gJ3lvdXR1YmUtc3InO1xuaW1wb3J0IHsgU291bmRDbG91ZEV4dHJhY3RvciB9IGZyb20gJy4uL1NvdW5kQ2xvdWRFeHRyYWN0b3InO1xuaW1wb3J0IHsgbG9hZFl0ZGwsIHB1bGxTQ01ldGFkYXRhLCBwdWxsWVRNZXRhZGF0YSB9IGZyb20gJy4vaGVscGVyJztcblxuZXhwb3J0IGVudW0gQnJpZGdlU291cmNlIHtcbiAgICBTb3VuZENsb3VkID0gJ3NvdW5kY2xvdWQnLFxuICAgIFlvdVR1YmUgPSAneW91dHViZSdcbn1cblxuZXhwb3J0IHR5cGUgSUJyaWRnZVNvdXJjZSA9ICdzb3VuZGNsb3VkJyB8ICd5b3V0dWJlJztcblxuZXhwb3J0IGNsYXNzIEJyaWRnZVByb3ZpZGVyIHtcbiAgICBwdWJsaWMgYnJpZGdlU291cmNlOiBCcmlkZ2VTb3VyY2UgPSBCcmlkZ2VTb3VyY2UuU291bmRDbG91ZDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihzb3VyY2U6IElCcmlkZ2VTb3VyY2UpIHtcbiAgICAgICAgdGhpcy5zZXRCcmlkZ2VTb3VyY2Uoc291cmNlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QnJpZGdlU291cmNlKHNvdXJjZTogQnJpZGdlU291cmNlIHwgSUJyaWRnZVNvdXJjZSkge1xuICAgICAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICBjYXNlIEJyaWRnZVNvdXJjZS5Tb3VuZENsb3VkOlxuICAgICAgICAgICAgICAgIHRoaXMuYnJpZGdlU291cmNlID0gQnJpZGdlU291cmNlLlNvdW5kQ2xvdWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgIGNhc2UgQnJpZGdlU291cmNlLllvdVR1YmU6XG4gICAgICAgICAgICAgICAgdGhpcy5icmlkZ2VTb3VyY2UgPSBCcmlkZ2VTb3VyY2UuWW91VHViZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBicmlkZ2Ugc291cmNlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaXNTb3VuZENsb3VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5icmlkZ2VTb3VyY2UgPT09IEJyaWRnZVNvdXJjZS5Tb3VuZENsb3VkO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc1lvdVR1YmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyaWRnZVNvdXJjZSA9PT0gQnJpZGdlU291cmNlLllvdVR1YmU7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlc29sdmUoZXh0OiBCYXNlRXh0cmFjdG9yLCB0cmFjazogVHJhY2spIHtcbiAgICAgICAgY29uc3QgaXNTb3VuZGNsb3VkID0gdGhpcy5pc1NvdW5kQ2xvdWQoKTtcbiAgICAgICAgY29uc3QgYnJpZGdlZm4gPSBpc1NvdW5kY2xvdWQgPyBwdWxsU0NNZXRhZGF0YSA6IHB1bGxZVE1ldGFkYXRhO1xuXG4gICAgICAgIC8vIHBhdGNoIHF1ZXJ5XG4gICAgICAgIGNvbnN0IG9sZFFjID0gZXh0LmNyZWF0ZUJyaWRnZVF1ZXJ5O1xuICAgICAgICBpZiAoaXNTb3VuZGNsb3VkKSBleHQuY3JlYXRlQnJpZGdlUXVlcnkgPSAodHJhY2spID0+IGAke3RyYWNrLmF1dGhvcn0gJHt0cmFjay50aXRsZX1gO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBicmlkZ2VmbihleHQsIHRyYWNrKTtcbiAgICAgICAgZXh0LmNyZWF0ZUJyaWRnZVF1ZXJ5ID0gb2xkUWM7XG5cbiAgICAgICAgcmV0dXJuIHsgc291cmNlOiBpc1NvdW5kY2xvdWQgPyAnc291bmRjbG91ZCcgOiAneW91dHViZScsIGRhdGE6IHJlcyB9IGFzIEJyaWRnZWRNZXRhZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc3RyZWFtKG1ldGE6IEJyaWRnZWRNZXRhZGF0YSkge1xuICAgICAgICBpZiAobWV0YS5zb3VyY2UgPT09ICdzb3VuZGNsb3VkJykge1xuICAgICAgICAgICAgaWYgKCFTb3VuZENsb3VkRXh0cmFjdG9yLnNvdW5kY2xvdWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHNvdW5kY2xvdWQgY2xpZW50LCBtYWtlIHN1cmUgU291bmRDbG91ZEV4dHJhY3RvciBpcyBpbnN0YW50aWF0ZWQgcHJvcGVybHkuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBTb3VuZENsb3VkRXh0cmFjdG9yLnNvdW5kY2xvdWQudXRpbC5zdHJlYW1MaW5rKG1ldGEuZGF0YSBhcyBTb3VuZGNsb3VkVHJhY2tWMiwgJ3Byb2dyZXNzaXZlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB5dGRsID0gYXdhaXQgbG9hZFl0ZGwoKTtcbiAgICAgICAgICAgIHJldHVybiB5dGRsLnN0cmVhbSgobWV0YS5kYXRhIGFzIFZpZGVvKS51cmwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgQnJpZGdlZE1ldGFkYXRhIHtcbiAgICBzb3VyY2U6IElCcmlkZ2VTb3VyY2U7XG4gICAgZGF0YTogU291bmRjbG91ZFRyYWNrVjIgfCBWaWRlbyB8IG51bGw7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtB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TSxlQUFlLEtBQUssYUFBYTtBQUN2QyxVQUFNLFdBQVcsZUFBZSxpQkFBaUI7QUFHakQsVUFBTSxRQUFRLElBQUk7QUFDbEIsUUFBSTtBQUFjLFVBQUksb0JBQW9CLENBQUNDLFdBQVUsR0FBR0EsT0FBTSxVQUFVQSxPQUFNO0FBQzlFLFVBQU0sTUFBTSxNQUFNLFNBQVMsS0FBSyxLQUFLO0FBQ3JDLFFBQUksb0JBQW9CO0FBRXhCLFdBQU8sRUFBRSxRQUFRLGVBQWUsZUFBZSxXQUFXLE1BQU0sSUFBSTtBQUFBLEVBQ3hFO0FBQUEsRUFFQSxNQUFhLE9BQU8sTUFBdUI7QUFDdkMsUUFBSSxLQUFLLFdBQVcsY0FBYztBQUM5QixVQUFJLENBQUMsb0JBQW9CLFlBQVk7QUFDakMsY0FBTSxJQUFJLE1BQU0sMkZBQTJGO0FBQUEsTUFDL0c7QUFFQSxhQUFPLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxXQUFXLEtBQUssTUFBMkIsYUFBYTtBQUFBLElBQzdHLE9BQU87QUFDSCxZQUFNLE9BQU8sTUFBTSxTQUFTO0FBQzVCLGFBQU8sS0FBSyxPQUFRLEtBQUssS0FBZSxHQUFHO0FBQUEsSUFDL0M7QUFBQSxFQUNKO0FBQ0o7QUF2RGE7OztBZlROLElBQU0sVUFBa0I7IiwKICAibmFtZXMiOiBbImltcG9ydF95b3V0dWJlX3NyIiwgImltcG9ydF9kaXNjb3JkX3BsYXllciIsICJsaWIiLCAicmUiLCAiR2VuaXVzQ2xpZW50IiwgImltcG9ydF9kaXNjb3JkX3BsYXllciIsICJodHRwcyIsICJodHRwIiwgImltcG9ydF9kaXNjb3JkX3BsYXllciIsICJyZXZlcmJuYXRpb24iLCAiaW1wb3J0X2Rpc2NvcmRfcGxheWVyIiwgImltcG9ydF9odHRwIiwgImltcG9ydF9odHRwcyIsICJodHRwIiwgImh0dHBzIiwgInBhdGgiLCAiaW1wb3J0X2Rpc2NvcmRfcGxheWVyIiwgImltcG9ydF9kaXNjb3JkX3BsYXllciIsICJyIiwgIm0iLCAicmVzIiwgImltcG9ydF9kaXNjb3JkX3BsYXllciIsICJzcG90aWZ5IiwgIkJyaWRnZVNvdXJjZSIsICJ0cmFjayJdCn0K