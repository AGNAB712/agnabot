var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/extractors/SoundCloudExtractor.ts
import {
  BaseExtractor,
  Playlist,
  QueryType,
  Track,
  Util
} from "discord-player";
import * as SoundCloud from "soundcloud.ts";
var _SoundCloudExtractor = class extends BaseExtractor {
  constructor() {
    super(...arguments);
    this.internal = new SoundCloud.default({
      clientId: this.options.clientId,
      oauthToken: this.options.oauthToken,
      proxy: this.options.proxy
    });
  }
  async activate() {
    _SoundCloudExtractor.soundcloud = this.internal;
  }
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [
      QueryType.SOUNDCLOUD,
      QueryType.SOUNDCLOUD_PLAYLIST,
      QueryType.SOUNDCLOUD_SEARCH,
      QueryType.SOUNDCLOUD_TRACK,
      QueryType.AUTO,
      QueryType.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    if (track.queryType === QueryType.SOUNDCLOUD_TRACK)
      return this.handle(track.author || track.title, {
        requestedBy: track.requestedBy,
        type: QueryType.SOUNDCLOUD_SEARCH
      });
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType.SOUNDCLOUD_TRACK: {
        const trackInfo = await this.internal.tracks.getV2(query).catch(Util.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new Track(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.permalink_url,
          duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),
          description: trackInfo.description ?? "",
          thumbnail: trackInfo.artwork_url,
          views: trackInfo.playback_count,
          author: trackInfo.user.username,
          requestedBy: context.requestedBy,
          source: "soundcloud",
          engine: trackInfo,
          queryType: context.type,
          metadata: trackInfo,
          requestMetadata: async () => {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      case QueryType.SOUNDCLOUD_PLAYLIST: {
        const data = await this.internal.playlists.getV2(query).catch(Util.noop);
        if (!data)
          return { playlist: null, tracks: [] };
        const res = new Playlist(this.context.player, {
          title: data.title,
          description: data.description ?? "",
          thumbnail: data.artwork_url ?? data.tracks[0].artwork_url,
          type: "playlist",
          source: "soundcloud",
          author: {
            name: data.user.username,
            url: data.user.permalink_url
          },
          tracks: [],
          id: `${data.id}`,
          url: data.permalink_url,
          rawPlaylist: data
        });
        for (const song of data.tracks) {
          const track = new Track(this.context.player, {
            title: song.title,
            description: song.description ?? "",
            author: song.user.username,
            url: song.permalink_url,
            thumbnail: song.artwork_url,
            duration: Util.buildTimeCode(Util.parseMS(song.duration)),
            views: song.playback_count,
            requestedBy: context.requestedBy,
            playlist: res,
            source: "soundcloud",
            engine: song,
            queryType: context.type,
            metadata: song,
            requestMetadata: async () => {
              return song;
            }
          });
          track.extractor = this;
          track.playlist = res;
          res.tracks.push(track);
        }
        return { playlist: res, tracks: res.tracks };
      }
      default: {
        const tracks = await this.internal.tracks.searchV2({ q: query }).catch(Util.noop);
        if (!tracks || !tracks.collection.length)
          return this.emptyResponse();
        const resolvedTracks = [];
        for (const trackInfo of tracks.collection) {
          const track = new Track(this.context.player, {
            title: trackInfo.title,
            url: trackInfo.permalink_url,
            duration: Util.buildTimeCode(Util.parseMS(trackInfo.duration)),
            description: trackInfo.description ?? "",
            thumbnail: trackInfo.artwork_url,
            views: trackInfo.playback_count,
            author: trackInfo.user.username,
            requestedBy: context.requestedBy,
            source: "soundcloud",
            engine: trackInfo,
            queryType: "soundcloudTrack",
            metadata: trackInfo,
            requestMetadata: async () => {
              return trackInfo;
            }
          });
          track.extractor = this;
          resolvedTracks.push(track);
        }
        return { playlist: null, tracks: resolvedTracks };
      }
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const url = await this.internal.util.streamLink(info.url).catch(Util.noop);
    if (!url)
      throw new Error("Could not extract stream from this track source");
    return url;
  }
};
var SoundCloudExtractor = _SoundCloudExtractor;
__name(SoundCloudExtractor, "SoundCloudExtractor");
SoundCloudExtractor.identifier = "com.discord-player.soundcloudextractor";
SoundCloudExtractor.soundcloud = null;

// src/extractors/YoutubeExtractor.ts
import { YouTube as YouTube2 } from "youtube-sr";
import {
  BaseExtractor as BaseExtractor2,
  Playlist as Playlist2,
  QueryType as QueryType2,
  Track as Track2,
  Util as Util2
} from "discord-player";

// src/extractors/common/helper.ts
import { YouTube } from "youtube-sr";
var factory;
var createImport = /* @__PURE__ */ __name((lib) => import(lib).catch(() => null), "createImport");
var UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.49";
var YouTubeLibs = [
  "ytdl-core",
  "@distube/ytdl-core",
  "play-dl",
  "yt-stream"
];
var ERR_NO_YT_LIB = new Error(`Could not load youtube library. Install one of ${YouTubeLibs.map((lib) => `"${lib}"`).join(", ")}`);
var forcedLib = process.env.DP_FORCE_YTDL_MOD;
if (forcedLib)
  YouTubeLibs.unshift(forcedLib);
var getFetch = typeof fetch !== "undefined" ? fetch : async (info, init) => {
  let dy;
  if (dy = await createImport("undici")) {
    return (dy.fetch || dy.default.fetch)(info, init);
  } else if (dy = await createImport("node-fetch")) {
    return (dy.fetch || dy.default)(info, init);
  } else {
    throw new Error("No fetch lib found");
  }
};
async function loadYtdl(options, force = false) {
  if (factory && !force)
    return factory;
  let lib, _ytLibName, _stream;
  for (const ytlib of YouTubeLibs) {
    lib = await import(ytlib).then(
      (m) => m,
      () => null
    );
    if (!lib)
      continue;
    lib = lib.default || lib;
    _ytLibName = ytlib;
    break;
  }
  if (lib) {
    const isYtdl = ["ytdl-core", "@distube/ytdl-core"].some((lib2) => lib2 === _ytLibName);
    _stream = /* @__PURE__ */ __name(async (query) => {
      if (isYtdl) {
        const dl = lib;
        const info = await dl.getInfo(query, options);
        const formats = info.formats.filter((format) => {
          return info.videoDetails.isLiveContent ? format.isHLS && format.hasAudio : format.hasAudio;
        }).sort((a, b) => Number(b.audioBitrate) - Number(a.audioBitrate) || Number(a.bitrate) - Number(b.bitrate));
        const fmt = formats.find((format) => !format.hasVideo) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];
        const url = fmt?.url;
        if (!url)
          throw new Error(`Failed to parse stream url for ${query}`);
        return url;
      } else if (_ytLibName === "play-dl") {
        const dl = lib;
        const info = await dl.video_info(query);
        const formats = info.format.filter((format) => {
          const re2 = /\/manifest\/hls_(variant|playlist)\//;
          if (!format.url)
            return false;
          if (info.video_details.live)
            return re2.test(format.url) && typeof format.bitrate === "number";
          return typeof format.bitrate === "number";
        }).sort((a, b) => Number(b.bitrate) - Number(a.bitrate));
        const fmt = formats.find((format) => !format.qualityLabel) || formats.sort((a, b) => Number(a.bitrate) - Number(b.bitrate))[0];
        const url = fmt?.url;
        if (!url)
          throw new Error(`Failed to parse stream url for ${query}`);
        return url;
      } else if (_ytLibName === "yt-stream") {
        const dl = lib;
        const decipher = await import("yt-stream/src/stream/decipher.js");
        const info = await dl.getInfo(query);
        info.formats = await decipher?.format_decipher(info.formats, info.html5player);
        const url = info.formats.filter((val) => val.mimeType.startsWith("audio") && val.audioQuality !== "AUDIO_QUALITY_LOW").map((val) => val.url);
        if (url.length !== 0)
          return url[0];
        return info.formats.filter((val) => val.mimeType.startsWith("audio")).map((val) => val.url)[0];
      } else {
        throw ERR_NO_YT_LIB;
      }
    }, "_stream");
  } else {
    throw ERR_NO_YT_LIB;
  }
  factory = { name: _ytLibName, stream: _stream, lib };
  return factory;
}
__name(loadYtdl, "loadYtdl");
async function makeYTSearch(query, opt) {
  const res = await YouTube.search(query, {
    type: "video",
    requestOptions: opt
  }).catch(() => {
  });
  return res || [];
}
__name(makeYTSearch, "makeYTSearch");
async function makeSCSearch(query) {
  const { soundcloud } = SoundCloudExtractor;
  if (!soundcloud)
    return [];
  try {
    const info = await soundcloud.tracks.searchV2({
      q: query,
      limit: 5
    });
    return info.collection;
  } catch {
    const info = await soundcloud.tracks.searchAlt(query);
    return info;
  }
}
__name(makeSCSearch, "makeSCSearch");
async function pullYTMetadata(ext, info) {
  const meta = await makeYTSearch(ext.createBridgeQuery(info), "video").then((r) => r[0]).catch(() => null);
  return meta;
}
__name(pullYTMetadata, "pullYTMetadata");
async function pullSCMetadata(ext, info) {
  const meta = await makeSCSearch(ext.createBridgeQuery(info)).then((r) => r[0]).catch(() => null);
  return meta;
}
__name(pullSCMetadata, "pullSCMetadata");

// src/extractors/YoutubeExtractor.ts
var validQueryDomains = /* @__PURE__ */ new Set(["youtube.com", "www.youtube.com", "m.youtube.com", "music.youtube.com", "gaming.youtube.com"]);
var validPathDomains = /^https?:\/\/(youtu\.be\/|(www\.)?youtube\.com\/(embed|v|shorts)\/)/;
var idRegex = /^[a-zA-Z0-9-_]{11}$/;
var _YoutubeExtractor = class extends BaseExtractor2 {
  async activate() {
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const { stream, name } = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = stream;
    this._ytLibName = name;
  }
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [
      QueryType2.YOUTUBE,
      QueryType2.YOUTUBE_PLAYLIST,
      QueryType2.YOUTUBE_SEARCH,
      QueryType2.YOUTUBE_VIDEO,
      QueryType2.AUTO,
      QueryType2.AUTO_SEARCH
    ].some((r) => r === type);
  }
  async handle(query, context) {
    query = query.includes("youtube.com") ? query.replace(/(m(usic)?|gaming)\./, "") : query;
    if (_YoutubeExtractor.validateURL(query))
      context.type = QueryType2.YOUTUBE_VIDEO;
    switch (context.type) {
      case QueryType2.YOUTUBE_PLAYLIST: {
        const ytpl = await YouTube2.getPlaylist(query, {
          fetchAll: true,
          requestOptions: context.requestOptions
        }).catch(Util2.noop);
        if (!ytpl)
          return this.emptyResponse();
        const playlist = new Playlist2(this.context.player, {
          title: ytpl.title,
          thumbnail: ytpl.thumbnail?.displayThumbnailURL("maxresdefault"),
          description: ytpl.title || "",
          type: "playlist",
          source: "youtube",
          author: {
            name: ytpl.channel.name,
            url: ytpl.channel.url
          },
          tracks: [],
          id: ytpl.id,
          url: ytpl.url,
          rawPlaylist: ytpl
        });
        playlist.tracks = ytpl.videos.map((video) => {
          const track = new Track2(this.context.player, {
            title: video.title,
            description: video.description,
            author: video.channel?.name,
            url: video.url,
            requestedBy: context.requestedBy,
            thumbnail: video.thumbnail.url,
            views: video.views,
            duration: video.durationFormatted,
            raw: video,
            playlist,
            source: "youtube",
            queryType: "youtubeVideo",
            metadata: video,
            async requestMetadata() {
              return video;
            }
          });
          track.extractor = this;
          track.playlist = playlist;
          return track;
        });
        return { playlist, tracks: playlist.tracks };
      }
      case QueryType2.YOUTUBE_VIDEO: {
        const id = /[a-zA-Z0-9-_]{11}/.exec(query);
        if (!id?.[0])
          return this.emptyResponse();
        const video = await YouTube2.getVideo(`https://www.youtube.com/watch?v=${id}`, context.requestOptions).catch(Util2.noop);
        if (!video)
          return this.emptyResponse();
        video.source = "youtube";
        const track = new Track2(this.context.player, {
          title: video.title,
          description: video.description,
          author: video.channel?.name,
          url: video.url,
          requestedBy: context.requestedBy,
          thumbnail: video.thumbnail?.displayThumbnailURL("maxresdefault"),
          views: video.views,
          duration: video.durationFormatted,
          source: "youtube",
          raw: video,
          queryType: context.type,
          metadata: video,
          async requestMetadata() {
            return video;
          }
        });
        track.extractor = this;
        return {
          playlist: null,
          tracks: [track]
        };
      }
      default: {
        const tracks = await this._makeYTSearch(query, context);
        return { playlist: null, tracks };
      }
    }
  }
  async _makeYTSearch(query, context) {
    const res = await makeYTSearch(query, context.requestOptions).catch(Util2.noop);
    if (!res || !res.length)
      return [];
    return res.map((video) => {
      video.source = "youtube";
      const track = new Track2(this.context.player, {
        title: video.title,
        description: video.description,
        author: video.channel?.name,
        url: video.url,
        requestedBy: context.requestedBy,
        thumbnail: video.thumbnail?.displayThumbnailURL("maxresdefault"),
        views: video.views,
        duration: video.durationFormatted,
        source: "youtube",
        raw: video,
        queryType: context.type,
        metadata: video,
        async requestMetadata() {
          return video;
        }
      });
      track.extractor = this;
      return track;
    });
  }
  async getRelatedTracks(track) {
    let info;
    if (_YoutubeExtractor.validateURL(track.url))
      info = await YouTube2.getVideo(track.url).then((x) => x.videos).catch(Util2.noop);
    if (!info)
      info = await YouTube2.search(track.author || track.title, { limit: 5, type: "video" }).then((x) => x).catch(Util2.noop);
    if (!info?.length) {
      return this.createResponse();
    }
    const similar = info.map((video) => {
      const t = new Track2(this.context.player, {
        title: video.title,
        url: `https://www.youtube.com/watch?v=${video.id}`,
        duration: video.durationFormatted || Util2.buildTimeCode(Util2.parseMS(video.duration * 1e3)),
        description: video.title,
        thumbnail: typeof video.thumbnail === "string" ? video.thumbnail : video.thumbnail.url,
        views: video.views,
        author: video.channel.name,
        requestedBy: track.requestedBy,
        source: "youtube",
        queryType: "youtubeVideo",
        metadata: video,
        async requestMetadata() {
          return video;
        }
      });
      t.extractor = this;
      return t;
    });
    return this.createResponse(null, similar);
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    if (!this._stream) {
      throw new Error(`Could not find youtube streaming library. Install one of ${YouTubeLibs.join(", ")}`);
    }
    let url = info.url;
    url = url.includes("youtube.com") ? url.replace(/(m(usic)?|gaming)\./, "") : url;
    return this._stream(url);
  }
  static validateURL(link) {
    try {
      _YoutubeExtractor.parseURL(link);
      return true;
    } catch {
      return false;
    }
  }
  static validateId(id) {
    return idRegex.test(id.trim());
  }
  static parseURL(link) {
    const parsed = new URL(link.trim());
    let id = parsed.searchParams.get("v");
    if (validPathDomains.test(link.trim()) && !id) {
      const paths = parsed.pathname.split("/");
      id = parsed.host === "youtu.be" ? paths[1] : paths[2];
    } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {
      throw Error("Not a YouTube domain");
    }
    if (!id) {
      throw Error(`No video id found: "${link}"`);
    }
    id = id.substring(0, 11);
    if (!this.validateId(id)) {
      throw TypeError(`Video id (${id}) does not match expected format (${idRegex.toString()})`);
    }
    return id;
  }
};
var YoutubeExtractor = _YoutubeExtractor;
__name(YoutubeExtractor, "YoutubeExtractor");
YoutubeExtractor.identifier = "com.discord-player.youtubeextractor";

// src/extractors/LyricsExtractor.ts
import { Client as GeniusClient } from "genius-lyrics";
var client;
function lyricsExtractor(apiKey, force) {
  if (!client && !force)
    client = new GeniusClient(apiKey);
  return { search, client };
}
__name(lyricsExtractor, "lyricsExtractor");
function search(query) {
  return new Promise((resolve, reject) => {
    if (typeof query !== "string")
      return reject(new TypeError(`Expected search query to be a string, received "${typeof query}"!`));
    client.songs.search(query).then(async (songs) => {
      const data = {
        title: songs[0].title,
        fullTitle: songs[0].fullTitle,
        id: songs[0].id,
        thumbnail: songs[0].thumbnail,
        image: songs[0].image,
        url: songs[0].url,
        artist: {
          name: songs[0].artist.name,
          id: songs[0].artist.id,
          url: songs[0].artist.url,
          image: songs[0].artist.image
        },
        lyrics: await songs[0].lyrics(false)
      };
      resolve(data);
    }).catch(() => {
      reject(new Error("Could not parse lyrics"));
    });
  });
}
__name(search, "search");

// src/extractors/VimeoExtractor.ts
import {
  BaseExtractor as BaseExtractor3,
  QueryType as QueryType3,
  Track as Track3,
  Util as Util3
} from "discord-player";

// src/internal/Vimeo.ts
import http from "http";
import https from "https";
var Vimeo = class {
  constructor() {
    throw new Error(`The ${this.constructor.name} class may not be instantiated!`);
  }
  static download(id) {
    return new Promise(async (resolve) => {
      const info = await Vimeo.getInfo(id);
      if (!info)
        return null;
      const downloader = info.stream.startsWith("https://") ? https : http;
      downloader.get(info.stream, (res) => {
        resolve(res);
      });
    });
  }
  static async getInfo(id) {
    if (!id)
      throw new Error("Invalid id");
    const url = `https://player.vimeo.com/video/${id}`;
    try {
      const res = await getFetch(url);
      const data = await res.text();
      const json = JSON.parse(data.split("window.playerConfig =")[1].split(";")[0].trim());
      const obj = {
        id: json.video.id,
        duration: json.video.duration * 1e3,
        title: json.video.title,
        url: json.video.url,
        thumbnail: json.video.thumbs["1280"] || json.video.thumbs.base,
        stream: json.request.files.progressive[0].url,
        author: {
          id: json.video.owner.id,
          name: json.video.owner.name,
          url: json.video.owner.url,
          avatar: json.video.owner.img_2x || json.video.owner.img
        }
      };
      return obj;
    } catch {
      return null;
    }
  }
};
__name(Vimeo, "Vimeo");

// src/extractors/VimeoExtractor.ts
var VimeoExtractor = class extends BaseExtractor3 {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [QueryType3.VIMEO].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType3.VIMEO: {
        const trackInfo = await Vimeo.getInfo(
          query.split("/").filter((x) => !!x).pop()
        ).catch(Util3.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new Track3(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util3.buildTimeCode(Util3.parseMS(trackInfo.duration || 0)),
          description: `${trackInfo.title} by ${trackInfo.author.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.stream,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await Vimeo.getInfo(info.url).catch(Util3.noop);
    if (!track || !track.stream)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.stream
    };
    return track.stream;
  }
};
__name(VimeoExtractor, "VimeoExtractor");
VimeoExtractor.identifier = "com.discord-player.vimeoextractor";

// src/extractors/ReverbnationExtractor.ts
import {
  BaseExtractor as BaseExtractor4,
  QueryType as QueryType4,
  Track as Track4,
  Util as Util4
} from "discord-player";
import reverbnation from "reverbnation-scraper";
var ReverbnationExtractor = class extends BaseExtractor4 {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [QueryType4.REVERBNATION].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType4.REVERBNATION: {
        const trackInfo = await reverbnation.getInfo(query).catch(Util4.noop);
        if (!trackInfo)
          return this.emptyResponse();
        const track = new Track4(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util4.buildTimeCode(Util4.parseMS(trackInfo.duration)),
          description: trackInfo.lyrics || `${trackInfo.title} by ${trackInfo.artist.name}`,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.artist.name,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.streamURL,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    if (engine) {
      return engine;
    }
    const track = await reverbnation.getInfo(info.url).catch(Util4.noop);
    if (!track || !track.streamURL)
      throw new Error("Could not extract stream from this source");
    info.raw.engine = {
      streamURL: track.streamURL
    };
    return track.streamURL;
  }
};
__name(ReverbnationExtractor, "ReverbnationExtractor");
ReverbnationExtractor.identifier = "com.discord-player.reverbnationextractor";

// src/extractors/AttachmentExtractor.ts
import {
  BaseExtractor as BaseExtractor5,
  QueryType as QueryType5,
  Track as Track5,
  Util as Util5
} from "discord-player";
import { createReadStream, existsSync } from "fs";

// src/internal/downloader.ts
import http2 from "http";
import https2 from "https";
function downloadStream(url, opts = {}) {
  return new Promise((resolve, reject) => {
    const lib = url.startsWith("http://") ? http2 : https2;
    lib.get(url, opts, (res) => resolve(res)).once("error", reject);
  });
}
__name(downloadStream, "downloadStream");

// src/extractors/AttachmentExtractor.ts
import * as fileType from "file-type";
import path from "path";
import { stat } from "fs/promises";
var AttachmentExtractor = class extends BaseExtractor5 {
  async validate(query, type) {
    if (typeof query !== "string")
      return false;
    return [QueryType5.ARBITRARY, QueryType5.FILE].some((r) => r === type);
  }
  async getRelatedTracks(track) {
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType5.ARBITRARY: {
        const data = await downloadStream(query, context.requestOptions);
        if (!["audio/", "video/"].some((r) => !!data.headers["content-type"]?.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: (query.split("/").filter((x) => x.length).pop() ?? "Attachment").split("?")[0].trim(),
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: data.client?.servername || "Attachment",
          description: data.client?.servername || "Attachment",
          url: data.url || query
        };
        const track = new Track5(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util5.buildTimeCode(Util5.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = false;
        return { playlist: null, tracks: [track] };
      }
      case QueryType5.FILE: {
        if (!existsSync(query))
          return this.emptyResponse();
        const fstat = await stat(query);
        if (!fstat.isFile())
          return this.emptyResponse();
        const mime = await fileType.fromFile(query).catch(() => null);
        if (!mime || !["audio/", "video/"].some((r) => !!mime.mime.startsWith(r)))
          return this.emptyResponse();
        const trackInfo = {
          title: path.basename(query) || "Attachment",
          duration: 0,
          thumbnail: "https://upload.wikimedia.org/wikipedia/commons/2/2a/ITunes_12.2_logo.png",
          engine: query,
          author: "Attachment",
          description: "Attachment",
          url: query
        };
        const track = new Track5(this.context.player, {
          title: trackInfo.title,
          url: trackInfo.url,
          duration: Util5.buildTimeCode(Util5.parseMS(trackInfo.duration)),
          description: trackInfo.description,
          thumbnail: trackInfo.thumbnail,
          views: 0,
          author: trackInfo.author,
          requestedBy: context.requestedBy,
          source: "arbitrary",
          engine: trackInfo.url,
          queryType: context.type,
          metadata: trackInfo,
          async requestMetadata() {
            return trackInfo;
          }
        });
        track.extractor = this;
        track.raw.isFile = true;
        return { playlist: null, tracks: [track] };
      }
      default:
        return this.emptyResponse();
    }
  }
  emptyResponse() {
    return { playlist: null, tracks: [] };
  }
  async stream(info) {
    const engine = info.raw.engine;
    const isFile = info.raw.isFile;
    if (!engine)
      throw new Error("Could not find stream source");
    if (!isFile) {
      return engine;
    }
    return createReadStream(engine);
  }
};
__name(AttachmentExtractor, "AttachmentExtractor");
AttachmentExtractor.identifier = "com.discord-player.attachmentextractor";

// src/extractors/AppleMusicExtractor.ts
import { BaseExtractor as BaseExtractor6, Playlist as Playlist3, QueryType as QueryType6, Track as Track6, Util as Util6 } from "discord-player";

// src/internal/index.ts
var internal_exports = {};
__export(internal_exports, {
  AppleMusic: () => AppleMusic,
  SpotifyAPI: () => SpotifyAPI,
  Vimeo: () => Vimeo,
  downloadStream: () => downloadStream
});

// src/internal/AppleMusic.ts
import { QueryResolver } from "discord-player";
import { parse } from "node-html-parser";
function getHTML(link) {
  return getFetch(link, {
    headers: {
      "User-Agent": UA
    }
  }).then((r) => r.text()).then(
    (txt) => parse(txt),
    () => null
  );
}
__name(getHTML, "getHTML");
function makeImage({ height, url, width, ext = "jpg" }) {
  return url.replace("{w}", `${width}`).replace("{h}", `${height}`).replace("{f}", ext);
}
__name(makeImage, "makeImage");
function parseDuration(d) {
  const r = /* @__PURE__ */ __name((name, unit) => `((?<${name}>-?\\d*[\\.,]?\\d+)${unit})?`, "r");
  const regex = new RegExp(
    [
      "(?<negative>-)?P",
      r("years", "Y"),
      r("months", "M"),
      r("weeks", "W"),
      r("days", "D"),
      "(T",
      r("hours", "H"),
      r("minutes", "M"),
      r("seconds", "S"),
      ")?"
    ].join("")
  );
  const test = regex.exec(d);
  if (!test || !test.groups)
    return "0:00";
  const dur = [test.groups.years, test.groups.months, test.groups.weeks, test.groups.days, test.groups.hours, test.groups.minutes, test.groups.seconds];
  return dur.filter((r2, i, a) => !!r2 || i > a.length - 2).map((m, i) => {
    if (!m)
      m = "0";
    return i < 1 ? m : m.padStart(2, "0");
  }).join(":") || "0:00";
}
__name(parseDuration, "parseDuration");
var AppleMusic = class {
  constructor() {
    return AppleMusic;
  }
  static async search(query) {
    try {
      const url = `https://music.apple.com/us/search?term=${encodeURIComponent(query)}`;
      const node = await getHTML(url);
      if (!node)
        return [];
      const rawData = node.getElementById("serialized-server-data");
      if (!rawData)
        return [];
      const data = JSON.parse(rawData.innerText)[0].data.sections;
      const tracks = data.find((s) => s.itemKind === "trackLockup")?.items;
      if (!tracks)
        return [];
      return tracks.map((track) => ({
        id: track.contentDescriptor.identifiers.storeAdamID,
        duration: track.duration || "0:00",
        title: track.title,
        url: track.contentDescriptor.url,
        thumbnail: track?.artwork?.dictionary ? makeImage({
          url: track.artwork.dictionary.url,
          height: track.artwork.dictionary.height,
          width: track.artwork.dictionary.width
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: track.subtitleLinks?.[0]?.title ?? "Unknown Artist"
        }
      }));
    } catch {
      return [];
    }
  }
  static async getSongInfoFallback(res, name, id, link) {
    try {
      const metaTags = res.getElementsByTagName("meta");
      if (!metaTags.length)
        return null;
      const title = metaTags.find((r) => r.getAttribute("name") === "apple:title")?.getAttribute("content") || res.querySelector("title")?.innerText || name;
      const contentId = metaTags.find((r) => r.getAttribute("name") === "apple:content_id")?.getAttribute("content") || id;
      const durationRaw = metaTags.find((r) => r.getAttribute("property") === "music:song:duration")?.getAttribute("content");
      const song = {
        id: contentId,
        duration: durationRaw ? parseDuration(durationRaw) : metaTags.find((m) => m.getAttribute("name") === "apple:description")?.textContent.split("Duration: ")?.[1].split('"')?.[0] || "0:00",
        title,
        url: link,
        thumbnail: metaTags.find((r) => ["og:image:secure_url", "og:image"].includes(r.getAttribute("property")))?.getAttribute("content") || "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: res.querySelector(".song-subtitles__artists>a")?.textContent?.trim() || "Apple Music"
        }
      };
      return song;
    } catch {
      return null;
    }
  }
  static async getSongInfo(link) {
    if (!QueryResolver.regex.appleMusicSongRegex.test(link)) {
      return null;
    }
    const url = new URL(link);
    const id = url.searchParams.get("i");
    const name = url.pathname.split("album/")[1]?.split("/")[0];
    if (!id || !name)
      return null;
    const res = await getHTML(`https://music.apple.com/us/song/${name}/${id}`);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const data = JSON.parse(datasrc)[0].data.seoData;
      const song = data.ogSongs[0]?.attributes;
      return {
        id: data.ogSongs[0]?.id || data.appleContentId || id,
        duration: song?.durationInMillis || "0:00",
        title: song?.name || data.appleTitle,
        url: song?.url || data.url || link,
        thumbnail: song?.artwork ? makeImage({
          url: song.artwork.url,
          height: song.artwork.height,
          width: song.artwork.width
        }) : data.artworkUrl ? makeImage({
          height: data.height,
          width: data.width,
          url: data.artworkUrl,
          ext: data.fileType || "jpg"
        }) : "https://music.apple.com/assets/favicon/favicon-180.png",
        artist: {
          name: song?.artistName || data.socialTitle || "Apple Music"
        }
      };
    } catch {
      return this.getSongInfoFallback(res, name, id, link);
    }
  }
  static async getPlaylistInfo(link) {
    if (!QueryResolver.regex.appleMusicPlaylistRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: pl.ogSongs?.map((m) => {
          const song = m.attributes;
          return {
            id: m.id,
            duration: song.durationInMillis || "0:00",
            title: song.name,
            url: song.url,
            thumbnail: song.artwork ? makeImage({
              url: song.artwork.url,
              height: song.artwork.height,
              width: song.artwork.width
            }) : thumbnail,
            artist: {
              name: song.artistName || "Apple Music"
            }
          };
        }) || []
      };
    } catch {
      return null;
    }
  }
  static async getAlbumInfo(link) {
    if (!QueryResolver.regex.appleMusicAlbumRegex.test(link)) {
      return null;
    }
    const res = await getHTML(link);
    if (!res)
      return null;
    try {
      const datasrc = res.getElementById("serialized-server-data")?.innerText || res.innerText.split('<script type="application/json" id="serialized-server-data">')?.[1]?.split("<\/script>")?.[0];
      if (!datasrc)
        throw "not found";
      const pl = JSON.parse(datasrc)[0].data.seoData;
      const thumbnail = pl.artworkUrl ? makeImage({
        height: pl.height,
        width: pl.width,
        url: pl.artworkUrl,
        ext: pl.fileType || "jpg"
      }) : "https://music.apple.com/assets/favicon/favicon-180.png";
      return {
        id: pl.appleContentId,
        title: pl.appleTitle,
        thumbnail,
        artist: {
          name: pl.ogSongs?.[0]?.attributes?.artistName || "Apple Music"
        },
        url: pl.url,
        tracks: pl.ogSongs?.map((m) => {
          const song = m.attributes;
          return {
            id: m.id,
            duration: song.durationInMillis || "0:00",
            title: song.name,
            url: song.url,
            thumbnail: song.artwork ? makeImage({
              url: song.artwork.url,
              height: song.artwork.height,
              width: song.artwork.width
            }) : thumbnail,
            artist: {
              name: song.artistName || "Apple Music"
            }
          };
        }) || []
      };
    } catch {
      return null;
    }
  }
};
__name(AppleMusic, "AppleMusic");

// src/internal/Spotify.ts
var SP_ANON_TOKEN_URL = "https://open.spotify.com/get_access_token?reason=transport&productType=embed";
var SP_ACCESS_TOKEN_URL = "https://accounts.spotify.com/api/token?grant_type=client_credentials";
var SP_BASE = "https://api.spotify.com/v1";
var SpotifyAPI = class {
  constructor(credentials = {
    clientId: null,
    clientSecret: null
  }) {
    this.credentials = credentials;
    this.accessToken = null;
  }
  get authorizationKey() {
    if (!this.credentials.clientId || !this.credentials.clientSecret)
      return null;
    return Buffer.from(`${this.credentials.clientId}:${this.credentials.clientSecret}`).toString("base64");
  }
  async requestToken() {
    const key = this.authorizationKey;
    if (!key)
      return await this.requestAnonymousToken();
    try {
      const res = await getFetch(SP_ACCESS_TOKEN_URL, {
        method: "POST",
        headers: {
          "User-Agent": UA,
          Authorization: `Basic ${key}`,
          "Content-Type": "application/json"
        }
      });
      const body = await res.json();
      if (!body.access_token)
        throw "no token";
      const data = {
        token: body.access_token,
        expiresAfter: body.expires_in,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return await this.requestAnonymousToken();
    }
  }
  async requestAnonymousToken() {
    try {
      const res = await getFetch(SP_ANON_TOKEN_URL, {
        headers: {
          "User-Agent": UA,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        throw "not_ok";
      const body = await res.json();
      if (!body.accessToken)
        throw "no_access_token";
      const data = {
        token: body.accessToken,
        expiresAfter: body.accessTokenExpirationTimestampMs,
        type: "Bearer"
      };
      return this.accessToken = data;
    } catch {
      return null;
    }
  }
  isTokenExpired() {
    if (!this.accessToken)
      return true;
    return Date.now() > this.accessToken.expiresAfter;
  }
  async search(query) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/search/?q=${encodeURIComponent(query)}&type=track&market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      return data.tracks.items.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
    } catch {
      return null;
    }
  }
  async getPlaylist(id) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/playlists/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      if (!data.tracks.items.length)
        return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await getFetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok)
            break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next)
            break;
        } catch {
          break;
        }
      }
      const tracks = t.map(({ track: m }) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: m.album.images?.[0]?.url || null
      }));
      if (!tracks.length)
        return null;
      return {
        name: data.name,
        author: data.owner.display_name,
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/playlist/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
  async getAlbum(id) {
    try {
      if (this.isTokenExpired())
        await this.requestToken();
      if (!this.accessToken)
        return null;
      const res = await getFetch(`${SP_BASE}/albums/${id}?market=US`, {
        headers: {
          "User-Agent": UA,
          Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
          "Content-Type": "application/json"
        }
      });
      if (!res.ok)
        return null;
      const data = await res.json();
      if (!data.tracks.items.length)
        return null;
      const t = data.tracks.items;
      let next = data.tracks.next;
      while (typeof next === "string") {
        try {
          const res2 = await getFetch(next, {
            headers: {
              "User-Agent": UA,
              Authorization: `${this.accessToken.type} ${this.accessToken.token}`,
              "Content-Type": "application/json"
            }
          });
          if (!res2.ok)
            break;
          const nextPage = await res2.json();
          t.push(...nextPage.items);
          next = nextPage.next;
          if (!next)
            break;
        } catch {
          break;
        }
      }
      const tracks = t.map((m) => ({
        title: m.name,
        duration: m.duration_ms,
        artist: m.artists.map((m2) => m2.name).join(", "),
        url: m.external_urls?.spotify || `https://open.spotify.com/track/${m.id}`,
        thumbnail: data.images?.[0]?.url || null
      }));
      if (!tracks.length)
        return null;
      return {
        name: data.name,
        author: data.artists.map((m) => m.name).join(", "),
        thumbnail: data.images?.[0]?.url || null,
        id: data.id,
        url: data.external_urls.spotify || `https://open.spotify.com/album/${id}`,
        tracks
      };
    } catch {
      return null;
    }
  }
};
__name(SpotifyAPI, "SpotifyAPI");

// src/extractors/AppleMusicExtractor.ts
var AppleMusicExtractor = class extends BaseExtractor6 {
  constructor() {
    super(...arguments);
    this._isYtdl = false;
  }
  async activate() {
    if (this.options.bridgeProvider)
      return;
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._isYtdl = false;
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const lib = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = lib.stream;
    this._isYtdl = true;
  }
  async validate(query, type) {
    return [
      QueryType6.APPLE_MUSIC_ALBUM,
      QueryType6.APPLE_MUSIC_PLAYLIST,
      QueryType6.APPLE_MUSIC_SONG,
      QueryType6.APPLE_MUSIC_SEARCH,
      QueryType6.AUTO,
      QueryType6.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    if (track.queryType === QueryType6.APPLE_MUSIC_SONG)
      return this.handle(track.author || track.title, {
        type: QueryType6.APPLE_MUSIC_SEARCH,
        requestedBy: track.requestedBy
      });
    return this.createResponse();
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType6.AUTO:
      case QueryType6.AUTO_SEARCH:
      case QueryType6.APPLE_MUSIC_SEARCH: {
        const data = await AppleMusic.search(query);
        if (!data || !data.length)
          return this.createResponse();
        const tracks = data.map(
          (m) => {
            const track = new Track6(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? Util6.buildTimeCode(Util6.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.extractor = this;
            return track;
          }
        );
        return this.createResponse(null, tracks);
      }
      case QueryType6.APPLE_MUSIC_ALBUM: {
        const info = await AppleMusic.getAlbumInfo(query);
        if (!info)
          return this.createResponse();
        const playlist = new Playlist3(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "album",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new Track6(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? Util6.buildTimeCode(Util6.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: info,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: info,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case QueryType6.APPLE_MUSIC_PLAYLIST: {
        const info = await AppleMusic.getPlaylistInfo(query);
        if (!info)
          return this.createResponse();
        const playlist = new Playlist3(this.context.player, {
          author: {
            name: info.artist.name,
            url: ""
          },
          description: info.title,
          id: info.id,
          source: "apple_music",
          thumbnail: info.thumbnail,
          title: info.title,
          tracks: [],
          type: "playlist",
          url: info.url,
          rawPlaylist: info
        });
        playlist.tracks = info.tracks.map(
          (m) => {
            const track = new Track6(this.context.player, {
              author: m.artist.name,
              description: m.title,
              duration: typeof m.duration === "number" ? Util6.buildTimeCode(Util6.parseMS(m.duration)) : m.duration,
              thumbnail: m.thumbnail,
              title: m.title,
              url: m.url,
              views: 0,
              source: "apple_music",
              requestedBy: context.requestedBy,
              queryType: "appleMusicSong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.playlist = playlist;
            track.extractor = this;
            return track;
          }
        );
        return { playlist, tracks: playlist.tracks };
      }
      case QueryType6.APPLE_MUSIC_SONG: {
        const info = await AppleMusic.getSongInfo(query);
        if (!info)
          return this.createResponse();
        const track = new Track6(this.context.player, {
          author: info.artist.name,
          description: info.title,
          duration: typeof info.duration === "number" ? Util6.buildTimeCode(Util6.parseMS(info.duration)) : info.duration,
          thumbnail: info.thumbnail,
          title: info.title,
          url: info.url,
          views: 0,
          source: "apple_music",
          requestedBy: context.requestedBy,
          queryType: context.type,
          metadata: {
            source: info,
            bridge: null
          },
          requestMetadata: async () => {
            return {
              source: info,
              bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
            };
          }
        });
        track.extractor = this;
        return { playlist: null, tracks: [track] };
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (this.options.bridgeProvider) {
      const provider = this.options.bridgeProvider;
      const data = await provider.resolve(this, info);
      if (!data)
        throw new Error("Failed to bridge this track");
      info.setMetadata({
        ...info.metadata || {},
        bridge: data.data
      });
      return await provider.stream(data);
    }
    if (!this._stream) {
      throw new Error(`Could not initialize streaming api for '${this.constructor.name}'`);
    }
    let url = info.url;
    if (this._isYtdl) {
      if (YoutubeExtractor.validateURL(info.raw.url))
        url = info.raw.url;
      else {
        const meta = await pullYTMetadata(this, info);
        if (meta)
          info.setMetadata({
            ...info.metadata || {},
            bridge: meta
          });
        const _url = meta?.url;
        if (!_url)
          throw new Error("Failed to fetch resources for ytdl streaming");
        info.raw.url = url = _url;
      }
    }
    return this._stream(url);
  }
};
__name(AppleMusicExtractor, "AppleMusicExtractor");
AppleMusicExtractor.identifier = "com.discord-player.applemusicextractor";

// src/extractors/SpotifyExtractor.ts
import { BaseExtractor as BaseExtractor7, Playlist as Playlist4, QueryType as QueryType7, Track as Track7, Util as Util7 } from "discord-player";
import spotify from "spotify-url-info";
var re = /^(?:https:\/\/open\.spotify\.com\/(intl-([a-z]|[A-Z]){0,3}\/)?(?:user\/[A-Za-z0-9]+\/)?|spotify:)(album|playlist|track)(?:[/:])([A-Za-z0-9]+).*$/;
var SpotifyExtractor = class extends BaseExtractor7 {
  constructor() {
    super(...arguments);
    this._isYtdl = false;
    this._credentials = {
      clientId: this.options.clientId || process.env.DP_SPOTIFY_CLIENT_ID || null,
      clientSecret: this.options.clientSecret || process.env.DP_SPOTIFY_CLIENT_SECRET || null
    };
    this.internal = new SpotifyAPI(this._credentials);
  }
  async activate() {
    if (this.options.bridgeProvider)
      return;
    const fn = this.options.createStream;
    if (typeof fn === "function") {
      this._isYtdl = false;
      this._stream = (q) => {
        return fn(this, q);
      };
      return;
    }
    const lib = await loadYtdl(this.context.player.options.ytdlOptions);
    this._stream = lib.stream;
    this._lib = spotify(getFetch);
    this._isYtdl = true;
    if (this.internal.isTokenExpired())
      await this.internal.requestToken();
  }
  async validate(query, type) {
    return [
      QueryType7.SPOTIFY_ALBUM,
      QueryType7.SPOTIFY_PLAYLIST,
      QueryType7.SPOTIFY_SONG,
      QueryType7.SPOTIFY_SEARCH,
      QueryType7.AUTO,
      QueryType7.AUTO_SEARCH
    ].some((t) => t === type);
  }
  async getRelatedTracks(track) {
    return await this.handle(track.author || track.title, {
      type: QueryType7.SPOTIFY_SEARCH,
      requestedBy: track.requestedBy
    });
  }
  async handle(query, context) {
    switch (context.type) {
      case QueryType7.AUTO:
      case QueryType7.AUTO_SEARCH:
      case QueryType7.SPOTIFY_SEARCH: {
        const data = await this.internal.search(query);
        if (!data)
          return this.createResponse();
        return this.createResponse(
          null,
          data.map((spotifyData) => {
            const track = new Track7(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util7.buildTimeCode(Util7.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: QueryType7.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, track)).data : await pullYTMetadata(this, track)
                };
              }
            });
            track.extractor = this;
            return track;
          })
        );
      }
      case QueryType7.SPOTIFY_SONG: {
        const spotifyData = await this._lib.getData(query, context.requestOptions).catch(Util7.noop);
        if (!spotifyData)
          return { playlist: null, tracks: [] };
        const spotifyTrack = new Track7(this.context.player, {
          title: spotifyData.title,
          description: `${spotifyData.name} by ${spotifyData.artists.map((m) => m.name).join(", ")}`,
          author: spotifyData.artists[0]?.name ?? "Unknown Artist",
          url: spotifyData.id ? `https://open.spotify.com/track/${spotifyData.id}` : query,
          thumbnail: spotifyData.coverArt?.sources?.[0]?.url || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
          duration: Util7.buildTimeCode(Util7.parseMS(spotifyData.duration ?? spotifyData.maxDuration ?? 0)),
          views: 0,
          requestedBy: context.requestedBy,
          source: "spotify",
          queryType: context.type,
          metadata: {
            source: spotifyData,
            bridge: null
          },
          requestMetadata: async () => {
            return {
              source: spotifyData,
              bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, spotifyTrack)).data : await pullYTMetadata(this, spotifyTrack)
            };
          }
        });
        spotifyTrack.extractor = this;
        return { playlist: null, tracks: [spotifyTrack] };
      }
      case QueryType7.SPOTIFY_PLAYLIST: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "playlist")
            throw "err";
          const spotifyPlaylist = await this.internal.getPlaylist(id);
          if (!spotifyPlaylist)
            throw "err";
          const playlist = new Playlist4(this.context.player, {
            title: spotifyPlaylist.name,
            description: spotifyPlaylist.name ?? "",
            thumbnail: spotifyPlaylist.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "playlist",
            source: "spotify",
            author: {
              name: spotifyPlaylist.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.url || query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.tracks.map((spotifyData) => {
            const data = new Track7(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util7.buildTimeCode(Util7.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: QueryType7.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const spotifyPlaylist = await this._lib.getData(query, context.requestOptions).catch(Util7.noop);
          if (!spotifyPlaylist)
            return { playlist: null, tracks: [] };
          const playlist = new Playlist4(this.context.player, {
            title: spotifyPlaylist.name ?? spotifyPlaylist.title,
            description: spotifyPlaylist.title ?? "",
            thumbnail: spotifyPlaylist.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: spotifyPlaylist.type,
            source: "spotify",
            author: {
              name: spotifyPlaylist.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyPlaylist.id,
            url: spotifyPlaylist.id ? `https://open.spotify.com/playlist/${spotifyPlaylist.id}` : query,
            rawPlaylist: spotifyPlaylist
          });
          playlist.tracks = spotifyPlaylist.trackList.map((m) => {
            const data = new Track7(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util7.buildTimeCode(Util7.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      case QueryType7.SPOTIFY_ALBUM: {
        try {
          const { queryType, id } = this.parse(query);
          if (queryType !== "album")
            throw "err";
          const spotifyAlbum = await this.internal.getAlbum(id);
          if (!spotifyAlbum)
            throw "err";
          const playlist = new Playlist4(this.context.player, {
            title: spotifyAlbum.name,
            description: spotifyAlbum.name ?? "",
            thumbnail: spotifyAlbum.thumbnail ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: "album",
            source: "spotify",
            author: {
              name: spotifyAlbum.author ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: spotifyAlbum.id,
            url: spotifyAlbum.url || query,
            rawPlaylist: spotifyAlbum
          });
          playlist.tracks = spotifyAlbum.tracks.map((spotifyData) => {
            const data = new Track7(this.context.player, {
              title: spotifyData.title,
              description: `${spotifyData.title} by ${spotifyData.artist}`,
              author: spotifyData.artist ?? "Unknown Artist",
              url: spotifyData.url,
              thumbnail: spotifyData.thumbnail || "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util7.buildTimeCode(Util7.parseMS(spotifyData.duration ?? 0)),
              views: 0,
              requestedBy: context.requestedBy,
              source: "spotify",
              queryType: QueryType7.SPOTIFY_SONG,
              metadata: {
                source: spotifyData,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: spotifyData,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        } catch {
          const album = await this._lib.getData(query, context.requestOptions).catch(Util7.noop);
          if (!album)
            return { playlist: null, tracks: [] };
          const playlist = new Playlist4(this.context.player, {
            title: album.name ?? album.title,
            description: album.title ?? "",
            thumbnail: album.coverArt?.sources?.[0]?.url ?? "https://www.scdn.co/i/_global/twitter_card-default.jpg",
            type: album.type,
            source: "spotify",
            author: {
              name: album.subtitle ?? "Unknown Artist",
              url: null
            },
            tracks: [],
            id: album.id,
            url: album.id ? `https://open.spotify.com/playlist/${album.id}` : query,
            rawPlaylist: album
          });
          playlist.tracks = album.trackList.map((m) => {
            const data = new Track7(this.context.player, {
              title: m.title ?? "",
              description: m.title ?? "",
              author: m.subtitle ?? "Unknown Artist",
              url: m.uid ? `https://open.spotify.com/tracks/${m.uid}` : query,
              thumbnail: "https://www.scdn.co/i/_global/twitter_card-default.jpg",
              duration: Util7.buildTimeCode(Util7.parseMS(m.duration)),
              views: 0,
              requestedBy: context.requestedBy,
              playlist,
              source: "spotify",
              queryType: "spotifySong",
              metadata: {
                source: m,
                bridge: null
              },
              requestMetadata: async () => {
                return {
                  source: m,
                  bridge: this.options.bridgeProvider ? (await this.options.bridgeProvider.resolve(this, data)).data : await pullYTMetadata(this, data)
                };
              }
            });
            data.extractor = this;
            data.playlist = playlist;
            return data;
          });
          return { playlist, tracks: playlist.tracks };
        }
      }
      default:
        return { playlist: null, tracks: [] };
    }
  }
  async stream(info) {
    if (this.options.bridgeProvider) {
      const provider = this.options.bridgeProvider;
      const data = await provider.resolve(this, info);
      if (!data)
        throw new Error("Failed to bridge this track");
      info.setMetadata({
        ...info.metadata || {},
        bridge: data.data
      });
      return await provider.stream(data);
    }
    if (!this._stream) {
      throw new Error(`Could not initialize streaming api for '${this.constructor.name}'`);
    }
    let url = info.url;
    if (this._isYtdl) {
      if (YoutubeExtractor.validateURL(info.raw.url))
        url = info.raw.url;
      else {
        const meta = await pullYTMetadata(this, info);
        if (meta)
          info.setMetadata({
            ...info.metadata || {},
            bridge: meta
          });
        const _url = meta?.url;
        if (!_url)
          throw new Error("Failed to fetch resources for ytdl streaming");
        info.raw.url = url = _url;
      }
    }
    return this._stream(url);
  }
  parse(q) {
    const [, , , queryType, id] = re.exec(q) || [];
    return { queryType, id };
  }
};
__name(SpotifyExtractor, "SpotifyExtractor");
SpotifyExtractor.identifier = "com.discord-player.spotifyextractor";

// src/extractors/common/BridgeProvider.ts
var BridgeSource = /* @__PURE__ */ ((BridgeSource2) => {
  BridgeSource2["SoundCloud"] = "soundcloud";
  BridgeSource2["YouTube"] = "youtube";
  return BridgeSource2;
})(BridgeSource || {});
var BridgeProvider = class {
  constructor(source) {
    this.bridgeSource = "soundcloud" /* SoundCloud */;
    this.setBridgeSource(source);
  }
  setBridgeSource(source) {
    switch (source) {
      case "soundcloud":
      case "soundcloud" /* SoundCloud */:
        this.bridgeSource = "soundcloud" /* SoundCloud */;
        break;
      case "youtube":
      case "youtube" /* YouTube */:
        this.bridgeSource = "youtube" /* YouTube */;
        break;
      default:
        throw new TypeError("invalid bridge source");
    }
  }
  isSoundCloud() {
    return this.bridgeSource === "soundcloud" /* SoundCloud */;
  }
  isYouTube() {
    return this.bridgeSource === "youtube" /* YouTube */;
  }
  async resolve(ext, track) {
    const isSoundcloud = this.isSoundCloud();
    const bridgefn = isSoundcloud ? pullSCMetadata : pullYTMetadata;
    const oldQc = ext.createBridgeQuery;
    if (isSoundcloud)
      ext.createBridgeQuery = (track2) => `${track2.author} ${track2.title}`;
    const res = await bridgefn(ext, track);
    ext.createBridgeQuery = oldQc;
    return { source: isSoundcloud ? "soundcloud" : "youtube", data: res };
  }
  async stream(meta) {
    if (meta.source === "soundcloud") {
      if (!SoundCloudExtractor.soundcloud) {
        throw new Error("Could not find soundcloud client, make sure SoundCloudExtractor is instantiated properly.");
      }
      return await SoundCloudExtractor.soundcloud.util.streamLink(meta.data, "progressive");
    } else {
      const ytdl = await loadYtdl();
      return ytdl.stream(meta.data.url);
    }
  }
};
__name(BridgeProvider, "BridgeProvider");

// src/index.ts
var version = "4.4.0";
export {
  AppleMusicExtractor,
  AttachmentExtractor,
  BridgeProvider,
  BridgeSource,
  internal_exports as Internal,
  ReverbnationExtractor,
  SoundCloudExtractor,
  SpotifyExtractor,
  UA,
  VimeoExtractor,
  YoutubeExtractor as YouTubeExtractor,
  YouTubeLibs,
  YoutubeExtractor,
  createImport,
  getFetch,
  loadYtdl,
  lyricsExtractor,
  makeSCSearch,
  makeYTSearch,
  pullSCMetadata,
  pullYTMetadata,
  version
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2V4dHJhY3RvcnMvU291bmRDbG91ZEV4dHJhY3Rvci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9Zb3V0dWJlRXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL2NvbW1vbi9oZWxwZXIudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvTHlyaWNzRXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL1ZpbWVvRXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9pbnRlcm5hbC9WaW1lby50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9SZXZlcmJuYXRpb25FeHRyYWN0b3IudHMiLCAiLi4vc3JjL2V4dHJhY3RvcnMvQXR0YWNobWVudEV4dHJhY3Rvci50cyIsICIuLi9zcmMvaW50ZXJuYWwvZG93bmxvYWRlci50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9BcHBsZU11c2ljRXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9pbnRlcm5hbC9pbmRleC50cyIsICIuLi9zcmMvaW50ZXJuYWwvQXBwbGVNdXNpYy50cyIsICIuLi9zcmMvaW50ZXJuYWwvU3BvdGlmeS50cyIsICIuLi9zcmMvZXh0cmFjdG9ycy9TcG90aWZ5RXh0cmFjdG9yLnRzIiwgIi4uL3NyYy9leHRyYWN0b3JzL2NvbW1vbi9CcmlkZ2VQcm92aWRlci50cyIsICIuLi9zcmMvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtcbiAgICBCYXNlRXh0cmFjdG9yLFxuICAgIEV4dHJhY3RvckluZm8sXG4gICAgRXh0cmFjdG9yU2VhcmNoQ29udGV4dCxcbiAgICBQbGF5bGlzdCxcbiAgICBRdWVyeVR5cGUsXG4gICAgU2VhcmNoUXVlcnlUeXBlLFxuICAgIFRyYWNrLFxuICAgIFV0aWxcbn0gZnJvbSAnZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0ICogYXMgU291bmRDbG91ZCBmcm9tICdzb3VuZGNsb3VkLnRzJztcblxuZXhwb3J0IGludGVyZmFjZSBTb3VuZENsb3VkRXh0cmFjdG9ySW5pdCB7XG4gICAgY2xpZW50SWQ/OiBzdHJpbmc7XG4gICAgb2F1dGhUb2tlbj86IHN0cmluZztcbiAgICBwcm94eT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFNvdW5kQ2xvdWRFeHRyYWN0b3IgZXh0ZW5kcyBCYXNlRXh0cmFjdG9yPFNvdW5kQ2xvdWRFeHRyYWN0b3JJbml0PiB7XG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5zb3VuZGNsb3VkZXh0cmFjdG9yJyBhcyBjb25zdDtcblxuICAgIHB1YmxpYyBzdGF0aWMgc291bmRjbG91ZDogaW1wb3J0KCdzb3VuZGNsb3VkLnRzJykuZGVmYXVsdCB8IG51bGwgPSBudWxsO1xuXG4gICAgcHVibGljIGludGVybmFsID0gbmV3IFNvdW5kQ2xvdWQuZGVmYXVsdCh7XG4gICAgICAgIGNsaWVudElkOiB0aGlzLm9wdGlvbnMuY2xpZW50SWQsXG4gICAgICAgIG9hdXRoVG9rZW46IHRoaXMub3B0aW9ucy5vYXV0aFRva2VuLFxuICAgICAgICBwcm94eTogdGhpcy5vcHRpb25zLnByb3h5XG4gICAgfSk7XG5cbiAgICBwdWJsaWMgYXN5bmMgYWN0aXZhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIFNvdW5kQ2xvdWRFeHRyYWN0b3Iuc291bmRjbG91ZCA9IHRoaXMuaW50ZXJuYWw7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlKHF1ZXJ5OiBzdHJpbmcsIHR5cGU/OiBTZWFyY2hRdWVyeVR5cGUgfCBudWxsIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICByZXR1cm4gKFtcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5TT1VORENMT1VELFxuICAgICAgICAgICAgUXVlcnlUeXBlLlNPVU5EQ0xPVURfUExBWUxJU1QsXG4gICAgICAgICAgICBRdWVyeVR5cGUuU09VTkRDTE9VRF9TRUFSQ0gsXG4gICAgICAgICAgICBRdWVyeVR5cGUuU09VTkRDTE9VRF9UUkFDSyxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BVVRPLFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFVVE9fU0VBUkNIXG4gICAgICAgIF0gYXMgU2VhcmNoUXVlcnlUeXBlW10pLnNvbWUoKHIpID0+IHIgPT09IHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgICAgICBpZiAodHJhY2sucXVlcnlUeXBlID09PSBRdWVyeVR5cGUuU09VTkRDTE9VRF9UUkFDSylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZSh0cmFjay5hdXRob3IgfHwgdHJhY2sudGl0bGUsIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogdHJhY2sucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgdHlwZTogUXVlcnlUeXBlLlNPVU5EQ0xPVURfU0VBUkNIXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBoYW5kbGUocXVlcnk6IHN0cmluZywgY29udGV4dDogRXh0cmFjdG9yU2VhcmNoQ29udGV4dCk6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgICAgICBzd2l0Y2ggKGNvbnRleHQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuU09VTkRDTE9VRF9UUkFDSzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrSW5mbyA9IGF3YWl0IHRoaXMuaW50ZXJuYWwudHJhY2tzLmdldFYyKHF1ZXJ5KS5jYXRjaChVdGlsLm5vb3ApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFja0luZm8pIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrSW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8ucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModHJhY2tJbmZvLmR1cmF0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0cmFja0luZm8uZGVzY3JpcHRpb24gPz8gJycsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdHJhY2tJbmZvLmFydHdvcmtfdXJsLFxuICAgICAgICAgICAgICAgICAgICB2aWV3czogdHJhY2tJbmZvLnBsYXliYWNrX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby51c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc291bmRjbG91ZCcsXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW3RyYWNrXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuU09VTkRDTE9VRF9QTEFZTElTVDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmludGVybmFsLnBsYXlsaXN0cy5nZXRWMihxdWVyeSkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24gPz8gJycsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS5hcnR3b3JrX3VybCA/PyBkYXRhLnRyYWNrc1swXS5hcnR3b3JrX3VybCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BsYXlsaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc291bmRjbG91ZCcsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZGF0YS51c2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkYXRhLnVzZXIucGVybWFsaW5rX3VybFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICBpZDogYCR7ZGF0YS5pZH1gLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGRhdGEucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgICAgICAgICAgcmF3UGxheWxpc3Q6IGRhdGFcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc29uZyBvZiBkYXRhLnRyYWNrcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc29uZy50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzb25nLmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBzb25nLnVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvbmcucGVybWFsaW5rX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc29uZy5hcnR3b3JrX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHNvbmcuZHVyYXRpb24pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiBzb25nLnBsYXliYWNrX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdDogcmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc291bmRjbG91ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHNvbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBzb25nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0cmFjay5wbGF5bGlzdCA9IHJlcztcbiAgICAgICAgICAgICAgICAgICAgcmVzLnRyYWNrcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogcmVzLCB0cmFja3M6IHJlcy50cmFja3MgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja3MgPSBhd2FpdCB0aGlzLmludGVybmFsLnRyYWNrcy5zZWFyY2hWMih7IHE6IHF1ZXJ5IH0pLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0cmFja3MgfHwgIXRyYWNrcy5jb2xsZWN0aW9uLmxlbmd0aCkgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRUcmFja3M6IFRyYWNrW10gPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2tJbmZvIG9mIHRyYWNrcy5jb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFja0luZm8udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHRyYWNrSW5mby5wZXJtYWxpbmtfdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVModHJhY2tJbmZvLmR1cmF0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhY2tJbmZvLmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFja0luZm8uYXJ0d29ya191cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3czogdHJhY2tJbmZvLnBsYXliYWNrX2NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB0cmFja0luZm8udXNlci51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc291bmRjbG91ZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3NvdW5kY2xvdWRUcmFjaycsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZFRyYWNrcy5wdXNoKHRyYWNrKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiByZXNvbHZlZFRyYWNrcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGVtcHR5UmVzcG9uc2UoKTogRXh0cmFjdG9ySW5mbyB7XG4gICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjaykge1xuICAgICAgICBjb25zdCB1cmwgPSBhd2FpdCB0aGlzLmludGVybmFsLnV0aWwuc3RyZWFtTGluayhpbmZvLnVybCkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGV4dHJhY3Qgc3RyZWFtIGZyb20gdGhpcyB0cmFjayBzb3VyY2UnKTtcblxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBWaWRlbywgWW91VHViZSB9IGZyb20gJ3lvdXR1YmUtc3InO1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7XG4gICAgQmFzZUV4dHJhY3RvcixcbiAgICBFeHRyYWN0b3JJbmZvLFxuICAgIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gICAgUGxheWxpc3QsXG4gICAgUXVlcnlUeXBlLFxuICAgIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgICBUcmFjayxcbiAgICBVdGlsXG59IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcblxuaW1wb3J0IHsgU3RyZWFtRk4sIFlvdVR1YmVMaWJzLCBsb2FkWXRkbCwgbWFrZVlUU2VhcmNoIH0gZnJvbSAnLi9jb21tb24vaGVscGVyJztcbmltcG9ydCB0eXBlIHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuXG4vLyB0YWtlbiBmcm9tIHl0ZGwtY29yZVxuY29uc3QgdmFsaWRRdWVyeURvbWFpbnMgPSBuZXcgU2V0KFsneW91dHViZS5jb20nLCAnd3d3LnlvdXR1YmUuY29tJywgJ20ueW91dHViZS5jb20nLCAnbXVzaWMueW91dHViZS5jb20nLCAnZ2FtaW5nLnlvdXR1YmUuY29tJ10pO1xuY29uc3QgdmFsaWRQYXRoRG9tYWlucyA9IC9eaHR0cHM/OlxcL1xcLyh5b3V0dVxcLmJlXFwvfCh3d3dcXC4pP3lvdXR1YmVcXC5jb21cXC8oZW1iZWR8dnxzaG9ydHMpXFwvKS87XG5jb25zdCBpZFJlZ2V4ID0gL15bYS16QS1aMC05LV9dezExfSQvO1xuXG5leHBvcnQgaW50ZXJmYWNlIFlvdXR1YmVFeHRyYWN0b3JJbml0IHtcbiAgICBjcmVhdGVTdHJlYW0/OiAoZXh0OiBZb3V0dWJlRXh0cmFjdG9yLCB1cmw6IHN0cmluZykgPT4gUHJvbWlzZTxSZWFkYWJsZSB8IHN0cmluZz47XG59XG5cbmV4cG9ydCBjbGFzcyBZb3V0dWJlRXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvcjxZb3V0dWJlRXh0cmFjdG9ySW5pdD4ge1xuICAgIHB1YmxpYyBzdGF0aWMgaWRlbnRpZmllciA9ICdjb20uZGlzY29yZC1wbGF5ZXIueW91dHViZWV4dHJhY3RvcicgYXMgY29uc3Q7XG4gICAgcHJpdmF0ZSBfc3RyZWFtITogU3RyZWFtRk47XG4gICAgcHVibGljIF95dExpYk5hbWUhOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgYXN5bmMgYWN0aXZhdGUoKSB7XG4gICAgICAgIGNvbnN0IGZuID0gdGhpcy5vcHRpb25zLmNyZWF0ZVN0cmVhbTtcblxuICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0gPSAocTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKHRoaXMsIHEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBzdHJlYW0sIG5hbWUgfSA9IGF3YWl0IGxvYWRZdGRsKHRoaXMuY29udGV4dC5wbGF5ZXIub3B0aW9ucy55dGRsT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgdGhpcy5feXRMaWJOYW1lID0gbmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHJldHVybiAoW1xuICAgICAgICAgICAgUXVlcnlUeXBlLllPVVRVQkUsXG4gICAgICAgICAgICBRdWVyeVR5cGUuWU9VVFVCRV9QTEFZTElTVCxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5ZT1VUVUJFX1NFQVJDSCxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5ZT1VUVUJFX1ZJREVPLFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFVVE8sXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVVUT19TRUFSQ0hcbiAgICAgICAgXSBhcyBTZWFyY2hRdWVyeVR5cGVbXSkuc29tZSgocikgPT4gciA9PT0gdHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGhhbmRsZShxdWVyeTogc3RyaW5nLCBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KTogUHJvbWlzZTxFeHRyYWN0b3JJbmZvPiB7XG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuaW5jbHVkZXMoJ3lvdXR1YmUuY29tJykgPyBxdWVyeS5yZXBsYWNlKC8obSh1c2ljKT98Z2FtaW5nKVxcLi8sICcnKSA6IHF1ZXJ5O1xuICAgICAgICBpZiAoWW91dHViZUV4dHJhY3Rvci52YWxpZGF0ZVVSTChxdWVyeSkpIGNvbnRleHQudHlwZSA9IFF1ZXJ5VHlwZS5ZT1VUVUJFX1ZJREVPO1xuXG4gICAgICAgIHN3aXRjaCAoY29udGV4dC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5ZT1VUVUJFX1BMQVlMSVNUOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeXRwbCA9IGF3YWl0IFlvdVR1YmUuZ2V0UGxheWxpc3QocXVlcnksIHtcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2hBbGw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zOiBjb250ZXh0LnJlcXVlc3RPcHRpb25zIGFzIHVua25vd24gYXMgUmVxdWVzdEluaXRcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgICAgIGlmICgheXRwbCkgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogeXRwbC50aXRsZSEsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogeXRwbC50aHVtYm5haWw/LmRpc3BsYXlUaHVtYm5haWxVUkwoJ21heHJlc2RlZmF1bHQnKSBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB5dHBsLnRpdGxlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGxheWxpc3QnLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICd5b3V0dWJlJyxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB5dHBsLmNoYW5uZWwhLm5hbWUgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB5dHBsLmNoYW5uZWwhLnVybCBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHl0cGwuaWQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHl0cGwudXJsIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgcmF3UGxheWxpc3Q6IHl0cGxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IHl0cGwudmlkZW9zLm1hcCgodmlkZW8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHZpZGVvLnRpdGxlIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2aWRlby5kZXNjcmlwdGlvbiBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHZpZGVvLmNoYW5uZWw/Lm5hbWUgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB2aWRlby51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdmlkZW8udGh1bWJuYWlsIS51cmwgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IHZpZGVvLnZpZXdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHZpZGVvLmR1cmF0aW9uRm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3OiB2aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0OiBwbGF5bGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3lvdXR1YmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiAneW91dHViZVZpZGVvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB2aWRlbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlkZW87XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLnBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuWU9VVFVCRV9WSURFTzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gL1thLXpBLVowLTktX117MTF9Ly5leGVjKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlkPy5bMF0pIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlbyA9IGF3YWl0IFlvdVR1YmUuZ2V0VmlkZW8oYGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9JHtpZH1gLCBjb250ZXh0LnJlcXVlc3RPcHRpb25zIGFzIHVua25vd24gYXMgUmVxdWVzdEluaXQpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgICAgICAgaWYgKCF2aWRlbykgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHZpZGVvLnNvdXJjZSA9ICd5b3V0dWJlJztcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHZpZGVvLnRpdGxlISxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHZpZGVvLmRlc2NyaXB0aW9uISxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiB2aWRlby5jaGFubmVsPy5uYW1lIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB2aWRlby51cmwsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHZpZGVvLnRodW1ibmFpbD8uZGlzcGxheVRodW1ibmFpbFVSTCgnbWF4cmVzZGVmYXVsdCcpIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHZpZGVvLnZpZXdzLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdmlkZW8uZHVyYXRpb25Gb3JtYXR0ZWQsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3lvdXR1YmUnLFxuICAgICAgICAgICAgICAgICAgICByYXc6IHZpZGVvLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHZpZGVvLFxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlkZW87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbdHJhY2tdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja3MgPSBhd2FpdCB0aGlzLl9tYWtlWVRTZWFyY2gocXVlcnksIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3MgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgX21ha2VZVFNlYXJjaChxdWVyeTogc3RyaW5nLCBjb250ZXh0OiBFeHRyYWN0b3JTZWFyY2hDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IG1ha2VZVFNlYXJjaChxdWVyeSwgY29udGV4dC5yZXF1ZXN0T3B0aW9ucykuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgaWYgKCFyZXMgfHwgIXJlcy5sZW5ndGgpIHJldHVybiBbXTtcblxuICAgICAgICByZXR1cm4gcmVzLm1hcCgodmlkZW8pID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIHZpZGVvLnNvdXJjZSA9ICd5b3V0dWJlJztcblxuICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB2aWRlby50aXRsZSEsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHZpZGVvLmRlc2NyaXB0aW9uISxcbiAgICAgICAgICAgICAgICBhdXRob3I6IHZpZGVvLmNoYW5uZWw/Lm5hbWUgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIHVybDogdmlkZW8udXJsLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdmlkZW8udGh1bWJuYWlsPy5kaXNwbGF5VGh1bWJuYWlsVVJMKCdtYXhyZXNkZWZhdWx0JykgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB2aWRlby52aWV3cyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdmlkZW8uZHVyYXRpb25Gb3JtYXR0ZWQsXG4gICAgICAgICAgICAgICAgc291cmNlOiAneW91dHViZScsXG4gICAgICAgICAgICAgICAgcmF3OiB2aWRlbyxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSEsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHZpZGVvLFxuICAgICAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZGVvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgICAgICBsZXQgaW5mbzogVmlkZW9bXSB8IHZvaWQ7XG5cbiAgICAgICAgaWYgKFlvdXR1YmVFeHRyYWN0b3IudmFsaWRhdGVVUkwodHJhY2sudXJsKSlcbiAgICAgICAgICAgIGluZm8gPSBhd2FpdCBZb3VUdWJlLmdldFZpZGVvKHRyYWNrLnVybClcbiAgICAgICAgICAgICAgICAudGhlbigoeCkgPT4geC52aWRlb3MpXG4gICAgICAgICAgICAgICAgLmNhdGNoKFV0aWwubm9vcCk7XG5cbiAgICAgICAgLy8gZmFsbGJhY2tcbiAgICAgICAgaWYgKCFpbmZvKVxuICAgICAgICAgICAgaW5mbyA9IGF3YWl0IFlvdVR1YmUuc2VhcmNoKHRyYWNrLmF1dGhvciB8fCB0cmFjay50aXRsZSwgeyBsaW1pdDogNSwgdHlwZTogJ3ZpZGVvJyB9KVxuICAgICAgICAgICAgICAgIC50aGVuKCh4KSA9PiB4KVxuICAgICAgICAgICAgICAgIC5jYXRjaChVdGlsLm5vb3ApO1xuXG4gICAgICAgIGlmICghaW5mbz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2ltaWxhciA9IGluZm8ubWFwKCh2aWRlbykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHZpZGVvLnRpdGxlISxcbiAgICAgICAgICAgICAgICB1cmw6IGBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PSR7dmlkZW8uaWR9YCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdmlkZW8uZHVyYXRpb25Gb3JtYXR0ZWQgfHwgVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh2aWRlby5kdXJhdGlvbiAqIDEwMDApKSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdmlkZW8udGl0bGUhLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdHlwZW9mIHZpZGVvLnRodW1ibmFpbCA9PT0gJ3N0cmluZycgPyB2aWRlby50aHVtYm5haWwhIDogdmlkZW8udGh1bWJuYWlsIS51cmwhLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB2aWRlby52aWV3cyxcbiAgICAgICAgICAgICAgICBhdXRob3I6IHZpZGVvLmNoYW5uZWwhLm5hbWUhLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiB0cmFjay5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICd5b3V0dWJlJyxcbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU6ICd5b3V0dWJlVmlkZW8nLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB2aWRlbyxcbiAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWRlbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdC5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UobnVsbCwgc2ltaWxhcik7XG4gICAgfVxuXG4gICAgcHVibGljIGVtcHR5UmVzcG9uc2UoKTogRXh0cmFjdG9ySW5mbyB7XG4gICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuX3N0cmVhbSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCB5b3V0dWJlIHN0cmVhbWluZyBsaWJyYXJ5LiBJbnN0YWxsIG9uZSBvZiAke1lvdVR1YmVMaWJzLmpvaW4oJywgJyl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdXJsID0gaW5mby51cmw7XG4gICAgICAgIHVybCA9IHVybC5pbmNsdWRlcygneW91dHViZS5jb20nKSA/IHVybC5yZXBsYWNlKC8obSh1c2ljKT98Z2FtaW5nKVxcLi8sICcnKSA6IHVybDtcblxuICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtKHVybCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZVVSTChsaW5rOiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFlvdXR1YmVFeHRyYWN0b3IucGFyc2VVUkwobGluayk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHZhbGlkYXRlSWQoaWQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gaWRSZWdleC50ZXN0KGlkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZVVSTChsaW5rOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IFVSTChsaW5rLnRyaW0oKSk7XG4gICAgICAgIGxldCBpZCA9IHBhcnNlZC5zZWFyY2hQYXJhbXMuZ2V0KCd2Jyk7XG4gICAgICAgIGlmICh2YWxpZFBhdGhEb21haW5zLnRlc3QobGluay50cmltKCkpICYmICFpZCkge1xuICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBwYXJzZWQucGF0aG5hbWUuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIGlkID0gcGFyc2VkLmhvc3QgPT09ICd5b3V0dS5iZScgPyBwYXRoc1sxXSA6IHBhdGhzWzJdO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcnNlZC5ob3N0bmFtZSAmJiAhdmFsaWRRdWVyeURvbWFpbnMuaGFzKHBhcnNlZC5ob3N0bmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdOb3QgYSBZb3VUdWJlIGRvbWFpbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBObyB2aWRlbyBpZCBmb3VuZDogXCIke2xpbmt9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICBpZCA9IGlkLnN1YnN0cmluZygwLCAxMSk7XG4gICAgICAgIGlmICghdGhpcy52YWxpZGF0ZUlkKGlkKSkge1xuICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGBWaWRlbyBpZCAoJHtpZH0pIGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkIGAgKyBgZm9ybWF0ICgke2lkUmVnZXgudG9TdHJpbmcoKX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgWW91dHViZUV4dHJhY3RvciBhcyBZb3VUdWJlRXh0cmFjdG9yIH07XG4iLCAiaW1wb3J0IHsgQmFzZUV4dHJhY3RvciwgVHJhY2sgfSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgeyBZb3VUdWJlIH0gZnJvbSAneW91dHViZS1zcic7XG5pbXBvcnQgeyBTb3VuZENsb3VkRXh0cmFjdG9yIH0gZnJvbSAnLi4vU291bmRDbG91ZEV4dHJhY3Rvcic7XG5cbmxldCBmYWN0b3J5OiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN0cmVhbTogU3RyZWFtRk47XG4gICAgbGliOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlSW1wb3J0ID0gKGxpYjogc3RyaW5nKSA9PiBpbXBvcnQobGliKS5jYXRjaCgoKSA9PiBudWxsKTtcbmV4cG9ydCBjb25zdCBVQSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA5LjAuMC4wIFNhZmFyaS81MzcuMzYgRWRnLzEwOS4wLjE1MTguNDknO1xuXG5leHBvcnQgY29uc3QgWW91VHViZUxpYnMgPSBbXG4gICAgJ3l0ZGwtY29yZScsXG4gICAgJ0BkaXN0dWJlL3l0ZGwtY29yZScsXG4gICAgJ3BsYXktZGwnLFxuICAgICd5dC1zdHJlYW0nXG4gICAgLy8gYWRkIG1vcmUgdG8gdGhlIGxpc3QgaWYgeW91IGhhdmUgYW55XG5dO1xuXG5jb25zdCBFUlJfTk9fWVRfTElCID0gbmV3IEVycm9yKGBDb3VsZCBub3QgbG9hZCB5b3V0dWJlIGxpYnJhcnkuIEluc3RhbGwgb25lIG9mICR7WW91VHViZUxpYnMubWFwKChsaWIpID0+IGBcIiR7bGlifVwiYCkuam9pbignLCAnKX1gKTtcblxuLy8gZm9yY2VkIGxpYlxuY29uc3QgZm9yY2VkTGliID0gcHJvY2Vzcy5lbnYuRFBfRk9SQ0VfWVRETF9NT0Q7XG5pZiAoZm9yY2VkTGliKSBZb3VUdWJlTGlicy51bnNoaWZ0KGZvcmNlZExpYik7XG5cbmV4cG9ydCBjb25zdCBnZXRGZXRjaCA9XG4gICAgdHlwZW9mIGZldGNoICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGZldGNoXG4gICAgICAgIDogYXN5bmMgKGluZm86IFJlcXVlc3RJbmZvLCBpbml0PzogUmVxdWVzdEluaXQpOiBQcm9taXNlPFJlc3BvbnNlPiA9PiB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICBsZXQgZHk6IGFueTtcblxuICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuICAgICAgICAgICAgICBpZiAoKGR5ID0gYXdhaXQgY3JlYXRlSW1wb3J0KCd1bmRpY2knKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoZHkuZmV0Y2ggfHwgZHkuZGVmYXVsdC5mZXRjaCkoaW5mbywgaW5pdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGR5ID0gYXdhaXQgY3JlYXRlSW1wb3J0KCdub2RlLWZldGNoJykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGR5LmZldGNoIHx8IGR5LmRlZmF1bHQpKGluZm8sIGluaXQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBmZXRjaCBsaWIgZm91bmQnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cbiAgICAgICAgICB9O1xuXG5leHBvcnQgdHlwZSBTdHJlYW1GTiA9IChxOiBzdHJpbmcpID0+IFByb21pc2U8aW1wb3J0KCdzdHJlYW0nKS5SZWFkYWJsZSB8IHN0cmluZz47XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZFl0ZGwob3B0aW9ucz86IGFueSwgZm9yY2UgPSBmYWxzZSkge1xuICAgIGlmIChmYWN0b3J5ICYmICFmb3JjZSkgcmV0dXJuIGZhY3Rvcnk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBsaWI6IGFueSwgX3l0TGliTmFtZTogc3RyaW5nLCBfc3RyZWFtOiBTdHJlYW1GTjtcblxuICAgIGZvciAoY29uc3QgeXRsaWIgb2YgWW91VHViZUxpYnMpIHtcbiAgICAgICAgbGliID0gYXdhaXQgaW1wb3J0KHl0bGliKS50aGVuKFxuICAgICAgICAgICAgKG0pID0+IG0sXG4gICAgICAgICAgICAoKSA9PiBudWxsXG4gICAgICAgICk7XG4gICAgICAgIGlmICghbGliKSBjb250aW51ZTtcbiAgICAgICAgbGliID0gbGliLmRlZmF1bHQgfHwgbGliO1xuICAgICAgICBfeXRMaWJOYW1lID0geXRsaWI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChsaWIpIHtcbiAgICAgICAgY29uc3QgaXNZdGRsID0gWyd5dGRsLWNvcmUnLCAnQGRpc3R1YmUveXRkbC1jb3JlJ10uc29tZSgobGliKSA9PiBsaWIgPT09IF95dExpYk5hbWUpO1xuXG4gICAgICAgIF9zdHJlYW0gPSBhc3luYyAocXVlcnkpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1l0ZGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkbCA9IGxpYiBhcyB0eXBlb2YgaW1wb3J0KCd5dGRsLWNvcmUnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgZGwuZ2V0SW5mbyhxdWVyeSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRzID0gaW5mby5mb3JtYXRzXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGZvcm1hdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZm8udmlkZW9EZXRhaWxzLmlzTGl2ZUNvbnRlbnQgPyBmb3JtYXQuaXNITFMgJiYgZm9ybWF0Lmhhc0F1ZGlvIDogZm9ybWF0Lmhhc0F1ZGlvO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gTnVtYmVyKGIuYXVkaW9CaXRyYXRlKSAtIE51bWJlcihhLmF1ZGlvQml0cmF0ZSkgfHwgTnVtYmVyKGEuYml0cmF0ZSkgLSBOdW1iZXIoYi5iaXRyYXRlKSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXRzLmZpbmQoKGZvcm1hdCkgPT4gIWZvcm1hdC5oYXNWaWRlbykgfHwgZm9ybWF0cy5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYS5iaXRyYXRlKSAtIE51bWJlcihiLmJpdHJhdGUpKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBmbXQ/LnVybDtcbiAgICAgICAgICAgICAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2Ugc3RyZWFtIHVybCBmb3IgJHtxdWVyeX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBkbChxdWVyeSwgdGhpcy5jb250ZXh0LnBsYXllci5vcHRpb25zLnl0ZGxPcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3l0TGliTmFtZSA9PT0gJ3BsYXktZGwnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGwgPSBsaWIgYXMgdHlwZW9mIGltcG9ydCgncGxheS1kbCcpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IGF3YWl0IGRsLnZpZGVvX2luZm8ocXVlcnkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHMgPSBpbmZvLmZvcm1hdFxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChmb3JtYXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gL1xcL21hbmlmZXN0XFwvaGxzXyh2YXJpYW50fHBsYXlsaXN0KVxcLy87XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvcm1hdC51cmwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLnZpZGVvX2RldGFpbHMubGl2ZSkgcmV0dXJuIHJlLnRlc3QoZm9ybWF0LnVybCkgJiYgdHlwZW9mIGZvcm1hdC5iaXRyYXRlID09PSAnbnVtYmVyJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm9ybWF0LmJpdHJhdGUgPT09ICdudW1iZXInO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gTnVtYmVyKGIuYml0cmF0ZSkgLSBOdW1iZXIoYS5iaXRyYXRlKSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXRzLmZpbmQoKGZvcm1hdCkgPT4gIWZvcm1hdC5xdWFsaXR5TGFiZWwpIHx8IGZvcm1hdHMuc29ydCgoYSwgYikgPT4gTnVtYmVyKGEuYml0cmF0ZSkgLSBOdW1iZXIoYi5iaXRyYXRlKSlbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gZm10Py51cmw7XG4gICAgICAgICAgICAgICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIHN0cmVhbSB1cmwgZm9yICR7cXVlcnl9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gKGF3YWl0IGRsLnN0cmVhbShxdWVyeSwgeyBkaXNjb3JkUGxheWVyQ29tcGF0aWJpbGl0eTogdHJ1ZSB9KSkuc3RyZWFtO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfeXRMaWJOYW1lID09PSAneXQtc3RyZWFtJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRsID0gbGliIGFzIHR5cGVvZiBpbXBvcnQoJ3l0LXN0cmVhbScpO1xuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBEZWZhdWx0IGxpYiBkaWQgbm90IHByb3ZpZGUgdHlwZXMgZm9yIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIGNvbnN0IGRlY2lwaGVyOiBhbnkgPSBhd2FpdCBpbXBvcnQoJ3l0LXN0cmVhbS9zcmMvc3RyZWFtL2RlY2lwaGVyLmpzJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgZGwuZ2V0SW5mbyhxdWVyeSk7XG5cbiAgICAgICAgICAgICAgICBpbmZvLmZvcm1hdHMgPSBhd2FpdCBkZWNpcGhlcj8uZm9ybWF0X2RlY2lwaGVyKGluZm8uZm9ybWF0cywgaW5mby5odG1sNXBsYXllcik7XG5cbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRoZSBsaWIgZGlkIG5vdCBwcm92aWRlIHRzIHN1cHBvcnRcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBpbmZvLmZvcm1hdHMuZmlsdGVyKCh2YWwpID0+IHZhbC5taW1lVHlwZS5zdGFydHNXaXRoKCdhdWRpbycpICYmIHZhbC5hdWRpb1F1YWxpdHkgIT09ICdBVURJT19RVUFMSVRZX0xPVycpLm1hcCgodmFsKSA9PiB2YWwudXJsKSBhcyBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAgICAgICAgICAgaWYgKHVybC5sZW5ndGggIT09IDApIHJldHVybiB1cmxbMF07XG5cbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRoZSBsaWIgZGlkIG5vdCBwcm92aWRlIHRzIHN1cHBvcnRcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5mby5mb3JtYXRzLmZpbHRlcigodmFsKSA9PiB2YWwubWltZVR5cGUuc3RhcnRzV2l0aCgnYXVkaW8nKSkubWFwKCh2YWwpID0+IHZhbC51cmwpWzBdIGFzIHN0cmluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRVJSX05PX1lUX0xJQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFUlJfTk9fWVRfTElCO1xuICAgIH1cblxuICAgIGZhY3RvcnkgPSB7IG5hbWU6IF95dExpYk5hbWUhLCBzdHJlYW06IF9zdHJlYW0sIGxpYiB9O1xuICAgIHJldHVybiBmYWN0b3J5O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1ha2VZVFNlYXJjaChxdWVyeTogc3RyaW5nLCBvcHQ6IGFueSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IFlvdVR1YmUuc2VhcmNoKHF1ZXJ5LCB7XG4gICAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiBvcHRcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIC8vXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzIHx8IFtdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFrZVNDU2VhcmNoKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IHNvdW5kY2xvdWQgfSA9IFNvdW5kQ2xvdWRFeHRyYWN0b3I7XG4gICAgaWYgKCFzb3VuZGNsb3VkKSByZXR1cm4gW107XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgc291bmRjbG91ZC50cmFja3Muc2VhcmNoVjIoe1xuICAgICAgICAgICAgcTogcXVlcnksXG4gICAgICAgICAgICBsaW1pdDogNVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaW5mby5jb2xsZWN0aW9uO1xuICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBmYWxsYmFja1xuICAgICAgICBjb25zdCBpbmZvID0gYXdhaXQgc291bmRjbG91ZC50cmFja3Muc2VhcmNoQWx0KHF1ZXJ5KTtcblxuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdWxsWVRNZXRhZGF0YShleHQ6IEJhc2VFeHRyYWN0b3IsIGluZm86IFRyYWNrKSB7XG4gICAgY29uc3QgbWV0YSA9IGF3YWl0IG1ha2VZVFNlYXJjaChleHQuY3JlYXRlQnJpZGdlUXVlcnkoaW5mbyksICd2aWRlbycpXG4gICAgICAgIC50aGVuKChyKSA9PiByWzBdKVxuICAgICAgICAuY2F0Y2goKCkgPT4gbnVsbCk7XG5cbiAgICByZXR1cm4gbWV0YTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1bGxTQ01ldGFkYXRhKGV4dDogQmFzZUV4dHJhY3RvciwgaW5mbzogVHJhY2spIHtcbiAgICBjb25zdCBtZXRhID0gYXdhaXQgbWFrZVNDU2VhcmNoKGV4dC5jcmVhdGVCcmlkZ2VRdWVyeShpbmZvKSlcbiAgICAgICAgLnRoZW4oKHIpID0+IHJbMF0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiBudWxsKTtcblxuICAgIHJldHVybiBtZXRhO1xufVxuIiwgImltcG9ydCB7IENsaWVudCBhcyBHZW5pdXNDbGllbnQgfSBmcm9tICdnZW5pdXMtbHlyaWNzJztcblxuLy8gbGF6eSBsb2FkIGNsaWVudFxubGV0IGNsaWVudDogR2VuaXVzQ2xpZW50O1xuXG5leHBvcnQgZnVuY3Rpb24gbHlyaWNzRXh0cmFjdG9yKGFwaUtleT86IHN0cmluZywgZm9yY2U/OiBib29sZWFuKSB7XG4gICAgaWYgKCFjbGllbnQgJiYgIWZvcmNlKSBjbGllbnQgPSBuZXcgR2VuaXVzQ2xpZW50KGFwaUtleSk7XG4gICAgcmV0dXJuIHsgc2VhcmNoLCBjbGllbnQgfTtcbn1cblxuZnVuY3Rpb24gc2VhcmNoKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8THlyaWNzRGF0YSB8IG51bGw+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3N0cmluZycpIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgc2VhcmNoIHF1ZXJ5IHRvIGJlIGEgc3RyaW5nLCByZWNlaXZlZCBcIiR7dHlwZW9mIHF1ZXJ5fVwiIWApKTtcblxuICAgICAgICBjbGllbnQuc29uZ3NcbiAgICAgICAgICAgIC5zZWFyY2gocXVlcnkpXG4gICAgICAgICAgICAudGhlbihhc3luYyAoc29uZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogc29uZ3NbMF0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxUaXRsZTogc29uZ3NbMF0uZnVsbFRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBpZDogc29uZ3NbMF0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc29uZ3NbMF0udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogc29uZ3NbMF0uaW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgIHVybDogc29uZ3NbMF0udXJsLFxuICAgICAgICAgICAgICAgICAgICBhcnRpc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNvbmdzWzBdLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHNvbmdzWzBdLmFydGlzdC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc29uZ3NbMF0uYXJ0aXN0LnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBzb25nc1swXS5hcnRpc3QuaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbHlyaWNzOiBhd2FpdCBzb25nc1swXS5seXJpY3MoZmFsc2UpXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdDb3VsZCBub3QgcGFyc2UgbHlyaWNzJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTHlyaWNzRGF0YSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBmdWxsVGl0bGU6IHN0cmluZztcbiAgICBpZDogbnVtYmVyO1xuICAgIHRodW1ibmFpbDogc3RyaW5nO1xuICAgIGltYWdlOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgYXJ0aXN0OiB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgaWQ6IG51bWJlcjtcbiAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgICAgIGltYWdlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBseXJpY3M6IHN0cmluZztcbn1cbiIsICIvLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7XG4gICAgQmFzZUV4dHJhY3RvcixcbiAgICBFeHRyYWN0b3JJbmZvLFxuICAgIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gICAgUXVlcnlUeXBlLFxuICAgIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgICBUcmFjayxcbiAgICBVdGlsXG59IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB7IFZpbWVvIH0gZnJvbSAnLi4vaW50ZXJuYWwvVmltZW8nO1xuXG5leHBvcnQgY2xhc3MgVmltZW9FeHRyYWN0b3IgZXh0ZW5kcyBCYXNlRXh0cmFjdG9yIHtcbiAgICBwdWJsaWMgc3RhdGljIGlkZW50aWZpZXIgPSAnY29tLmRpc2NvcmQtcGxheWVyLnZpbWVvZXh0cmFjdG9yJyBhcyBjb25zdDtcblxuICAgIHB1YmxpYyBhc3luYyB2YWxpZGF0ZShxdWVyeTogc3RyaW5nLCB0eXBlPzogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gKFtRdWVyeVR5cGUuVklNRU9dIGFzIFNlYXJjaFF1ZXJ5VHlwZVtdKS5zb21lKChyKSA9PiByID09PSB0eXBlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0UmVsYXRlZFRyYWNrcyh0cmFjazogVHJhY2spIHtcbiAgICAgICAgdm9pZCB0cmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlZJTUVPOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tJbmZvID0gYXdhaXQgVmltZW8uZ2V0SW5mbyhcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnLycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCh4KSA9PiAhIXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucG9wKCkhXG4gICAgICAgICAgICAgICAgKS5jYXRjaChVdGlsLm5vb3ApO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0cmFja0luZm8pIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRyYWNrSW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0cmFja0luZm8udXJsLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyh0cmFja0luZm8uZHVyYXRpb24gfHwgMCkpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7dHJhY2tJbmZvLnRpdGxlfSBieSAke3RyYWNrSW5mby5hdXRob3IubmFtZX1gLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby5hdXRob3IubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FyYml0cmFyeScsXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZTogdHJhY2tJbmZvLnN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB0cmFja0luZm8sXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIHJlcXVlc3RNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFja0luZm87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbdHJhY2tdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBlbXB0eVJlc3BvbnNlKCk6IEV4dHJhY3RvckluZm8ge1xuICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdHJlYW0oaW5mbzogVHJhY2spIHtcbiAgICAgICAgY29uc3QgZW5naW5lID0gaW5mby5yYXcuZW5naW5lIGFzIHN0cmluZztcbiAgICAgICAgaWYgKGVuZ2luZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyYWNrID0gYXdhaXQgVmltZW8uZ2V0SW5mbyhpbmZvLnVybCkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgaWYgKCF0cmFjayB8fCAhdHJhY2suc3RyZWFtKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IHN0cmVhbSBmcm9tIHRoaXMgc291cmNlJyk7XG5cbiAgICAgICAgaW5mby5yYXcuZW5naW5lID0ge1xuICAgICAgICAgICAgc3RyZWFtVVJMOiB0cmFjay5zdHJlYW1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdHJhY2suc3RyZWFtO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgeyBnZXRGZXRjaCB9IGZyb20gJy4uL2V4dHJhY3RvcnMvY29tbW9uL2hlbHBlcic7XG5cbmNsYXNzIFZpbWVvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9IGNsYXNzIG1heSBub3QgYmUgaW5zdGFudGlhdGVkIWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtSZWFkYWJsZX0gUmVhZGFibGVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIERvd25sb2FkcyBmcm9tIHZpbWVvXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFZpbWVvIHZpZGVvIGlkXG4gICAgICogQHJldHVybnMge1Byb21pc2U8UmVhZGFibGU+fVxuICAgICAqL1xuICAgIHN0YXRpYyBkb3dubG9hZChpZDogbnVtYmVyIHwgc3RyaW5nKTogUHJvbWlzZTxSZWFkYWJsZT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBWaW1lby5nZXRJbmZvKGlkKTtcbiAgICAgICAgICAgIGlmICghaW5mbykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkZXIgPSBpbmZvLnN0cmVhbS5zdGFydHNXaXRoKCdodHRwczovLycpID8gaHR0cHMgOiBodHRwO1xuXG4gICAgICAgICAgICBkb3dubG9hZGVyLmdldChpbmZvLnN0cmVhbSwgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZpZGVvIGluZm9cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWQgVmlkZW8gaWRcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0SW5mbyhpZDogbnVtYmVyIHwgc3RyaW5nKTogUHJvbWlzZTxWaW1lb0luZm8gfCBudWxsPiB7XG4gICAgICAgIGlmICghaWQpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpZCcpO1xuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyR7aWR9YDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0RmV0Y2godXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMudGV4dCgpO1xuICAgICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UoZGF0YS5zcGxpdCgnd2luZG93LnBsYXllckNvbmZpZyA9JylbMV0uc3BsaXQoJzsnKVswXS50cmltKCkpO1xuXG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGpzb24udmlkZW8uaWQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGpzb24udmlkZW8uZHVyYXRpb24gKiAxMDAwLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBqc29uLnZpZGVvLnRpdGxlLFxuICAgICAgICAgICAgICAgIHVybDoganNvbi52aWRlby51cmwsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBqc29uLnZpZGVvLnRodW1ic1snMTI4MCddIHx8IGpzb24udmlkZW8udGh1bWJzLmJhc2UsXG4gICAgICAgICAgICAgICAgc3RyZWFtOiBqc29uLnJlcXVlc3QuZmlsZXMucHJvZ3Jlc3NpdmVbMF0udXJsLFxuICAgICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgICAgICBpZDoganNvbi52aWRlby5vd25lci5pZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZToganNvbi52aWRlby5vd25lci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGpzb24udmlkZW8ub3duZXIudXJsLFxuICAgICAgICAgICAgICAgICAgICBhdmF0YXI6IGpzb24udmlkZW8ub3duZXIuaW1nXzJ4IHx8IGpzb24udmlkZW8ub3duZXIuaW1nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaW1lb0luZm8ge1xuICAgIGlkOiBudW1iZXI7XG4gICAgZHVyYXRpb246IG51bWJlcjtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIHRodW1ibmFpbDogc3RyaW5nO1xuICAgIHN0cmVhbTogc3RyaW5nO1xuICAgIGF1dGhvcjoge1xuICAgICAgICBpZDogbnVtYmVyO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICBhdmF0YXI6IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgeyBWaW1lbyB9O1xuIiwgIi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtcbiAgICBCYXNlRXh0cmFjdG9yLFxuICAgIEV4dHJhY3RvckluZm8sXG4gICAgRXh0cmFjdG9yU2VhcmNoQ29udGV4dCxcbiAgICBRdWVyeVR5cGUsXG4gICAgU2VhcmNoUXVlcnlUeXBlLFxuICAgIFRyYWNrLFxuICAgIFV0aWxcbn0gZnJvbSAnZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHJldmVyYm5hdGlvbiBmcm9tICdyZXZlcmJuYXRpb24tc2NyYXBlcic7XG5cbmV4cG9ydCBjbGFzcyBSZXZlcmJuYXRpb25FeHRyYWN0b3IgZXh0ZW5kcyBCYXNlRXh0cmFjdG9yIHtcbiAgICBwdWJsaWMgc3RhdGljIGlkZW50aWZpZXIgPSAnY29tLmRpc2NvcmQtcGxheWVyLnJldmVyYm5hdGlvbmV4dHJhY3RvcicgYXMgY29uc3Q7XG5cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIChbUXVlcnlUeXBlLlJFVkVSQk5BVElPTl0gYXMgU2VhcmNoUXVlcnlUeXBlW10pLnNvbWUoKHIpID0+IHIgPT09IHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgICAgICB2b2lkIHRyYWNrO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBoYW5kbGUocXVlcnk6IHN0cmluZywgY29udGV4dDogRXh0cmFjdG9yU2VhcmNoQ29udGV4dCk6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgICAgICBzd2l0Y2ggKGNvbnRleHQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuUkVWRVJCTkFUSU9OOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tJbmZvID0gYXdhaXQgcmV2ZXJibmF0aW9uLmdldEluZm8ocXVlcnkpLmNhdGNoKFV0aWwubm9vcCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRyYWNrSW5mbykgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2tJbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHRyYWNrSW5mby5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhY2tJbmZvLmx5cmljcyB8fCBgJHt0cmFja0luZm8udGl0bGV9IGJ5ICR7dHJhY2tJbmZvLmFydGlzdC5uYW1lfWAsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogdHJhY2tJbmZvLnRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjogdHJhY2tJbmZvLmFydGlzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXJiaXRyYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lOiB0cmFja0luZm8uc3RyZWFtVVJMLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IGNvbnRleHQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWNrSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgcmVxdWVzdE1ldGFkYXRhKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrSW5mbztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHlSZXNwb25zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGVtcHR5UmVzcG9uc2UoKTogRXh0cmFjdG9ySW5mbyB7XG4gICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjaykge1xuICAgICAgICBjb25zdCBlbmdpbmUgPSBpbmZvLnJhdy5lbmdpbmUgYXMgc3RyaW5nO1xuICAgICAgICBpZiAoZW5naW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5naW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhY2sgPSBhd2FpdCByZXZlcmJuYXRpb24uZ2V0SW5mbyhpbmZvLnVybCkuY2F0Y2goVXRpbC5ub29wKTtcbiAgICAgICAgaWYgKCF0cmFjayB8fCAhdHJhY2suc3RyZWFtVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IHN0cmVhbSBmcm9tIHRoaXMgc291cmNlJyk7XG5cbiAgICAgICAgaW5mby5yYXcuZW5naW5lID0ge1xuICAgICAgICAgICAgc3RyZWFtVVJMOiB0cmFjay5zdHJlYW1VUkxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdHJhY2suc3RyZWFtVVJMO1xuICAgIH1cbn1cbiIsICIvLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7XG4gICAgQmFzZUV4dHJhY3RvcixcbiAgICBFeHRyYWN0b3JJbmZvLFxuICAgIEV4dHJhY3RvclNlYXJjaENvbnRleHQsXG4gICAgUXVlcnlUeXBlLFxuICAgIFNlYXJjaFF1ZXJ5VHlwZSxcbiAgICBUcmFjayxcbiAgICBVdGlsXG59IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB0eXBlIHsgSW5jb21pbmdNZXNzYWdlIH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgeyBjcmVhdGVSZWFkU3RyZWFtLCBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgZG93bmxvYWRTdHJlYW0gfSBmcm9tICcuLi9pbnRlcm5hbC9kb3dubG9hZGVyJztcbmltcG9ydCAqIGFzIGZpbGVUeXBlIGZyb20gJ2ZpbGUtdHlwZSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHN0YXQgfSBmcm9tICdmcy9wcm9taXNlcyc7XG5cbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50RXh0cmFjdG9yIGV4dGVuZHMgQmFzZUV4dHJhY3RvciB7XG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5hdHRhY2htZW50ZXh0cmFjdG9yJyBhcyBjb25zdDtcblxuICAgIHB1YmxpYyBhc3luYyB2YWxpZGF0ZShxdWVyeTogc3RyaW5nLCB0eXBlPzogU2VhcmNoUXVlcnlUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gKFtRdWVyeVR5cGUuQVJCSVRSQVJZLCBRdWVyeVR5cGUuRklMRV0gYXMgU2VhcmNoUXVlcnlUeXBlW10pLnNvbWUoKHIpID0+IHIgPT09IHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgICAgICB2b2lkIHRyYWNrO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBoYW5kbGUocXVlcnk6IHN0cmluZywgY29udGV4dDogRXh0cmFjdG9yU2VhcmNoQ29udGV4dCk6IFByb21pc2U8RXh0cmFjdG9ySW5mbz4ge1xuICAgICAgICBzd2l0Y2ggKGNvbnRleHQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuQVJCSVRSQVJZOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IChhd2FpdCBkb3dubG9hZFN0cmVhbShxdWVyeSwgY29udGV4dC5yZXF1ZXN0T3B0aW9ucykpIGFzIEluY29taW5nTWVzc2FnZTtcbiAgICAgICAgICAgICAgICBpZiAoIVsnYXVkaW8vJywgJ3ZpZGVvLyddLnNvbWUoKHIpID0+ICEhZGF0YS5oZWFkZXJzWydjb250ZW50LXR5cGUnXT8uc3RhcnRzV2l0aChyKSkpIHJldHVybiB0aGlzLmVtcHR5UmVzcG9uc2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja0luZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnLycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoeCkgPT4geC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBvcCgpID8/ICdBdHRhY2htZW50J1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJz8nKVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyaW0oKSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogJ2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvMi8yYS9JVHVuZXNfMTIuMl9sb2dvLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZTogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6ICgoZGF0YSBhcyBhbnkpLmNsaWVudD8uc2VydmVybmFtZSBhcyBzdHJpbmcpIHx8ICdBdHRhY2htZW50JyxcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAoKGRhdGEgYXMgYW55KS5jbGllbnQ/LnNlcnZlcm5hbWUgYXMgc3RyaW5nKSB8fCAnQXR0YWNobWVudCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogZGF0YS51cmwgfHwgcXVlcnlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2tJbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHRyYWNrSW5mby5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhY2tJbmZvLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby5hdXRob3IsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcmJpdHJhcnknLFxuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHRyYWNrLnJhdy5pc0ZpbGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFt0cmFja10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLkZJTEU6IHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0c1N5bmMocXVlcnkpKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZnN0YXQgPSBhd2FpdCBzdGF0KHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWZzdGF0LmlzRmlsZSgpKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWltZSA9IGF3YWl0IGZpbGVUeXBlLmZyb21GaWxlKHF1ZXJ5KS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgICAgICAgICBpZiAoIW1pbWUgfHwgIVsnYXVkaW8vJywgJ3ZpZGVvLyddLnNvbWUoKHIpID0+ICEhbWltZS5taW1lLnN0YXJ0c1dpdGgocikpKSByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2tJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogcGF0aC5iYXNlbmFtZShxdWVyeSkgfHwgJ0F0dGFjaG1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiAnaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy8yLzJhL0lUdW5lc18xMi4yX2xvZ28ucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lOiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiAnQXR0YWNobWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQXR0YWNobWVudCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogcXVlcnlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2tJbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHRyYWNrSW5mby5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhY2tJbmZvLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHRyYWNrSW5mby50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHRyYWNrSW5mby5hdXRob3IsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcmJpdHJhcnknLFxuICAgICAgICAgICAgICAgICAgICBlbmdpbmU6IHRyYWNrSW5mby51cmwsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogdHJhY2tJbmZvLFxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZXF1ZXN0TWV0YWRhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2tJbmZvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICAgIHRyYWNrLnJhdy5pc0ZpbGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW3RyYWNrXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbXB0eVJlc3BvbnNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZW1wdHlSZXNwb25zZSgpOiBFeHRyYWN0b3JJbmZvIHtcbiAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKSB7XG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IGluZm8ucmF3LmVuZ2luZSBhcyBzdHJpbmc7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgY29uc3QgaXNGaWxlID0gaW5mby5yYXcuaXNGaWxlIGFzIGJvb2xlYW47XG5cbiAgICAgICAgaWYgKCFlbmdpbmUpIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgc3RyZWFtIHNvdXJjZScpO1xuXG4gICAgICAgIGlmICghaXNGaWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5naW5lO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGF3YWl0IGRvd25sb2FkU3RyZWFtKGVuZ2luZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlUmVhZFN0cmVhbShlbmdpbmUpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgaHR0cCwgeyBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkU3RyZWFtKHVybDogc3RyaW5nLCBvcHRzOiBSZXF1ZXN0T3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFJlYWRhYmxlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGxpYiA9IHVybC5zdGFydHNXaXRoKCdodHRwOi8vJykgPyBodHRwIDogaHR0cHM7XG5cbiAgICAgICAgbGliLmdldCh1cmwsIG9wdHMsIChyZXMpID0+IHJlc29sdmUocmVzKSkub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xufVxuIiwgImltcG9ydCB7IEJhc2VFeHRyYWN0b3IsIEV4dHJhY3RvckluZm8sIEV4dHJhY3RvclNlYXJjaENvbnRleHQsIFBsYXlsaXN0LCBRdWVyeVR5cGUsIFNlYXJjaFF1ZXJ5VHlwZSwgVHJhY2ssIFV0aWwgfSBmcm9tICdkaXNjb3JkLXBsYXllcic7XG5pbXBvcnQgeyBBcHBsZU11c2ljIH0gZnJvbSAnLi4vaW50ZXJuYWwnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgWW91dHViZUV4dHJhY3RvciB9IGZyb20gJy4vWW91dHViZUV4dHJhY3Rvcic7XG5pbXBvcnQgeyBTdHJlYW1GTiwgbG9hZFl0ZGwsIHB1bGxZVE1ldGFkYXRhIH0gZnJvbSAnLi9jb21tb24vaGVscGVyJztcbmltcG9ydCB7IEJyaWRnZVByb3ZpZGVyIH0gZnJvbSAnLi9jb21tb24vQnJpZGdlUHJvdmlkZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxlTXVzaWNFeHRyYWN0b3JJbml0IHtcbiAgICBjcmVhdGVTdHJlYW0/OiAoZXh0OiBBcHBsZU11c2ljRXh0cmFjdG9yLCB1cmw6IHN0cmluZykgPT4gUHJvbWlzZTxSZWFkYWJsZSB8IHN0cmluZz47XG4gICAgYnJpZGdlUHJvdmlkZXI/OiBCcmlkZ2VQcm92aWRlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEFwcGxlTXVzaWNFeHRyYWN0b3IgZXh0ZW5kcyBCYXNlRXh0cmFjdG9yPEFwcGxlTXVzaWNFeHRyYWN0b3JJbml0PiB7XG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5hcHBsZW11c2ljZXh0cmFjdG9yJyBhcyBjb25zdDtcbiAgICBwcml2YXRlIF9zdHJlYW0hOiBTdHJlYW1GTjtcbiAgICBwcml2YXRlIF9pc1l0ZGwgPSBmYWxzZTtcblxuICAgIHB1YmxpYyBhc3luYyBhY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gc2tpcCBpZiB3ZSBoYXZlIGEgYnJpZGdlIHByb3ZpZGVyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIpIHJldHVybjtcblxuICAgICAgICBjb25zdCBmbiA9IHRoaXMub3B0aW9ucy5jcmVhdGVTdHJlYW07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5faXNZdGRsID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0gPSAocTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKHRoaXMsIHEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGliID0gYXdhaXQgbG9hZFl0ZGwodGhpcy5jb250ZXh0LnBsYXllci5vcHRpb25zLnl0ZGxPcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3RyZWFtID0gbGliLnN0cmVhbTtcbiAgICAgICAgdGhpcy5faXNZdGRsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHJldHVybiAoPFNlYXJjaFF1ZXJ5VHlwZVtdPltcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19BTEJVTSxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19QTEFZTElTVCxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19TT05HLFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFQUExFX01VU0lDX1NFQVJDSCxcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5BVVRPLFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFVVE9fU0VBUkNIXG4gICAgICAgIF0pLnNvbWUoKHQpID0+IHQgPT09IHR5cGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRSZWxhdGVkVHJhY2tzKHRyYWNrOiBUcmFjaykge1xuICAgICAgICBpZiAodHJhY2sucXVlcnlUeXBlID09PSBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU09ORylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZSh0cmFjay5hdXRob3IgfHwgdHJhY2sudGl0bGUsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU0VBUkNILFxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiB0cmFjay5yZXF1ZXN0ZWRCeVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLkFVVE86XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BVVRPX1NFQVJDSDpcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLkFQUExFX01VU0lDX1NFQVJDSDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBBcHBsZU11c2ljLnNlYXJjaChxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmxlbmd0aCkgcmV0dXJuIHRoaXMuY3JlYXRlUmVzcG9uc2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja3MgPSBkYXRhLm1hcChcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgKG06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IG0uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHR5cGVvZiBtLmR1cmF0aW9uID09PSAnbnVtYmVyJyA/IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpIDogbS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IG0udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ2FwcGxlTXVzaWNTb25nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCB0cmFjaykpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCB0cmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKG51bGwsIHRyYWNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19BTEJVTToge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBBcHBsZU11c2ljLmdldEFsYnVtSW5mbyhxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmZvKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGluZm8uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBpZDogaW5mby5pZCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGluZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FsYnVtJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBpbmZvLnVybCxcbiAgICAgICAgICAgICAgICAgICAgcmF3UGxheWxpc3Q6IGluZm9cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IGluZm8udHJhY2tzLm1hcChcbiAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgbTogYW55IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFjazogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogbS5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdHlwZW9mIG0uZHVyYXRpb24gPT09ICdudW1iZXInID8gVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhtLmR1cmF0aW9uKSkgOiBtLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogbS50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcHBsZV9tdXNpYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiAnYXBwbGVNdXNpY1NvbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIHRyYWNrKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIHRyYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2sucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2s7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3QsIHRyYWNrczogcGxheWxpc3QudHJhY2tzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BUFBMRV9NVVNJQ19QTEFZTElTVDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBBcHBsZU11c2ljLmdldFBsYXlsaXN0SW5mbyhxdWVyeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpbmZvKSByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWxpc3QgPSBuZXcgUGxheWxpc3QodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGluZm8uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBpZDogaW5mby5pZCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXBwbGVfbXVzaWMnLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGluZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BsYXlsaXN0JyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBpbmZvLnVybCxcbiAgICAgICAgICAgICAgICAgICAgcmF3UGxheWxpc3Q6IGluZm9cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IGluZm8udHJhY2tzLm1hcChcbiAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgbTogYW55IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFjazogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogbS5hcnRpc3QubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdHlwZW9mIG0uZHVyYXRpb24gPT09ICdudW1iZXInID8gVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhtLmR1cmF0aW9uKSkgOiBtLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogbS50aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhcHBsZV9tdXNpYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiAnYXBwbGVNdXNpY1NvbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIHRyYWNrKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIHRyYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuQVBQTEVfTVVTSUNfU09ORzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBBcHBsZU11c2ljLmdldFNvbmdJbmZvKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8pIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmFjazogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICBhdXRob3I6IGluZm8uYXJ0aXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbmZvLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdHlwZW9mIGluZm8uZHVyYXRpb24gPT09ICdudW1iZXInID8gVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhpbmZvLmR1cmF0aW9uKSkgOiBpbmZvLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGluZm8udGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW5mby50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBpbmZvLnVybCxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2FwcGxlX211c2ljJyxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogY29udGV4dC50eXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBpbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGluZm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIgPyAoYXdhaXQgdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyLnJlc29sdmUodGhpcywgdHJhY2spKS5kYXRhIDogYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgdHJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0cmFjay5leHRyYWN0b3IgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW3RyYWNrXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0cmVhbShpbmZvOiBUcmFjayk6IFByb21pc2U8c3RyaW5nIHwgUmVhZGFibGU+IHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlcikge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXI7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwcm92aWRlci5yZXNvbHZlKHRoaXMsIGluZm8pO1xuICAgICAgICAgICAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBicmlkZ2UgdGhpcyB0cmFjaycpO1xuXG4gICAgICAgICAgICBpbmZvLnNldE1ldGFkYXRhKHtcbiAgICAgICAgICAgICAgICAuLi4oaW5mby5tZXRhZGF0YSB8fCB7fSksXG4gICAgICAgICAgICAgICAgYnJpZGdlOiBkYXRhLmRhdGFcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcHJvdmlkZXIuc3RyZWFtKGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9zdHJlYW0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGluaXRpYWxpemUgc3RyZWFtaW5nIGFwaSBmb3IgJyR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSdgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cmwgPSBpbmZvLnVybDtcblxuICAgICAgICBpZiAodGhpcy5faXNZdGRsKSB7XG4gICAgICAgICAgICBpZiAoWW91dHViZUV4dHJhY3Rvci52YWxpZGF0ZVVSTChpbmZvLnJhdy51cmwpKSB1cmwgPSBpbmZvLnJhdy51cmw7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgaW5mbyk7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGEpXG4gICAgICAgICAgICAgICAgICAgIGluZm8uc2V0TWV0YWRhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGluZm8ubWV0YWRhdGEgfHwge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBtZXRhXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IF91cmwgPSBtZXRhPy51cmw7XG4gICAgICAgICAgICAgICAgaWYgKCFfdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCByZXNvdXJjZXMgZm9yIHl0ZGwgc3RyZWFtaW5nJyk7XG4gICAgICAgICAgICAgICAgaW5mby5yYXcudXJsID0gdXJsID0gX3VybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW0odXJsKTtcbiAgICB9XG59XG4iLCAiZXhwb3J0ICogZnJvbSAnLi9BcHBsZU11c2ljJztcbmV4cG9ydCAqIGZyb20gJy4vVmltZW8nO1xuZXhwb3J0ICogZnJvbSAnLi9kb3dubG9hZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vU3BvdGlmeSc7XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgUXVlcnlSZXNvbHZlciB9IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB7IHBhcnNlLCBIVE1MRWxlbWVudCB9IGZyb20gJ25vZGUtaHRtbC1wYXJzZXInO1xuaW1wb3J0IHsgVUEsIGdldEZldGNoIH0gZnJvbSAnLi4vZXh0cmFjdG9ycy9jb21tb24vaGVscGVyJztcblxuZnVuY3Rpb24gZ2V0SFRNTChsaW5rOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxFbGVtZW50IHwgbnVsbD4ge1xuICAgIHJldHVybiBnZXRGZXRjaChsaW5rLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdVc2VyLUFnZW50JzogVUFcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC50aGVuKChyKSA9PiByLnRleHQoKSlcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAodHh0KSA9PiBwYXJzZSh0eHQpLFxuICAgICAgICAgICAgKCkgPT4gbnVsbFxuICAgICAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlSW1hZ2UoeyBoZWlnaHQsIHVybCwgd2lkdGgsIGV4dCA9ICdqcGcnIH06IHsgdXJsOiBzdHJpbmc7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyBleHQ/OiBzdHJpbmcgfSkge1xuICAgIHJldHVybiB1cmwucmVwbGFjZSgne3d9JywgYCR7d2lkdGh9YCkucmVwbGFjZSgne2h9JywgYCR7aGVpZ2h0fWApLnJlcGxhY2UoJ3tmfScsIGV4dCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRHVyYXRpb24oZDogc3RyaW5nKSB7XG4gICAgY29uc3QgciA9IChuYW1lOiBzdHJpbmcsIHVuaXQ6IHN0cmluZykgPT4gYCgoPzwke25hbWV9Pi0/XFxcXGQqW1xcXFwuLF0/XFxcXGQrKSR7dW5pdH0pP2A7XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICBbXG4gICAgICAgICAgICAnKD88bmVnYXRpdmU+LSk/UCcsXG4gICAgICAgICAgICByKCd5ZWFycycsICdZJyksXG4gICAgICAgICAgICByKCdtb250aHMnLCAnTScpLFxuICAgICAgICAgICAgcignd2Vla3MnLCAnVycpLFxuICAgICAgICAgICAgcignZGF5cycsICdEJyksXG4gICAgICAgICAgICAnKFQnLFxuICAgICAgICAgICAgcignaG91cnMnLCAnSCcpLFxuICAgICAgICAgICAgcignbWludXRlcycsICdNJyksXG4gICAgICAgICAgICByKCdzZWNvbmRzJywgJ1MnKSxcbiAgICAgICAgICAgICcpPycgLy8gZW5kIG9wdGlvbmFsIHRpbWVcbiAgICAgICAgXS5qb2luKCcnKVxuICAgICk7XG4gICAgY29uc3QgdGVzdCA9IHJlZ2V4LmV4ZWMoZCk7XG4gICAgaWYgKCF0ZXN0IHx8ICF0ZXN0Lmdyb3VwcykgcmV0dXJuICcwOjAwJztcblxuICAgIGNvbnN0IGR1ciA9IFt0ZXN0Lmdyb3Vwcy55ZWFycywgdGVzdC5ncm91cHMubW9udGhzLCB0ZXN0Lmdyb3Vwcy53ZWVrcywgdGVzdC5ncm91cHMuZGF5cywgdGVzdC5ncm91cHMuaG91cnMsIHRlc3QuZ3JvdXBzLm1pbnV0ZXMsIHRlc3QuZ3JvdXBzLnNlY29uZHNdO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgZHVyXG4gICAgICAgICAgICAuZmlsdGVyKChyLCBpLCBhKSA9PiAhIXIgfHwgaSA+IGEubGVuZ3RoIC0gMilcbiAgICAgICAgICAgIC5tYXAoKG0sIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIW0pIG0gPSAnMCc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPCAxID8gbSA6IG0ucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignOicpIHx8ICcwOjAwJ1xuICAgICk7XG59XG5cbmV4cG9ydCBjbGFzcyBBcHBsZU11c2ljIHtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBBcHBsZU11c2ljO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2VhcmNoKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL211c2ljLmFwcGxlLmNvbS91cy9zZWFyY2g/dGVybT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeSl9YDtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBhd2FpdCBnZXRIVE1MKHVybCk7XG4gICAgICAgICAgICBpZiAoIW5vZGUpIHJldHVybiBbXTtcblxuICAgICAgICAgICAgY29uc3QgcmF3RGF0YSA9IG5vZGUuZ2V0RWxlbWVudEJ5SWQoJ3NlcmlhbGl6ZWQtc2VydmVyLWRhdGEnKTtcbiAgICAgICAgICAgIGlmICghcmF3RGF0YSkgcmV0dXJuIFtdO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyYXdEYXRhLmlubmVyVGV4dClbMF0uZGF0YS5zZWN0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IHRyYWNrcyA9IGRhdGEuZmluZCgoczogYW55KSA9PiBzLml0ZW1LaW5kID09PSAndHJhY2tMb2NrdXAnKT8uaXRlbXM7XG4gICAgICAgICAgICBpZiAoIXRyYWNrcykgcmV0dXJuIFtdO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJhY2tzLm1hcCgodHJhY2s6IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICBpZDogdHJhY2suY29udGVudERlc2NyaXB0b3IuaWRlbnRpZmllcnMuc3RvcmVBZGFtSUQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHRyYWNrLmR1cmF0aW9uIHx8ICcwOjAwJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogdHJhY2sudGl0bGUsXG4gICAgICAgICAgICAgICAgdXJsOiB0cmFjay5jb250ZW50RGVzY3JpcHRvci51cmwsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOiB0cmFjaz8uYXJ0d29yaz8uZGljdGlvbmFyeVxuICAgICAgICAgICAgICAgICAgICA/IG1ha2VJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdHJhY2suYXJ0d29yay5kaWN0aW9uYXJ5LnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0cmFjay5hcnR3b3JrLmRpY3Rpb25hcnkuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdHJhY2suYXJ0d29yay5kaWN0aW9uYXJ5LndpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgOiAnaHR0cHM6Ly9tdXNpYy5hcHBsZS5jb20vYXNzZXRzL2Zhdmljb24vZmF2aWNvbi0xODAucG5nJyxcbiAgICAgICAgICAgICAgICBhcnRpc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdHJhY2suc3VidGl0bGVMaW5rcz8uWzBdPy50aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0U29uZ0luZm9GYWxsYmFjayhyZXM6IEhUTUxFbGVtZW50LCBuYW1lOiBzdHJpbmcsIGlkOiBzdHJpbmcsIGxpbms6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWV0YVRhZ3MgPSByZXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKTtcbiAgICAgICAgICAgIGlmICghbWV0YVRhZ3MubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBtZXRhVGFncy5maW5kKChyKSA9PiByLmdldEF0dHJpYnV0ZSgnbmFtZScpID09PSAnYXBwbGU6dGl0bGUnKT8uZ2V0QXR0cmlidXRlKCdjb250ZW50JykgfHwgcmVzLnF1ZXJ5U2VsZWN0b3IoJ3RpdGxlJyk/LmlubmVyVGV4dCB8fCBuYW1lO1xuICAgICAgICAgICAgY29uc3QgY29udGVudElkID0gbWV0YVRhZ3MuZmluZCgocikgPT4gci5nZXRBdHRyaWJ1dGUoJ25hbWUnKSA9PT0gJ2FwcGxlOmNvbnRlbnRfaWQnKT8uZ2V0QXR0cmlidXRlKCdjb250ZW50JykgfHwgaWQ7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvblJhdyA9IG1ldGFUYWdzLmZpbmQoKHIpID0+IHIuZ2V0QXR0cmlidXRlKCdwcm9wZXJ0eScpID09PSAnbXVzaWM6c29uZzpkdXJhdGlvbicpPy5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTtcblxuICAgICAgICAgICAgY29uc3Qgc29uZyA9IHtcbiAgICAgICAgICAgICAgICBpZDogY29udGVudElkLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvblJhd1xuICAgICAgICAgICAgICAgICAgICA/IHBhcnNlRHVyYXRpb24oZHVyYXRpb25SYXcpXG4gICAgICAgICAgICAgICAgICAgIDogbWV0YVRhZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0uZ2V0QXR0cmlidXRlKCduYW1lJykgPT09ICdhcHBsZTpkZXNjcmlwdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8udGV4dENvbnRlbnQuc3BsaXQoJ0R1cmF0aW9uOiAnKT8uWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnXCInKT8uWzBdIHx8ICcwOjAwJyxcbiAgICAgICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgICAgICB1cmw6IGxpbmssXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOlxuICAgICAgICAgICAgICAgICAgICBtZXRhVGFncy5maW5kKChyKSA9PiBbJ29nOmltYWdlOnNlY3VyZV91cmwnLCAnb2c6aW1hZ2UnXS5pbmNsdWRlcyhyLmdldEF0dHJpYnV0ZSgncHJvcGVydHknKSEpKT8uZ2V0QXR0cmlidXRlKCdjb250ZW50JykgfHxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZycsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlcy5xdWVyeVNlbGVjdG9yKCcuc29uZy1zdWJ0aXRsZXNfX2FydGlzdHM+YScpPy50ZXh0Q29udGVudD8udHJpbSgpIHx8ICdBcHBsZSBNdXNpYydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gc29uZztcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0U29uZ0luZm8obGluazogc3RyaW5nKSB7XG4gICAgICAgIGlmICghUXVlcnlSZXNvbHZlci5yZWdleC5hcHBsZU11c2ljU29uZ1JlZ2V4LnRlc3QobGluaykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChsaW5rKTtcbiAgICAgICAgY29uc3QgaWQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnaScpO1xuICAgICAgICBjb25zdCBuYW1lID0gdXJsLnBhdGhuYW1lLnNwbGl0KCdhbGJ1bS8nKVsxXT8uc3BsaXQoJy8nKVswXTtcblxuICAgICAgICBpZiAoIWlkIHx8ICFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIVE1MKGBodHRwczovL211c2ljLmFwcGxlLmNvbS91cy9zb25nLyR7bmFtZX0vJHtpZH1gKTtcbiAgICAgICAgaWYgKCFyZXMpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhc3JjID1cbiAgICAgICAgICAgICAgICByZXMuZ2V0RWxlbWVudEJ5SWQoJ3NlcmlhbGl6ZWQtc2VydmVyLWRhdGEnKT8uaW5uZXJUZXh0IHx8IHJlcy5pbm5lclRleHQuc3BsaXQoJzxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2pzb25cIiBpZD1cInNlcmlhbGl6ZWQtc2VydmVyLWRhdGFcIj4nKT8uWzFdPy5zcGxpdCgnPC9zY3JpcHQ+Jyk/LlswXTtcbiAgICAgICAgICAgIGlmICghZGF0YXNyYykgdGhyb3cgJ25vdCBmb3VuZCc7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShkYXRhc3JjKVswXS5kYXRhLnNlb0RhdGE7XG4gICAgICAgICAgICBjb25zdCBzb25nID0gZGF0YS5vZ1NvbmdzWzBdPy5hdHRyaWJ1dGVzO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBkYXRhLm9nU29uZ3NbMF0/LmlkIHx8IGRhdGEuYXBwbGVDb250ZW50SWQgfHwgaWQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHNvbmc/LmR1cmF0aW9uSW5NaWxsaXMgfHwgJzA6MDAnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBzb25nPy5uYW1lIHx8IGRhdGEuYXBwbGVUaXRsZSxcbiAgICAgICAgICAgICAgICB1cmw6IHNvbmc/LnVybCB8fCBkYXRhLnVybCB8fCBsaW5rLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc29uZz8uYXJ0d29ya1xuICAgICAgICAgICAgICAgICAgICA/IG1ha2VJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc29uZy5hcnR3b3JrLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzb25nLmFydHdvcmsuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogc29uZy5hcnR3b3JrLndpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgOiBkYXRhLmFydHdvcmtVcmxcbiAgICAgICAgICAgICAgICAgICAgPyBtYWtlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGRhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogZGF0YS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkYXRhLmFydHdvcmtVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4dDogZGF0YS5maWxlVHlwZSB8fCAnanBnJ1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIDogJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZycsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHNvbmc/LmFydGlzdE5hbWUgfHwgZGF0YS5zb2NpYWxUaXRsZSB8fCAnQXBwbGUgTXVzaWMnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTb25nSW5mb0ZhbGxiYWNrKHJlcywgbmFtZSwgaWQsIGxpbmspO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBnZXRQbGF5bGlzdEluZm8obGluazogc3RyaW5nKSB7XG4gICAgICAgIGlmICghUXVlcnlSZXNvbHZlci5yZWdleC5hcHBsZU11c2ljUGxheWxpc3RSZWdleC50ZXN0KGxpbmspKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEhUTUwobGluayk7XG4gICAgICAgIGlmICghcmVzKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGF0YXNyYyA9XG4gICAgICAgICAgICAgICAgcmVzLmdldEVsZW1lbnRCeUlkKCdzZXJpYWxpemVkLXNlcnZlci1kYXRhJyk/LmlubmVyVGV4dCB8fCByZXMuaW5uZXJUZXh0LnNwbGl0KCc8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9qc29uXCIgaWQ9XCJzZXJpYWxpemVkLXNlcnZlci1kYXRhXCI+Jyk/LlsxXT8uc3BsaXQoJzwvc2NyaXB0PicpPy5bMF07XG4gICAgICAgICAgICBpZiAoIWRhdGFzcmMpIHRocm93ICdub3QgZm91bmQnO1xuICAgICAgICAgICAgY29uc3QgcGwgPSBKU09OLnBhcnNlKGRhdGFzcmMpWzBdLmRhdGEuc2VvRGF0YTtcbiAgICAgICAgICAgIGNvbnN0IHRodW1ibmFpbCA9IHBsLmFydHdvcmtVcmxcbiAgICAgICAgICAgICAgICA/IG1ha2VJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBwbC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHBsLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgIHVybDogcGwuYXJ0d29ya1VybCxcbiAgICAgICAgICAgICAgICAgICAgICBleHQ6IHBsLmZpbGVUeXBlIHx8ICdqcGcnXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogJ2h0dHBzOi8vbXVzaWMuYXBwbGUuY29tL2Fzc2V0cy9mYXZpY29uL2Zhdmljb24tMTgwLnBuZyc7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBwbC5hcHBsZUNvbnRlbnRJZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogcGwuYXBwbGVUaXRsZSxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHBsLm9nU29uZ3M/LlswXT8uYXR0cmlidXRlcz8uYXJ0aXN0TmFtZSB8fCAnQXBwbGUgTXVzaWMnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cmw6IHBsLnVybCxcbiAgICAgICAgICAgICAgICB0cmFja3M6XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICBwbC5vZ1NvbmdzPy5tYXAoKG06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29uZyA9IG0uYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG0uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHNvbmcuZHVyYXRpb25Jbk1pbGxpcyB8fCAnMDowMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNvbmcubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvbmcudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc29uZy5hcnR3b3JrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbWFrZUltYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb25nLmFydHdvcmsudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHNvbmcuYXJ0d29yay5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzb25nLmFydHdvcmsud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnRpc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc29uZy5hcnRpc3ROYW1lIHx8ICdBcHBsZSBNdXNpYydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KSB8fCBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0QWxidW1JbmZvKGxpbms6IHN0cmluZykge1xuICAgICAgICBpZiAoIVF1ZXJ5UmVzb2x2ZXIucmVnZXguYXBwbGVNdXNpY0FsYnVtUmVnZXgudGVzdChsaW5rKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIVE1MKGxpbmspO1xuICAgICAgICBpZiAoIXJlcykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFzcmMgPVxuICAgICAgICAgICAgICAgIHJlcy5nZXRFbGVtZW50QnlJZCgnc2VyaWFsaXplZC1zZXJ2ZXItZGF0YScpPy5pbm5lclRleHQgfHwgcmVzLmlubmVyVGV4dC5zcGxpdCgnPHNjcmlwdCB0eXBlPVwiYXBwbGljYXRpb24vanNvblwiIGlkPVwic2VyaWFsaXplZC1zZXJ2ZXItZGF0YVwiPicpPy5bMV0/LnNwbGl0KCc8L3NjcmlwdD4nKT8uWzBdO1xuICAgICAgICAgICAgaWYgKCFkYXRhc3JjKSB0aHJvdyAnbm90IGZvdW5kJztcbiAgICAgICAgICAgIGNvbnN0IHBsID0gSlNPTi5wYXJzZShkYXRhc3JjKVswXS5kYXRhLnNlb0RhdGE7XG4gICAgICAgICAgICBjb25zdCB0aHVtYm5haWwgPSBwbC5hcnR3b3JrVXJsXG4gICAgICAgICAgICAgICAgPyBtYWtlSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGwuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwbC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBsLmFydHdvcmtVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgZXh0OiBwbC5maWxlVHlwZSB8fCAnanBnJ1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6ICdodHRwczovL211c2ljLmFwcGxlLmNvbS9hc3NldHMvZmF2aWNvbi9mYXZpY29uLTE4MC5wbmcnO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogcGwuYXBwbGVDb250ZW50SWQsXG4gICAgICAgICAgICAgICAgdGl0bGU6IHBsLmFwcGxlVGl0bGUsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgIGFydGlzdDoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwbC5vZ1NvbmdzPy5bMF0/LmF0dHJpYnV0ZXM/LmFydGlzdE5hbWUgfHwgJ0FwcGxlIE11c2ljJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXJsOiBwbC51cmwsXG4gICAgICAgICAgICAgICAgdHJhY2tzOlxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAgICAgcGwub2dTb25ncz8ubWFwKChtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvbmcgPSBtLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBzb25nLmR1cmF0aW9uSW5NaWxsaXMgfHwgJzA6MDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzb25nLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzb25nLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNvbmcuYXJ0d29ya1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG1ha2VJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc29uZy5hcnR3b3JrLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzb25nLmFydHdvcmsuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogc29uZy5hcnR3b3JrLndpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aHVtYm5haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJ0aXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNvbmcuYXJ0aXN0TmFtZSB8fCAnQXBwbGUgTXVzaWMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSkgfHwgW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgVUEsIGdldEZldGNoIH0gZnJvbSAnLi4vZXh0cmFjdG9ycyc7XG5cbmNvbnN0IFNQX0FOT05fVE9LRU5fVVJMID0gJ2h0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9nZXRfYWNjZXNzX3Rva2VuP3JlYXNvbj10cmFuc3BvcnQmcHJvZHVjdFR5cGU9ZW1iZWQnO1xuY29uc3QgU1BfQUNDRVNTX1RPS0VOX1VSTCA9ICdodHRwczovL2FjY291bnRzLnNwb3RpZnkuY29tL2FwaS90b2tlbj9ncmFudF90eXBlPWNsaWVudF9jcmVkZW50aWFscyc7XG5jb25zdCBTUF9CQVNFID0gJ2h0dHBzOi8vYXBpLnNwb3RpZnkuY29tL3YxJztcblxuaW50ZXJmYWNlIFNQX0FDQ0VTU19UT0tFTiB7XG4gICAgdG9rZW46IHN0cmluZztcbiAgICBleHBpcmVzQWZ0ZXI6IG51bWJlcjtcbiAgICB0eXBlOiAnQmVhcmVyJztcbn1cblxuZXhwb3J0IGNsYXNzIFNwb3RpZnlBUEkge1xuICAgIHB1YmxpYyBhY2Nlc3NUb2tlbjogU1BfQUNDRVNTX1RPS0VOIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBjcmVkZW50aWFsczogeyBjbGllbnRJZDogc3RyaW5nIHwgbnVsbDsgY2xpZW50U2VjcmV0OiBzdHJpbmcgfCBudWxsIH0gPSB7XG4gICAgICAgICAgICBjbGllbnRJZDogbnVsbCxcbiAgICAgICAgICAgIGNsaWVudFNlY3JldDogbnVsbFxuICAgICAgICB9XG4gICAgKSB7fVxuXG4gICAgcHVibGljIGdldCBhdXRob3JpemF0aW9uS2V5KCkge1xuICAgICAgICBpZiAoIXRoaXMuY3JlZGVudGlhbHMuY2xpZW50SWQgfHwgIXRoaXMuY3JlZGVudGlhbHMuY2xpZW50U2VjcmV0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGAke3RoaXMuY3JlZGVudGlhbHMuY2xpZW50SWR9OiR7dGhpcy5jcmVkZW50aWFscy5jbGllbnRTZWNyZXR9YCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0VG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuYXV0aG9yaXphdGlvbktleTtcblxuICAgICAgICBpZiAoIWtleSkgcmV0dXJuIGF3YWl0IHRoaXMucmVxdWVzdEFub255bW91c1Rva2VuKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEZldGNoKFNQX0FDQ0VTU19UT0tFTl9VUkwsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogVUEsXG4gICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCYXNpYyAke2tleX1gLFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkuYWNjZXNzX3Rva2VuKSB0aHJvdyAnbm8gdG9rZW4nO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgIHRva2VuOiBib2R5LmFjY2Vzc190b2tlbiBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgZXhwaXJlc0FmdGVyOiBib2R5LmV4cGlyZXNfaW4gYXMgbnVtYmVyLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdCZWFyZXInIGFzIGNvbnN0XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuYWNjZXNzVG9rZW4gPSBkYXRhKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXF1ZXN0QW5vbnltb3VzVG9rZW4oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyByZXF1ZXN0QW5vbnltb3VzVG9rZW4oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGZXRjaChTUF9BTk9OX1RPS0VOX1VSTCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlcy5vaykgdGhyb3cgJ25vdF9vayc7XG5cbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkuYWNjZXNzVG9rZW4pIHRocm93ICdub19hY2Nlc3NfdG9rZW4nO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgIHRva2VuOiBib2R5LmFjY2Vzc1Rva2VuIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICBleHBpcmVzQWZ0ZXI6IGJvZHkuYWNjZXNzVG9rZW5FeHBpcmF0aW9uVGltZXN0YW1wTXMgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdCZWFyZXInIGFzIGNvbnN0XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuYWNjZXNzVG9rZW4gPSBkYXRhKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc1Rva2VuRXhwaXJlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgPiB0aGlzLmFjY2Vzc1Rva2VuLmV4cGlyZXNBZnRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2VhcmNoKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHJlcVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUb2tlbkV4cGlyZWQoKSkgYXdhaXQgdGhpcy5yZXF1ZXN0VG9rZW4oKTtcbiAgICAgICAgICAgIC8vIGZhaWxlZFxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjY2Vzc1Rva2VuKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0RmV0Y2goYCR7U1BfQkFTRX0vc2VhcmNoLz9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KX0mdHlwZT10cmFjayZtYXJrZXQ9VVNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHt0aGlzLmFjY2Vzc1Rva2VuLnR5cGV9ICR7dGhpcy5hY2Nlc3NUb2tlbi50b2tlbn1gLFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgZGF0YTogeyB0cmFja3M6IHsgaXRlbXM6IFNwb3RpZnlUcmFja1tdIH0gfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhLnRyYWNrcy5pdGVtcy5tYXAoKG0pID0+ICh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG0ubmFtZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogbS5kdXJhdGlvbl9tcyxcbiAgICAgICAgICAgICAgICBhcnRpc3Q6IG0uYXJ0aXN0cy5tYXAoKG0pID0+IG0ubmFtZSkuam9pbignLCAnKSxcbiAgICAgICAgICAgICAgICB1cmw6IG0uZXh0ZXJuYWxfdXJscz8uc3BvdGlmeSB8fCBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3RyYWNrLyR7bS5pZH1gLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogbS5hbGJ1bS5pbWFnZXM/LlswXT8udXJsIHx8IG51bGxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRQbGF5bGlzdChpZDogc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyByZXFcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVG9rZW5FeHBpcmVkKCkpIGF3YWl0IHRoaXMucmVxdWVzdFRva2VuKCk7XG4gICAgICAgICAgICAvLyBmYWlsZWRcbiAgICAgICAgICAgIGlmICghdGhpcy5hY2Nlc3NUb2tlbikgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEZldGNoKGAke1NQX0JBU0V9L3BsYXlsaXN0cy8ke2lkfT9tYXJrZXQ9VVNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHt0aGlzLmFjY2Vzc1Rva2VuLnR5cGV9ICR7dGhpcy5hY2Nlc3NUb2tlbi50b2tlbn1gLFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIXJlcy5vaykgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbF91cmxzOiB7IHNwb3RpZnk6IHN0cmluZyB9O1xuICAgICAgICAgICAgICAgIG93bmVyOiB7IGRpc3BsYXlfbmFtZTogc3RyaW5nIH07XG4gICAgICAgICAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgaW1hZ2VzOiB7IHVybDogc3RyaW5nIH1bXTtcbiAgICAgICAgICAgICAgICB0cmFja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHsgdHJhY2s6IFNwb3RpZnlUcmFjayB9W107XG4gICAgICAgICAgICAgICAgICAgIG5leHQ/OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgICAgICAgICBpZiAoIWRhdGEudHJhY2tzLml0ZW1zLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgIGNvbnN0IHQ6IHsgdHJhY2s6IFNwb3RpZnlUcmFjayB9W10gPSBkYXRhLnRyYWNrcy5pdGVtcztcblxuICAgICAgICAgICAgbGV0IG5leHQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGRhdGEudHJhY2tzLm5leHQ7XG5cbiAgICAgICAgICAgIHdoaWxlICh0eXBlb2YgbmV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGZXRjaChuZXh0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHt0aGlzLmFjY2Vzc1Rva2VuLnR5cGV9ICR7dGhpcy5hY2Nlc3NUb2tlbi50b2tlbn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzLm9rKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFBhZ2U6IHsgaXRlbXM6IHsgdHJhY2s6IFNwb3RpZnlUcmFjayB9W107IG5leHQ/OiBzdHJpbmcgfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdC5wdXNoKC4uLm5leHRQYWdlLml0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHRQYWdlLm5leHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0KSBicmVhaztcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0cmFja3MgPSB0Lm1hcCgoeyB0cmFjazogbSB9KSA9PiAoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBtLm5hbWUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IG0uZHVyYXRpb25fbXMsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiBtLmFydGlzdHMubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oJywgJyksXG4gICAgICAgICAgICAgICAgdXJsOiBtLmV4dGVybmFsX3VybHM/LnNwb3RpZnkgfHwgYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFjay8ke20uaWR9YCxcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IG0uYWxidW0uaW1hZ2VzPy5bMF0/LnVybCB8fCBudWxsXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGlmICghdHJhY2tzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICBhdXRob3I6IGRhdGEub3duZXIuZGlzcGxheV9uYW1lLFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogZGF0YS5pbWFnZXM/LlswXT8udXJsIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgdXJsOiBkYXRhLmV4dGVybmFsX3VybHMuc3BvdGlmeSB8fCBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3BsYXlsaXN0LyR7aWR9YCxcbiAgICAgICAgICAgICAgICB0cmFja3NcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QWxidW0oaWQ6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gcmVxXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Rva2VuRXhwaXJlZCgpKSBhd2FpdCB0aGlzLnJlcXVlc3RUb2tlbigpO1xuICAgICAgICAgICAgLy8gZmFpbGVkXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWNjZXNzVG9rZW4pIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRGZXRjaChgJHtTUF9CQVNFfS9hbGJ1bXMvJHtpZH0/bWFya2V0PVVTYCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBVQSxcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5hY2Nlc3NUb2tlbi50eXBlfSAke3RoaXMuYWNjZXNzVG9rZW4udG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFyZXMub2spIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCBkYXRhOiB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxfdXJsczogeyBzcG90aWZ5OiBzdHJpbmcgfTtcbiAgICAgICAgICAgICAgICBhcnRpc3RzOiB7IG5hbWU6IHN0cmluZyB9W107XG4gICAgICAgICAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgaW1hZ2VzOiB7IHVybDogc3RyaW5nIH1bXTtcbiAgICAgICAgICAgICAgICB0cmFja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFNwb3RpZnlUcmFja1tdO1xuICAgICAgICAgICAgICAgICAgICBuZXh0Pzogc3RyaW5nO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgICAgICAgICAgaWYgKCFkYXRhLnRyYWNrcy5pdGVtcy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAgICAgICBjb25zdCB0OiBTcG90aWZ5VHJhY2tbXSA9IGRhdGEudHJhY2tzLml0ZW1zO1xuXG4gICAgICAgICAgICBsZXQgbmV4dDogc3RyaW5nIHwgdW5kZWZpbmVkID0gZGF0YS50cmFja3MubmV4dDtcblxuICAgICAgICAgICAgd2hpbGUgKHR5cGVvZiBuZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEZldGNoKG5leHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IFVBLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGAke3RoaXMuYWNjZXNzVG9rZW4udHlwZX0gJHt0aGlzLmFjY2Vzc1Rva2VuLnRva2VufWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXMub2spIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0UGFnZTogeyBpdGVtczogU3BvdGlmeVRyYWNrW107IG5leHQ/OiBzdHJpbmcgfSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdC5wdXNoKC4uLm5leHRQYWdlLml0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHRQYWdlLm5leHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0KSBicmVhaztcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0cmFja3MgPSB0Lm1hcCgobSkgPT4gKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogbS5uYW1lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBtLmR1cmF0aW9uX21zLFxuICAgICAgICAgICAgICAgIGFydGlzdDogbS5hcnRpc3RzLm1hcCgobSkgPT4gbS5uYW1lKS5qb2luKCcsICcpLFxuICAgICAgICAgICAgICAgIHVybDogbS5leHRlcm5hbF91cmxzPy5zcG90aWZ5IHx8IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2svJHttLmlkfWAsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBkYXRhLmltYWdlcz8uWzBdPy51cmwgfHwgbnVsbFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBpZiAoIXRyYWNrcy5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgYXV0aG9yOiBkYXRhLmFydGlzdHMubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oJywgJyksXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBkYXRhLmltYWdlcz8uWzBdPy51cmwgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICB1cmw6IGRhdGEuZXh0ZXJuYWxfdXJscy5zcG90aWZ5IHx8IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vYWxidW0vJHtpZH1gLFxuICAgICAgICAgICAgICAgIHRyYWNrc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTcG90aWZ5VHJhY2sge1xuICAgIGFsYnVtOiB7XG4gICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgICAgICAgICB1cmw6IHN0cmluZztcbiAgICAgICAgICAgIHdpZHRoOiBudW1iZXI7XG4gICAgICAgIH1bXTtcbiAgICB9O1xuICAgIGFydGlzdHM6IHtcbiAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgIH1bXTtcbiAgICBkdXJhdGlvbl9tczogbnVtYmVyO1xuICAgIGV4cGxpY2l0OiBib29sZWFuO1xuICAgIGV4dGVybmFsX3VybHM6IHsgc3BvdGlmeTogc3RyaW5nIH07XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG59XG4iLCAiaW1wb3J0IHsgQmFzZUV4dHJhY3RvciwgRXh0cmFjdG9ySW5mbywgRXh0cmFjdG9yU2VhcmNoQ29udGV4dCwgUGxheWxpc3QsIFF1ZXJ5VHlwZSwgU2VhcmNoUXVlcnlUeXBlLCBUcmFjaywgVXRpbCB9IGZyb20gJ2Rpc2NvcmQtcGxheWVyJztcbmltcG9ydCB0eXBlIHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgWW91dHViZUV4dHJhY3RvciB9IGZyb20gJy4vWW91dHViZUV4dHJhY3Rvcic7XG5pbXBvcnQgeyBTdHJlYW1GTiwgZ2V0RmV0Y2gsIGxvYWRZdGRsLCBwdWxsWVRNZXRhZGF0YSB9IGZyb20gJy4vY29tbW9uL2hlbHBlcic7XG5pbXBvcnQgc3BvdGlmeSwgeyBTcG90aWZ5LCBTcG90aWZ5QWxidW0sIFNwb3RpZnlQbGF5bGlzdCwgU3BvdGlmeVNvbmcgfSBmcm9tICdzcG90aWZ5LXVybC1pbmZvJztcbmltcG9ydCB7IFNwb3RpZnlBUEkgfSBmcm9tICcuLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyBCcmlkZ2VQcm92aWRlciB9IGZyb20gJy4vY29tbW9uL0JyaWRnZVByb3ZpZGVyJztcblxuY29uc3QgcmUgPSAvXig/Omh0dHBzOlxcL1xcL29wZW5cXC5zcG90aWZ5XFwuY29tXFwvKGludGwtKFthLXpdfFtBLVpdKXswLDN9XFwvKT8oPzp1c2VyXFwvW0EtWmEtejAtOV0rXFwvKT98c3BvdGlmeTopKGFsYnVtfHBsYXlsaXN0fHRyYWNrKSg/OlsvOl0pKFtBLVphLXowLTldKykuKiQvO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwb3RpZnlFeHRyYWN0b3JJbml0IHtcbiAgICBjbGllbnRJZD86IHN0cmluZyB8IG51bGw7XG4gICAgY2xpZW50U2VjcmV0Pzogc3RyaW5nIHwgbnVsbDtcbiAgICBjcmVhdGVTdHJlYW0/OiAoZXh0OiBTcG90aWZ5RXh0cmFjdG9yLCB1cmw6IHN0cmluZykgPT4gUHJvbWlzZTxSZWFkYWJsZSB8IHN0cmluZz47XG4gICAgYnJpZGdlUHJvdmlkZXI/OiBCcmlkZ2VQcm92aWRlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFNwb3RpZnlFeHRyYWN0b3IgZXh0ZW5kcyBCYXNlRXh0cmFjdG9yPFNwb3RpZnlFeHRyYWN0b3JJbml0PiB7XG4gICAgcHVibGljIHN0YXRpYyBpZGVudGlmaWVyID0gJ2NvbS5kaXNjb3JkLXBsYXllci5zcG90aWZ5ZXh0cmFjdG9yJyBhcyBjb25zdDtcbiAgICBwcml2YXRlIF9zdHJlYW0hOiBTdHJlYW1GTjtcbiAgICBwcml2YXRlIF9pc1l0ZGwgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9saWIhOiBTcG90aWZ5O1xuICAgIHByaXZhdGUgX2NyZWRlbnRpYWxzID0ge1xuICAgICAgICBjbGllbnRJZDogdGhpcy5vcHRpb25zLmNsaWVudElkIHx8IHByb2Nlc3MuZW52LkRQX1NQT1RJRllfQ0xJRU5UX0lEIHx8IG51bGwsXG4gICAgICAgIGNsaWVudFNlY3JldDogdGhpcy5vcHRpb25zLmNsaWVudFNlY3JldCB8fCBwcm9jZXNzLmVudi5EUF9TUE9USUZZX0NMSUVOVF9TRUNSRVQgfHwgbnVsbFxuICAgIH07XG4gICAgcHVibGljIGludGVybmFsID0gbmV3IFNwb3RpZnlBUEkodGhpcy5fY3JlZGVudGlhbHMpO1xuXG4gICAgcHVibGljIGFzeW5jIGFjdGl2YXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBza2lwIGlmIHdlIGhhdmUgYSBicmlkZ2UgcHJvdmlkZXJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlcikgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGZuID0gdGhpcy5vcHRpb25zLmNyZWF0ZVN0cmVhbTtcblxuICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1l0ZGwgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3N0cmVhbSA9IChxOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4odGhpcywgcSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaWIgPSBhd2FpdCBsb2FkWXRkbCh0aGlzLmNvbnRleHQucGxheWVyLm9wdGlvbnMueXRkbE9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zdHJlYW0gPSBsaWIuc3RyZWFtO1xuICAgICAgICB0aGlzLl9saWIgPSBzcG90aWZ5KGdldEZldGNoKTtcbiAgICAgICAgdGhpcy5faXNZdGRsID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaW50ZXJuYWwuaXNUb2tlbkV4cGlyZWQoKSkgYXdhaXQgdGhpcy5pbnRlcm5hbC5yZXF1ZXN0VG9rZW4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdmFsaWRhdGUocXVlcnk6IHN0cmluZywgdHlwZT86IFNlYXJjaFF1ZXJ5VHlwZSB8IG51bGwgfCB1bmRlZmluZWQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHJldHVybiAoPFNlYXJjaFF1ZXJ5VHlwZVtdPltcbiAgICAgICAgICAgIFF1ZXJ5VHlwZS5TUE9USUZZX0FMQlVNLFxuICAgICAgICAgICAgUXVlcnlUeXBlLlNQT1RJRllfUExBWUxJU1QsXG4gICAgICAgICAgICBRdWVyeVR5cGUuU1BPVElGWV9TT05HLFxuICAgICAgICAgICAgUXVlcnlUeXBlLlNQT1RJRllfU0VBUkNILFxuICAgICAgICAgICAgUXVlcnlUeXBlLkFVVE8sXG4gICAgICAgICAgICBRdWVyeVR5cGUuQVVUT19TRUFSQ0hcbiAgICAgICAgXSkuc29tZSgodCkgPT4gdCA9PT0gdHlwZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFJlbGF0ZWRUcmFja3ModHJhY2s6IFRyYWNrKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZSh0cmFjay5hdXRob3IgfHwgdHJhY2sudGl0bGUsIHtcbiAgICAgICAgICAgIHR5cGU6IFF1ZXJ5VHlwZS5TUE9USUZZX1NFQVJDSCxcbiAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiB0cmFjay5yZXF1ZXN0ZWRCeVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaGFuZGxlKHF1ZXJ5OiBzdHJpbmcsIGNvbnRleHQ6IEV4dHJhY3RvclNlYXJjaENvbnRleHQpOiBQcm9taXNlPEV4dHJhY3RvckluZm8+IHtcbiAgICAgICAgc3dpdGNoIChjb250ZXh0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLkFVVE86XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5BVVRPX1NFQVJDSDpcbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlNQT1RJRllfU0VBUkNIOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuaW50ZXJuYWwuc2VhcmNoKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybiB0aGlzLmNyZWF0ZVJlc3BvbnNlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXNwb25zZShcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXAoKHNwb3RpZnlEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFjazogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5RGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7c3BvdGlmeURhdGEudGl0bGV9IGJ5ICR7c3BvdGlmeURhdGEuYXJ0aXN0fWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBzcG90aWZ5RGF0YS5hcnRpc3QgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlEYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNwb3RpZnlEYXRhLnRodW1ibmFpbCB8fCAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhzcG90aWZ5RGF0YS5kdXJhdGlvbiA/PyAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBRdWVyeVR5cGUuU1BPVElGWV9TT05HLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3BvdGlmeURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIgPyAoYXdhaXQgdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyLnJlc29sdmUodGhpcywgdHJhY2spKS5kYXRhIDogYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgdHJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLmV4dHJhY3RvciA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFjaztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWVyeVR5cGUuU1BPVElGWV9TT05HOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BvdGlmeURhdGE6IFNwb3RpZnlTb25nIHwgdm9pZCA9IGF3YWl0IHRoaXMuX2xpYi5nZXREYXRhKHF1ZXJ5LCBjb250ZXh0LnJlcXVlc3RPcHRpb25zIGFzIHVua25vd24gYXMgUmVxdWVzdEluaXQpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzcG90aWZ5RGF0YSkgcmV0dXJuIHsgcGxheWxpc3Q6IG51bGwsIHRyYWNrczogW10gfTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcG90aWZ5VHJhY2s6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNwb3RpZnlEYXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7c3BvdGlmeURhdGEubmFtZX0gYnkgJHtzcG90aWZ5RGF0YS5hcnRpc3RzLm1hcCgobSkgPT4gbS5uYW1lKS5qb2luKCcsICcpfWAsXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcjogc3BvdGlmeURhdGEuYXJ0aXN0c1swXT8ubmFtZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlEYXRhLmlkID8gYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFjay8ke3Nwb3RpZnlEYXRhLmlkfWAgOiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzcG90aWZ5RGF0YS5jb3ZlckFydD8uc291cmNlcz8uWzBdPy51cmwgfHwgJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHNwb3RpZnlEYXRhLmR1cmF0aW9uID8/IHNwb3RpZnlEYXRhLm1heER1cmF0aW9uID8/IDApKSxcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBjb250ZXh0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIHNwb3RpZnlUcmFjaykpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCBzcG90aWZ5VHJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBzcG90aWZ5VHJhY2suZXh0cmFjdG9yID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtzcG90aWZ5VHJhY2tdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1ZXJ5VHlwZS5TUE9USUZZX1BMQVlMSVNUOiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBxdWVyeVR5cGUsIGlkIH0gPSB0aGlzLnBhcnNlKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5VHlwZSAhPT0gJ3BsYXlsaXN0JykgdGhyb3cgJ2Vycic7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BvdGlmeVBsYXlsaXN0ID0gYXdhaXQgdGhpcy5pbnRlcm5hbC5nZXRQbGF5bGlzdChpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BvdGlmeVBsYXlsaXN0KSB0aHJvdyAnZXJyJztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5bGlzdCA9IG5ldyBQbGF5bGlzdCh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogc3BvdGlmeVBsYXlsaXN0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc3BvdGlmeVBsYXlsaXN0Lm5hbWUgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNwb3RpZnlQbGF5bGlzdC50aHVtYm5haWwgPz8gJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGxheWxpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzcG90aWZ5UGxheWxpc3QuYXV0aG9yID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBudWxsIGFzIHVua25vd24gYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBzcG90aWZ5UGxheWxpc3QuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlQbGF5bGlzdC51cmwgfHwgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICByYXdQbGF5bGlzdDogc3BvdGlmeVBsYXlsaXN0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LnRyYWNrcyA9IHNwb3RpZnlQbGF5bGlzdC50cmFja3MubWFwKChzcG90aWZ5RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YTogVHJhY2sgPSBuZXcgVHJhY2sodGhpcy5jb250ZXh0LnBsYXllciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5RGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYCR7c3BvdGlmeURhdGEudGl0bGV9IGJ5ICR7c3BvdGlmeURhdGEuYXJ0aXN0fWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBzcG90aWZ5RGF0YS5hcnRpc3QgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNwb3RpZnlEYXRhLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWw6IHNwb3RpZnlEYXRhLnRodW1ibmFpbCB8fCAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhzcG90aWZ5RGF0YS5kdXJhdGlvbiA/PyAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiBRdWVyeVR5cGUuU1BPVElGWV9TT05HLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3BvdGlmeURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHNwb3RpZnlEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIgPyAoYXdhaXQgdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyLnJlc29sdmUodGhpcywgZGF0YSkpLmRhdGEgOiBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5leHRyYWN0b3IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wbGF5bGlzdCA9IHBsYXlsaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0pIGFzIFRyYWNrW107XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGxheWxpc3QsIHRyYWNrczogcGxheWxpc3QudHJhY2tzIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwb3RpZnlQbGF5bGlzdDogU3BvdGlmeVBsYXlsaXN0IHwgdm9pZCA9IGF3YWl0IHRoaXMuX2xpYi5nZXREYXRhKHF1ZXJ5LCBjb250ZXh0LnJlcXVlc3RPcHRpb25zIGFzIHVua25vd24gYXMgUmVxdWVzdEluaXQpLmNhdGNoKFV0aWwubm9vcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BvdGlmeVBsYXlsaXN0KSByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5UGxheWxpc3QubmFtZSA/PyBzcG90aWZ5UGxheWxpc3QudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogc3BvdGlmeVBsYXlsaXN0LnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBzcG90aWZ5UGxheWxpc3QuY292ZXJBcnQ/LnNvdXJjZXM/LlswXT8udXJsID8/ICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3BvdGlmeVBsYXlsaXN0LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNwb3RpZnlQbGF5bGlzdC5zdWJ0aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbnVsbCBhcyB1bmtub3duIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogc3BvdGlmeVBsYXlsaXN0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzcG90aWZ5UGxheWxpc3QuaWQgPyBgaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3BsYXlsaXN0LyR7c3BvdGlmeVBsYXlsaXN0LmlkfWAgOiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBzcG90aWZ5UGxheWxpc3RcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QudHJhY2tzID0gc3BvdGlmeVBsYXlsaXN0LnRyYWNrTGlzdC5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGE6IFRyYWNrID0gbmV3IFRyYWNrKHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbS50aXRsZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbS50aXRsZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IG0uc3VidGl0bGUgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG0udWlkID8gYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS90cmFja3MvJHttLnVpZH1gIDogcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogVXRpbC5idWlsZFRpbWVDb2RlKFV0aWwucGFyc2VNUyhtLmR1cmF0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkQnk6IGNvbnRleHQucmVxdWVzdGVkQnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlUeXBlOiAnc3BvdGlmeVNvbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogdGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyID8gKGF3YWl0IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlci5yZXNvbHZlKHRoaXMsIGRhdGEpKS5kYXRhIDogYXdhaXQgcHVsbFlUTWV0YWRhdGEodGhpcywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXh0cmFjdG9yID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGxheWxpc3QgPSBwbGF5bGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KSBhcyBUcmFja1tdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0LCB0cmFja3M6IHBsYXlsaXN0LnRyYWNrcyB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVlcnlUeXBlLlNQT1RJRllfQUxCVU06IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHF1ZXJ5VHlwZSwgaWQgfSA9IHRoaXMucGFyc2UocXVlcnkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlUeXBlICE9PSAnYWxidW0nKSB0aHJvdyAnZXJyJztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcG90aWZ5QWxidW0gPSBhd2FpdCB0aGlzLmludGVybmFsLmdldEFsYnVtKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcG90aWZ5QWxidW0pIHRocm93ICdlcnInO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzcG90aWZ5QWxidW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzcG90aWZ5QWxidW0ubmFtZSA/PyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc3BvdGlmeUFsYnVtLnRodW1ibmFpbCA/PyAnaHR0cHM6Ly93d3cuc2Nkbi5jby9pL19nbG9iYWwvdHdpdHRlcl9jYXJkLWRlZmF1bHQuanBnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhbGJ1bScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNwb3RpZnlBbGJ1bS5hdXRob3IgPz8gJ1Vua25vd24gQXJ0aXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG51bGwgYXMgdW5rbm93biBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHNwb3RpZnlBbGJ1bS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc3BvdGlmeUFsYnVtLnVybCB8fCBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBzcG90aWZ5QWxidW1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QudHJhY2tzID0gc3BvdGlmeUFsYnVtLnRyYWNrcy5tYXAoKHNwb3RpZnlEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNwb3RpZnlEYXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgJHtzcG90aWZ5RGF0YS50aXRsZX0gYnkgJHtzcG90aWZ5RGF0YS5hcnRpc3R9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHNwb3RpZnlEYXRhLmFydGlzdCA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc3BvdGlmeURhdGEudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogc3BvdGlmeURhdGEudGh1bWJuYWlsIHx8ICdodHRwczovL3d3dy5zY2RuLmNvL2kvX2dsb2JhbC90d2l0dGVyX2NhcmQtZGVmYXVsdC5qcGcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBVdGlsLmJ1aWxkVGltZUNvZGUoVXRpbC5wYXJzZU1TKHNwb3RpZnlEYXRhLmR1cmF0aW9uID8/IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3czogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRCeTogY29udGV4dC5yZXF1ZXN0ZWRCeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdzcG90aWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZS5TUE9USUZZX1NPTkcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBzcG90aWZ5RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJpZGdlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0YWRhdGE6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc3BvdGlmeURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCBkYXRhKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV4dHJhY3RvciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSkgYXMgVHJhY2tbXTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxidW06IFNwb3RpZnlBbGJ1bSB8IHZvaWQgPSBhd2FpdCB0aGlzLl9saWIuZ2V0RGF0YShxdWVyeSwgY29udGV4dC5yZXF1ZXN0T3B0aW9ucyBhcyB1bmtub3duIGFzIFJlcXVlc3RJbml0KS5jYXRjaChVdGlsLm5vb3ApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsYnVtKSByZXR1cm4geyBwbGF5bGlzdDogbnVsbCwgdHJhY2tzOiBbXSB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0ID0gbmV3IFBsYXlsaXN0KHRoaXMuY29udGV4dC5wbGF5ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBhbGJ1bS5uYW1lID8/IGFsYnVtLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGFsYnVtLnRpdGxlID8/ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsOiBhbGJ1bS5jb3ZlckFydD8uc291cmNlcz8uWzBdPy51cmwgPz8gJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhbGJ1bS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnc3BvdGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBhbGJ1bS5zdWJ0aXRsZSA/PyAnVW5rbm93biBBcnRpc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbnVsbCBhcyB1bmtub3duIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYWxidW0uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGFsYnVtLmlkID8gYGh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9wbGF5bGlzdC8ke2FsYnVtLmlkfWAgOiBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd1BsYXlsaXN0OiBhbGJ1bVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdC50cmFja3MgPSBhbGJ1bS50cmFja0xpc3QubWFwKChtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhOiBUcmFjayA9IG5ldyBUcmFjayh0aGlzLmNvbnRleHQucGxheWVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG0udGl0bGUgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG0udGl0bGUgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBtLnN1YnRpdGxlID8/ICdVbmtub3duIEFydGlzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtLnVpZCA/IGBodHRwczovL29wZW4uc3BvdGlmeS5jb20vdHJhY2tzLyR7bS51aWR9YCA6IHF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbDogJ2h0dHBzOi8vd3d3LnNjZG4uY28vaS9fZ2xvYmFsL3R3aXR0ZXJfY2FyZC1kZWZhdWx0LmpwZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IFV0aWwuYnVpbGRUaW1lQ29kZShVdGlsLnBhcnNlTVMobS5kdXJhdGlvbikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdzOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5OiBjb250ZXh0LnJlcXVlc3RlZEJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlsaXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ3Nwb3RpZnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5VHlwZTogJ3Nwb3RpZnlTb25nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyaWRnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlciA/IChhd2FpdCB0aGlzLm9wdGlvbnMuYnJpZGdlUHJvdmlkZXIucmVzb2x2ZSh0aGlzLCBkYXRhKSkuZGF0YSA6IGF3YWl0IHB1bGxZVE1ldGFkYXRhKHRoaXMsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV4dHJhY3RvciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBsYXlsaXN0ID0gcGxheWxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSkgYXMgVHJhY2tbXTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwbGF5bGlzdCwgdHJhY2tzOiBwbGF5bGlzdC50cmFja3MgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHBsYXlsaXN0OiBudWxsLCB0cmFja3M6IFtdIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc3RyZWFtKGluZm86IFRyYWNrKTogUHJvbWlzZTxzdHJpbmcgfCBSZWFkYWJsZT4ge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJyaWRnZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMub3B0aW9ucy5icmlkZ2VQcm92aWRlcjtcblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHByb3ZpZGVyLnJlc29sdmUodGhpcywgaW5mbyk7XG4gICAgICAgICAgICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGJyaWRnZSB0aGlzIHRyYWNrJyk7XG5cbiAgICAgICAgICAgIGluZm8uc2V0TWV0YWRhdGEoe1xuICAgICAgICAgICAgICAgIC4uLihpbmZvLm1ldGFkYXRhIHx8IHt9KSxcbiAgICAgICAgICAgICAgICBicmlkZ2U6IGRhdGEuZGF0YVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBwcm92aWRlci5zdHJlYW0oZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3N0cmVhbSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgaW5pdGlhbGl6ZSBzdHJlYW1pbmcgYXBpIGZvciAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9J2ApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHVybCA9IGluZm8udXJsO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1l0ZGwpIHtcbiAgICAgICAgICAgIGlmIChZb3V0dWJlRXh0cmFjdG9yLnZhbGlkYXRlVVJMKGluZm8ucmF3LnVybCkpIHVybCA9IGluZm8ucmF3LnVybDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBhd2FpdCBwdWxsWVRNZXRhZGF0YSh0aGlzLCBpbmZvKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0YSlcbiAgICAgICAgICAgICAgICAgICAgaW5mby5zZXRNZXRhZGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oaW5mby5tZXRhZGF0YSB8fCB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICBicmlkZ2U6IG1ldGFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgX3VybCA9IG1ldGE/LnVybDtcbiAgICAgICAgICAgICAgICBpZiAoIV91cmwpIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIHJlc291cmNlcyBmb3IgeXRkbCBzdHJlYW1pbmcnKTtcbiAgICAgICAgICAgICAgICBpbmZvLnJhdy51cmwgPSB1cmwgPSBfdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmVhbSh1cmwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwYXJzZShxOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgWywgLCAsIHF1ZXJ5VHlwZSwgaWRdID0gcmUuZXhlYyhxKSB8fCBbXTtcblxuICAgICAgICByZXR1cm4geyBxdWVyeVR5cGUsIGlkIH07XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEJhc2VFeHRyYWN0b3IsIFRyYWNrIH0gZnJvbSAnZGlzY29yZC1wbGF5ZXInO1xuaW1wb3J0IHsgU291bmRjbG91ZFRyYWNrVjIgfSBmcm9tICdzb3VuZGNsb3VkLnRzJztcbmltcG9ydCB7IFZpZGVvIH0gZnJvbSAneW91dHViZS1zcic7XG5pbXBvcnQgeyBTb3VuZENsb3VkRXh0cmFjdG9yIH0gZnJvbSAnLi4vU291bmRDbG91ZEV4dHJhY3Rvcic7XG5pbXBvcnQgeyBsb2FkWXRkbCwgcHVsbFNDTWV0YWRhdGEsIHB1bGxZVE1ldGFkYXRhIH0gZnJvbSAnLi9oZWxwZXInO1xuXG5leHBvcnQgZW51bSBCcmlkZ2VTb3VyY2Uge1xuICAgIFNvdW5kQ2xvdWQgPSAnc291bmRjbG91ZCcsXG4gICAgWW91VHViZSA9ICd5b3V0dWJlJ1xufVxuXG5leHBvcnQgdHlwZSBJQnJpZGdlU291cmNlID0gJ3NvdW5kY2xvdWQnIHwgJ3lvdXR1YmUnO1xuXG5leHBvcnQgY2xhc3MgQnJpZGdlUHJvdmlkZXIge1xuICAgIHB1YmxpYyBicmlkZ2VTb3VyY2U6IEJyaWRnZVNvdXJjZSA9IEJyaWRnZVNvdXJjZS5Tb3VuZENsb3VkO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNvdXJjZTogSUJyaWRnZVNvdXJjZSkge1xuICAgICAgICB0aGlzLnNldEJyaWRnZVNvdXJjZShzb3VyY2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRCcmlkZ2VTb3VyY2Uoc291cmNlOiBCcmlkZ2VTb3VyY2UgfCBJQnJpZGdlU291cmNlKSB7XG4gICAgICAgIHN3aXRjaCAoc291cmNlKSB7XG4gICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgIGNhc2UgQnJpZGdlU291cmNlLlNvdW5kQ2xvdWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5icmlkZ2VTb3VyY2UgPSBCcmlkZ2VTb3VyY2UuU291bmRDbG91ZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgY2FzZSBCcmlkZ2VTb3VyY2UuWW91VHViZTpcbiAgICAgICAgICAgICAgICB0aGlzLmJyaWRnZVNvdXJjZSA9IEJyaWRnZVNvdXJjZS5Zb3VUdWJlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGJyaWRnZSBzb3VyY2UnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc1NvdW5kQ2xvdWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyaWRnZVNvdXJjZSA9PT0gQnJpZGdlU291cmNlLlNvdW5kQ2xvdWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGlzWW91VHViZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnJpZGdlU291cmNlID09PSBCcmlkZ2VTb3VyY2UuWW91VHViZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVzb2x2ZShleHQ6IEJhc2VFeHRyYWN0b3IsIHRyYWNrOiBUcmFjaykge1xuICAgICAgICBjb25zdCBpc1NvdW5kY2xvdWQgPSB0aGlzLmlzU291bmRDbG91ZCgpO1xuICAgICAgICBjb25zdCBicmlkZ2VmbiA9IGlzU291bmRjbG91ZCA/IHB1bGxTQ01ldGFkYXRhIDogcHVsbFlUTWV0YWRhdGE7XG5cbiAgICAgICAgLy8gcGF0Y2ggcXVlcnlcbiAgICAgICAgY29uc3Qgb2xkUWMgPSBleHQuY3JlYXRlQnJpZGdlUXVlcnk7XG4gICAgICAgIGlmIChpc1NvdW5kY2xvdWQpIGV4dC5jcmVhdGVCcmlkZ2VRdWVyeSA9ICh0cmFjaykgPT4gYCR7dHJhY2suYXV0aG9yfSAke3RyYWNrLnRpdGxlfWA7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGJyaWRnZWZuKGV4dCwgdHJhY2spO1xuICAgICAgICBleHQuY3JlYXRlQnJpZGdlUXVlcnkgPSBvbGRRYztcblxuICAgICAgICByZXR1cm4geyBzb3VyY2U6IGlzU291bmRjbG91ZCA/ICdzb3VuZGNsb3VkJyA6ICd5b3V0dWJlJywgZGF0YTogcmVzIH0gYXMgQnJpZGdlZE1ldGFkYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzdHJlYW0obWV0YTogQnJpZGdlZE1ldGFkYXRhKSB7XG4gICAgICAgIGlmIChtZXRhLnNvdXJjZSA9PT0gJ3NvdW5kY2xvdWQnKSB7XG4gICAgICAgICAgICBpZiAoIVNvdW5kQ2xvdWRFeHRyYWN0b3Iuc291bmRjbG91ZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgc291bmRjbG91ZCBjbGllbnQsIG1ha2Ugc3VyZSBTb3VuZENsb3VkRXh0cmFjdG9yIGlzIGluc3RhbnRpYXRlZCBwcm9wZXJseS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IFNvdW5kQ2xvdWRFeHRyYWN0b3Iuc291bmRjbG91ZC51dGlsLnN0cmVhbUxpbmsobWV0YS5kYXRhIGFzIFNvdW5kY2xvdWRUcmFja1YyLCAncHJvZ3Jlc3NpdmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHl0ZGwgPSBhd2FpdCBsb2FkWXRkbCgpO1xuICAgICAgICAgICAgcmV0dXJuIHl0ZGwuc3RyZWFtKChtZXRhLmRhdGEgYXMgVmlkZW8pLnVybCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmludGVyZmFjZSBCcmlkZ2VkTWV0YWRhdGEge1xuICAgIHNvdXJjZTogSUJyaWRnZVNvdXJjZTtcbiAgICBkYXRhOiBTb3VuZGNsb3VkVHJhY2tWMiB8IFZpZGVvIHwgbnVsbDtcbn1cbiIsICJleHBvcnQgKiBmcm9tICcuL2V4dHJhY3RvcnMnO1xuZXhwb3J0ICogYXMgSW50ZXJuYWwgZnJvbSAnLi9pbnRlcm5hbCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8taW5mZXJyYWJsZS10eXBlc1xuZXhwb3J0IGNvbnN0IHZlcnNpb246IHN0cmluZyA9ICc0LjQuMCc7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7OztBQUNBO0FBQUEsRUFDSTtBQUFBLEVBR0E7QUFBQSxFQUNBO0FBQUEsRUFFQTtBQUFBLEVBQ0E7QUFBQSxPQUNHO0FBQ1AsWUFBWSxnQkFBZ0I7QUFRckIsSUFBTSx1QkFBTixjQUFrQyxjQUF1QztBQUFBLEVBQXpFO0FBQUE7QUFL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QUFBQSxNQUNKLEtBQUs7QUFBQSxNQUNMLEtBQUs7QUFDRCxhQUFLLGVBQWU7QUFDcEI7QUFBQSxNQUNKO0FBQ0ksY0FBTSxJQUFJLFVBQVUsdUJBQXVCO0FBQUEsSUFDbkQ7QUFBQSxFQUNKO0FBQUEsRUFFTyxlQUFlO0FBQ2xCLFdBQU8sS0FBSyxpQkFBaUI7QUFBQSxFQUNqQztBQUFBLEVBRU8sWUFBWTtBQUNmLFdBQU8sS0FBSyxpQkFBaUI7QUFBQSxFQUNqQztBQUFBLEVBRUEsTUFBYSxRQUFRLEtBQW9CLE9BQWM7QUFDbkQsVUFBTSxlQUFlLEtBQUssYUFBYTtBQUN2QyxVQUFNLFdBQVcsZUFBZSxpQkFBaUI7QUFHakQsVUFBTSxRQUFRLElBQUk7QUFDbEIsUUFBSTtBQUFjLFVBQUksb0JBQW9CLENBQUNDLFdBQVUsR0FBR0EsT0FBTSxVQUFVQSxPQUFNO0FBQzlFLFVBQU0sTUFBTSxNQUFNLFNBQVMsS0FBSyxLQUFLO0FBQ3JDLFFBQUksb0JBQW9CO0FBRXhCLFdBQU8sRUFBRSxRQUFRLGVBQWUsZUFBZSxXQUFXLE1BQU0sSUFBSTtBQUFBLEVBQ3hFO0FBQUEsRUFFQSxNQUFhLE9BQU8sTUFBdUI7QUFDdkMsUUFBSSxLQUFLLFdBQVcsY0FBYztBQUM5QixVQUFJLENBQUMsb0JBQW9CLFlBQVk7QUFDakMsY0FBTSxJQUFJLE1BQU0sMkZBQTJGO0FBQUEsTUFDL0c7QUFFQSxhQUFPLE1BQU0sb0JBQW9CLFdBQVcsS0FBSyxXQUFXLEtBQUssTUFBMkIsYUFBYTtBQUFBLElBQzdHLE9BQU87QUFDSCxZQUFNLE9BQU8sTUFBTSxTQUFTO0FBQzVCLGFBQU8sS0FBSyxPQUFRLEtBQUssS0FBZSxHQUFHO0FBQUEsSUFDL0M7QUFBQSxFQUNKO0FBQ0o7QUF2RGE7OztBQ1ROLElBQU0sVUFBa0I7IiwKICAibmFtZXMiOiBbIllvdVR1YmUiLCAiQmFzZUV4dHJhY3RvciIsICJQbGF5bGlzdCIsICJRdWVyeVR5cGUiLCAiVHJhY2siLCAiVXRpbCIsICJsaWIiLCAicmUiLCAiQmFzZUV4dHJhY3RvciIsICJRdWVyeVR5cGUiLCAiWW91VHViZSIsICJVdGlsIiwgIlBsYXlsaXN0IiwgIlRyYWNrIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlRyYWNrIiwgIlV0aWwiLCAiQmFzZUV4dHJhY3RvciIsICJRdWVyeVR5cGUiLCAiVXRpbCIsICJUcmFjayIsICJCYXNlRXh0cmFjdG9yIiwgIlF1ZXJ5VHlwZSIsICJUcmFjayIsICJVdGlsIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlV0aWwiLCAiVHJhY2siLCAiQmFzZUV4dHJhY3RvciIsICJRdWVyeVR5cGUiLCAiVHJhY2siLCAiVXRpbCIsICJodHRwIiwgImh0dHBzIiwgImh0dHAiLCAiaHR0cHMiLCAiQmFzZUV4dHJhY3RvciIsICJRdWVyeVR5cGUiLCAiVHJhY2siLCAiVXRpbCIsICJCYXNlRXh0cmFjdG9yIiwgIlBsYXlsaXN0IiwgIlF1ZXJ5VHlwZSIsICJUcmFjayIsICJVdGlsIiwgInIiLCAibSIsICJyZXMiLCAiQmFzZUV4dHJhY3RvciIsICJRdWVyeVR5cGUiLCAiVHJhY2siLCAiVXRpbCIsICJQbGF5bGlzdCIsICJCYXNlRXh0cmFjdG9yIiwgIlBsYXlsaXN0IiwgIlF1ZXJ5VHlwZSIsICJUcmFjayIsICJVdGlsIiwgIkJhc2VFeHRyYWN0b3IiLCAiUXVlcnlUeXBlIiwgIlRyYWNrIiwgIlV0aWwiLCAiUGxheWxpc3QiLCAiQnJpZGdlU291cmNlIiwgInRyYWNrIl0KfQo=